{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.1", "generated_at": "2024-01-02T04:31:35.602124Z", "invocation_id": "06de0f08-cdab-4e74-90f1-1e5ff207ff0f", "env": {}, "project_id": "37e9b0fc1542514abb8721cf67968006", "user_id": "3753eec8-782e-4b21-af36-aafc92836c40", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.sagerx.int_rxnorm_clinical_products_to_dose_forms": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_clinical_products_to_dose_forms", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_clinical_products_to_dose_forms.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_clinical_products_to_dose_forms.sql", "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_dose_forms", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_clinical_products_to_dose_forms"], "alias": "int_rxnorm_clinical_products_to_dose_forms", "checksum": {"name": "sha256", "checksum": "06775cf90c9e74a8ee2aecba875c775da80116308e6dbca0afb67ee532f27629"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products to dose forms.", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_compnent_name": {"name": "clinical_product_compnent_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_tty": {"name": "clinical_product_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_name": {"name": "dose_form_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_tty": {"name": "dose_form_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.21946, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_clinical_products_to_dose_forms\"", "raw_code": "-- int_rxnorm_clinical_products_to_dose_forms.sql\n\nwith\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrcpcl as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_component_links') }}\n\n),\n\nrcpc as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_components') }}\n\n),\n\nrdf as (\n\n    select * from {{ ref('stg_rxnorm__dose_forms') }}\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui", "language": "sql", "refs": [["stg_rxnorm__clinical_products"], ["stg_rxnorm__clinical_product_component_links"], ["stg_rxnorm__clinical_product_components"], ["stg_rxnorm__dose_forms"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__dose_forms"]}, "compiled_path": null}, "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_clinical_products_to_ingredient_strengths", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_clinical_products_to_ingredient_strengths.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_clinical_products_to_ingredient_strengths.sql", "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_clinical_products_to_ingredient_strengths"], "alias": "int_rxnorm_clinical_products_to_ingredient_strengths", "checksum": {"name": "sha256", "checksum": "acb36d09e0553a9bd5fc6a774a0f50ae47dd2e0ac444d967e57a4e27c82efe1d"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products to ingredient strengths.", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_compnent_name": {"name": "clinical_product_compnent_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_tty": {"name": "clinical_product_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_name": {"name": "dose_form_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_tty": {"name": "dose_form_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_name": {"name": "ingredient_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_tty": {"name": "ingredient_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_rxcui": {"name": "ingredient_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_name": {"name": "ingredient_component_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_tty": {"name": "ingredient_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_strength_rxcui": {"name": "ingredient_strength_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_strength_name": {"name": "ingredient_strength_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strength_numerator_value": {"name": "strength_numerator_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strength_numerator_unit": {"name": "strength_numerator_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strength_denominator_value": {"name": "strength_denominator_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strength_denominator_unit": {"name": "strength_denominator_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "strength_text": {"name": "strength_text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.251276, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_clinical_products_to_ingredient_strengths\"", "raw_code": "-- int_rxnorm_clinical_products_to_ingredient_strengths.sql\n\nwith\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrcpcl as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_component_links') }}\n\n),\n\nrcpc as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_components') }}\n\n),\n\nrdf as (\n\n    select * from {{ ref('stg_rxnorm__dose_forms') }}\n\n),\n\nri as (\n\n    select * from {{ ref('stg_rxnorm__ingredients') }}\n\n),\n\nricl as (\n\n    select * from {{ ref('stg_rxnorm__ingredient_component_links') }}\n\n),\n\nric as (\n\n    select * from {{ ref('stg_rxnorm__ingredient_components') }}\n\n),\n\nrisl as (\n\n    select * from {{ ref('stg_rxnorm__ingredient_strength_links') }}\n\n),\n\nris as (\n\n    select * from {{ ref('stg_rxnorm__ingredient_strengths') }}\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , ric.rxcui as ingredient_component_rxcui\n    , ric.name as ingredient_component_name\n    , ric.tty as ingredient_component_tty\n    , ris.rxcui as ingredient_strength_rxcui\n    , ris.name as ingredient_strength_name\n    , ris.numerator_value as strength_numerator_value\n    , ris.numerator_unit as strength_numerator_unit\n    , ris.denominator_value as strength_denominator_value\n    , ris.denominator_unit as strength_denominator_unit\n    , ris.text as strength_text\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \nleft join ricl \n    on ri.rxcui = ricl.ingredient_rxcui \nleft join ric \n    on ricl.ingredient_component_rxcui = ric.rxcui \nleft join risl \n    on rcpc.rxcui = risl.clinical_product_component_rxcui \n    and ric.rxcui = risl.ingredient_component_rxcui \nleft join ris \n    on risl.ingredient_strength_rxcui = ris.rxcui", "language": "sql", "refs": [["stg_rxnorm__clinical_products"], ["stg_rxnorm__clinical_product_component_links"], ["stg_rxnorm__clinical_product_components"], ["stg_rxnorm__dose_forms"], ["stg_rxnorm__ingredients"], ["stg_rxnorm__ingredient_component_links"], ["stg_rxnorm__ingredient_components"], ["stg_rxnorm__ingredient_strength_links"], ["stg_rxnorm__ingredient_strengths"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredients", "model.sagerx.stg_rxnorm__ingredient_component_links", "model.sagerx.stg_rxnorm__ingredient_components", "model.sagerx.stg_rxnorm__ingredient_strength_links", "model.sagerx.stg_rxnorm__ingredient_strengths"]}, "compiled_path": null}, "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_clinical_products_to_ingredient_components", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_clinical_products_to_ingredient_components.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_clinical_products_to_ingredient_components.sql", "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_clinical_products_to_ingredient_components"], "alias": "int_rxnorm_clinical_products_to_ingredient_components", "checksum": {"name": "sha256", "checksum": "7f7d7491def9cd8b663072eaca05a3205fd7a61fce66797f60e6e2d10f223cde"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products to ingredient components.", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_compnent_name": {"name": "clinical_product_compnent_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_tty": {"name": "clinical_product_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_name": {"name": "dose_form_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_tty": {"name": "dose_form_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_name": {"name": "ingredient_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_tty": {"name": "ingredient_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_rxcui": {"name": "ingredient_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_name": {"name": "ingredient_component_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_tty": {"name": "ingredient_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.2415118, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_clinical_products_to_ingredient_components\"", "raw_code": "-- int_rxnorm_clinical_products_to_ingredient_components.sql\n\nwith\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrcpcl as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_component_links') }}\n\n),\n\nrcpc as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_components') }}\n\n),\n\nrdf as (\n\n    select * from {{ ref('stg_rxnorm__dose_forms') }}\n\n),\n\nri as (\n\n    select * from {{ ref('stg_rxnorm__ingredients') }}\n\n),\n\nricl as (\n\n    select * from {{ ref('stg_rxnorm__ingredient_component_links') }}\n\n),\n\nric as (\n\n    select * from {{ ref('stg_rxnorm__ingredient_components') }}\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_component_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , ric.rxcui as ingredient_component_rxcui\n    , ric.name as ingredient_component_name\n    , ric.tty as ingredient_component_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \nleft join ricl \n    on ri.rxcui = ricl.ingredient_rxcui \nleft join ric \n    on ricl.ingredient_component_rxcui = ric.rxcui", "language": "sql", "refs": [["stg_rxnorm__clinical_products"], ["stg_rxnorm__clinical_product_component_links"], ["stg_rxnorm__clinical_product_components"], ["stg_rxnorm__dose_forms"], ["stg_rxnorm__ingredients"], ["stg_rxnorm__ingredient_component_links"], ["stg_rxnorm__ingredient_components"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredients", "model.sagerx.stg_rxnorm__ingredient_component_links", "model.sagerx.stg_rxnorm__ingredient_components"]}, "compiled_path": null}, "model.sagerx.int_mthspl_products_to_active_moieties": {"database": "sagerx", "schema": "intermediate", "name": "int_mthspl_products_to_active_moieties", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_mthspl_products_to_active_moieties.sql", "original_file_path": "models/intermediate/rxnorm/int_mthspl_products_to_active_moieties.sql", "unique_id": "model.sagerx.int_mthspl_products_to_active_moieties", "fqn": ["sagerx", "intermediate", "rxnorm", "int_mthspl_products_to_active_moieties"], "alias": "int_mthspl_products_to_active_moieties", "checksum": {"name": "sha256", "checksum": "fc1bacb64ff91d7b5d1d1d2946923862afebe1d8b9fea3309f0a4be4355b5dfa"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NLM SPL products to active moieties.", "columns": {"ndc9": {"name": "ndc9", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc": {"name": "ndc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rxcui": {"name": "product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_tty": {"name": "product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_moiety_unii": {"name": "active_moiety_unii", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_moiety_rxcui": {"name": "active_moiety_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_moiety_name": {"name": "active_moiety_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_moiety_tty": {"name": "active_moiety_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.2081625, "relation_name": "\"sagerx\".\"intermediate\".\"int_mthspl_products_to_active_moieties\"", "raw_code": "-- int_mthspl_products_to_active_moieties.sql\n\nwith\n\nsubstance as (\n\n    select * from {{ ref('stg_rxnorm__mthspl_substances') }}\n\n),\n\nproduct as (\n\n    select * from {{ ref('stg_rxnorm__mthspl_products') }}\n\n)\n\nselect distinct\n    concat(lpad(split_part(product.ndc,'-', 1), 5, '0'), lpad(split_part(product.ndc,'-', 2), 4, '0')) as ndc9\n    , product.ndc as ndc\n    , product.rxcui as product_rxcui\n    , product.name as product_name\n    , product.tty as product_tty\n    , substance.unii as active_moiety_unii\n    , substance.rxcui as active_moiety_rxcui\n    , substance.name as active_moiety_name\n    , substance.tty as active_moiety_tty\t\n    , product.active as active\n    , product.prescribable as prescribable\nfrom sagerx_lake.rxnorm_rxnrel rxnrel\ninner join substance\n    on rxnrel.rxaui1 = substance.rxaui\ninner join product\n    on rxnrel.rxaui2 = product.rxaui\nwhere rela = 'has_active_moiety'", "language": "sql", "refs": [["stg_rxnorm__mthspl_substances"], ["stg_rxnorm__mthspl_products"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__mthspl_substances", "model.sagerx.stg_rxnorm__mthspl_products"]}, "compiled_path": null}, "model.sagerx.int_mthspl_products_to_inactive_ingredients": {"database": "sagerx", "schema": "intermediate", "name": "int_mthspl_products_to_inactive_ingredients", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_mthspl_products_to_inactive_ingredients.sql", "original_file_path": "models/intermediate/rxnorm/int_mthspl_products_to_inactive_ingredients.sql", "unique_id": "model.sagerx.int_mthspl_products_to_inactive_ingredients", "fqn": ["sagerx", "intermediate", "rxnorm", "int_mthspl_products_to_inactive_ingredients"], "alias": "int_mthspl_products_to_inactive_ingredients", "checksum": {"name": "sha256", "checksum": "daa16e39f86fef1da7f6a75e0e0eedebb26af4cf2c1162caff6d78039adb609e"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NLM SPL products to inactive ingredients.", "columns": {"ndc9": {"name": "ndc9", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc": {"name": "ndc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rxcui": {"name": "product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_tty": {"name": "product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inactive_ingredient_unii": {"name": "inactive_ingredient_unii", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inactive_ingredient_rxcui": {"name": "inactive_ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inactive_ingredient_name": {"name": "inactive_ingredient_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inactive_ingredient_tty": {"name": "inactive_ingredient_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.2036345, "relation_name": "\"sagerx\".\"intermediate\".\"int_mthspl_products_to_inactive_ingredients\"", "raw_code": "-- int_mthspl_products_to_inactive_ingredients.sql\n\nwith\n\nsubstance as (\n\n    select * from {{ ref('stg_rxnorm__mthspl_substances') }}\n\n),\n\nproduct as (\n\n    select * from {{ ref('stg_rxnorm__mthspl_products') }}\n\n)\n\nselect distinct\n    concat(lpad(split_part(product.ndc,'-', 1), 5, '0'), lpad(split_part(product.ndc,'-', 2), 4, '0')) as ndc9\n    , product.ndc as ndc\n    , product.rxcui as product_rxcui\n    , product.name as product_name\n    , product.tty as product_tty\n    , substance.unii as inactive_ingredient_unii\n    , substance.rxcui as inactive_ingredient_rxcui\n    , substance.name as inactive_ingredient_name\n    , substance.tty as inactive_ingredient_tty\t\n    , product.active as active\n    , product.prescribable as prescribable\nfrom sagerx_lake.rxnorm_rxnrel rxnrel\ninner join substance\n    on rxnrel.rxaui1 = substance.rxaui\ninner join product\n    on rxnrel.rxaui2 = product.rxaui\nwhere rela = 'has_inactive_ingredient'", "language": "sql", "refs": [["stg_rxnorm__mthspl_substances"], ["stg_rxnorm__mthspl_products"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__mthspl_substances", "model.sagerx.stg_rxnorm__mthspl_products"]}, "compiled_path": null}, "model.sagerx.int_rxnorm_clinical_products_to_ingredients": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_clinical_products_to_ingredients", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_clinical_products_to_ingredients.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_clinical_products_to_ingredients.sql", "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_clinical_products_to_ingredients"], "alias": "int_rxnorm_clinical_products_to_ingredients", "checksum": {"name": "sha256", "checksum": "f801bdf54d9dfb4936b6c00bee73268e1baba978fe5f5e578df5443ab109227e"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products to ingredients.", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_compnent_name": {"name": "clinical_product_compnent_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_tty": {"name": "clinical_product_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_name": {"name": "dose_form_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_tty": {"name": "dose_form_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_name": {"name": "ingredient_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_tty": {"name": "ingredient_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.2317204, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_clinical_products_to_ingredients\"", "raw_code": "-- int_rxnorm_clinical_products_to_ingredients.sql\n\nwith\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrcpcl as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_component_links') }}\n\n),\n\nrcpc as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_components') }}\n\n),\n\nrdf as (\n\n    select * from {{ ref('stg_rxnorm__dose_forms') }}\n\n),\n\nri as (\n\n    select * from {{ ref('stg_rxnorm__ingredients') }}\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , rcp.active\n    , rcp.prescribable        \nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui", "language": "sql", "refs": [["stg_rxnorm__clinical_products"], ["stg_rxnorm__clinical_product_component_links"], ["stg_rxnorm__clinical_product_components"], ["stg_rxnorm__dose_forms"], ["stg_rxnorm__ingredients"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredients"]}, "compiled_path": null}, "model.sagerx.int_rxnorm_clinical_products_to_ndcs": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_clinical_products_to_ndcs", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_clinical_products_to_ndcs.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_clinical_products_to_ndcs.sql", "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_clinical_products_to_ndcs"], "alias": "int_rxnorm_clinical_products_to_ndcs", "checksum": {"name": "sha256", "checksum": "eb75f7d8b5e0f6df9d3b1fa7a2876caa2b91f10c1db42a476c636e22a63d1977"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products to NDCs.", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_compnent_name": {"name": "clinical_product_compnent_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_tty": {"name": "clinical_product_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_name": {"name": "dose_form_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_tty": {"name": "dose_form_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_name": {"name": "ingredient_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_tty": {"name": "ingredient_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand_product_rxcui": {"name": "brand_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc": {"name": "ndc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.2256477, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_clinical_products_to_ndcs\"", "raw_code": "-- int_rxnorm_clinical_products_to_ndcs.sql\n\nwith\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrcpcl as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_component_links') }}\n\n),\n\nrcpc as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_components') }}\n\n),\n\nrdf as (\n\n    select * from {{ ref('stg_rxnorm__dose_forms') }}\n\n),\n\nri as (\n\n    select * from {{ ref('stg_rxnorm__ingredients') }}\n\n),\n\nrn as (\n\n    select * from {{ ref('stg_rxnorm__ndcs') }}\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , rn.brand_product_rxcui\n    , rn.ndc\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \nleft join rn\n    on rcp.rxcui = rn.clinical_product_rxcui", "language": "sql", "refs": [["stg_rxnorm__clinical_products"], ["stg_rxnorm__clinical_product_component_links"], ["stg_rxnorm__clinical_product_components"], ["stg_rxnorm__dose_forms"], ["stg_rxnorm__ingredients"], ["stg_rxnorm__ndcs"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredients", "model.sagerx.stg_rxnorm__ndcs"]}, "compiled_path": null}, "model.sagerx.int_mthspl_products_to_active_ingredients": {"database": "sagerx", "schema": "intermediate", "name": "int_mthspl_products_to_active_ingredients", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_mthspl_products_to_active_ingredients.sql", "original_file_path": "models/intermediate/rxnorm/int_mthspl_products_to_active_ingredients.sql", "unique_id": "model.sagerx.int_mthspl_products_to_active_ingredients", "fqn": ["sagerx", "intermediate", "rxnorm", "int_mthspl_products_to_active_ingredients"], "alias": "int_mthspl_products_to_active_ingredients", "checksum": {"name": "sha256", "checksum": "76c44c2c27a59921b032439a7fdb83a596e9f3d7391647c4eadaef1501d2f5e9"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "NLM SPL products to active ingredients.", "columns": {"ndc9": {"name": "ndc9", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc": {"name": "ndc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rxcui": {"name": "product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_tty": {"name": "product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_ingredient_unii": {"name": "active_ingredient_unii", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_ingredient_rxcui": {"name": "active_ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_ingredient_name": {"name": "active_ingredient_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_ingredient_tty": {"name": "active_ingredient_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.199192, "relation_name": "\"sagerx\".\"intermediate\".\"int_mthspl_products_to_active_ingredients\"", "raw_code": "-- int_mthspl_products_to_active_ingredients.sql\n\nwith\n\nsubstance as (\n\n    select * from {{ ref('stg_rxnorm__mthspl_substances') }}\n\n),\n\nproduct as (\n\n    select * from {{ ref('stg_rxnorm__mthspl_products') }}\n\n)\n\nselect distinct\n    concat(lpad(split_part(product.ndc,'-', 1), 5, '0'), lpad(split_part(product.ndc,'-', 2), 4, '0')) as ndc9\n    , product.ndc as ndc\n    , product.rxcui as product_rxcui\n    , product.name as product_name\n    , product.tty as product_tty\n    , substance.unii as active_ingredient_unii\n    , substance.rxcui as active_ingredient_rxcui\n    , substance.name as active_ingredient_name\n    , substance.tty as active_ingredient_tty\t\n    , product.active as active\n    , product.prescribable as prescribable\nfrom sagerx_lake.rxnorm_rxnrel rxnrel\ninner join substance\n    on rxnrel.rxaui1 = substance.rxaui\ninner join product\n    on rxnrel.rxaui2 = product.rxaui\nwhere rela = 'has_active_ingredient'", "language": "sql", "refs": [["stg_rxnorm__mthspl_substances"], ["stg_rxnorm__mthspl_products"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__mthspl_substances", "model.sagerx.stg_rxnorm__mthspl_products"]}, "compiled_path": null}, "model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_clinical_products_to_clinical_product_components", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_clinical_products_to_clinical_product_components.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_clinical_products_to_clinical_product_components.sql", "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_clinical_products_to_clinical_product_components"], "alias": "int_rxnorm_clinical_products_to_clinical_product_components", "checksum": {"name": "sha256", "checksum": "67b04d6206f8a2a4309d5487aca45bdc9aa30494c4f62fc73da5325c625f3810"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products to clinical product components.", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_compnent_name": {"name": "clinical_product_compnent_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_tty": {"name": "clinical_product_component_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.214858, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_clinical_products_to_clinical_product_components\"", "raw_code": "-- int_rxnorm_clinical_products_to_clinical_product_components.sql\n\nwith\n\nndc as (\n\n    select * from {{ ref('stg_rxnorm__ndcs') }}\n\n),\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrcpcl as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_component_links') }}\n\n),\n\nrcpc as (\n\n    select * from {{ ref('stg_rxnorm__clinical_product_components') }}\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui", "language": "sql", "refs": [["stg_rxnorm__ndcs"], ["stg_rxnorm__clinical_products"], ["stg_rxnorm__clinical_product_component_links"], ["stg_rxnorm__clinical_product_components"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__ndcs", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components"]}, "compiled_path": null}, "model.sagerx.int_rxnorm_ndcs_to_products": {"database": "sagerx", "schema": "intermediate", "name": "int_rxnorm_ndcs_to_products", "resource_type": "model", "package_name": "sagerx", "path": "intermediate/rxnorm/int_rxnorm_ndcs_to_products.sql", "original_file_path": "models/intermediate/rxnorm/int_rxnorm_ndcs_to_products.sql", "unique_id": "model.sagerx.int_rxnorm_ndcs_to_products", "fqn": ["sagerx", "intermediate", "rxnorm", "int_rxnorm_ndcs_to_products"], "alias": "int_rxnorm_ndcs_to_products", "checksum": {"name": "sha256", "checksum": "50be088b2c75144d92d7a2f46f158771f19afeab5543768e534d7b8ee4f5c93b"}, "config": {"enabled": true, "alias": null, "schema": "intermediate", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm NDCs to products. Will return brand product if NDC is brand name, or generic product if NDC is generic.", "columns": {"ndc": {"name": "ndc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rxcui": {"name": "product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_tty": {"name": "product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_name": {"name": "clinical_product_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_tty": {"name": "clinical_product_tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/intermediate/rxnorm/_int_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "intermediate", "materialized": "view"}, "created_at": 1704169463.2112792, "relation_name": "\"sagerx\".\"intermediate\".\"int_rxnorm_ndcs_to_products\"", "raw_code": "-- int_rxnorm_ndcs_to_products.sql\n\nwith\n\nndc as (\n\n    select * from {{ ref('stg_rxnorm__ndcs') }}\n\n),\n\nrcp as (\n\n    select * from {{ ref('stg_rxnorm__clinical_products') }}\n\n),\n\nrbp as (\n\n    select * from {{ ref('stg_rxnorm__brand_products') }}\n\n)\n\nselect distinct\n    ndc\n    , coalesce(rbp.rxcui, rcp.rxcui, null) as product_rxcui\n    , coalesce(rbp.name, rcp.name, null) as product_name\n    , coalesce(rbp.tty, rcp.tty, null) as product_tty\n    , rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\nfrom ndc\nleft join rcp \n    on ndc.clinical_product_rxcui = rcp.rxcui\nleft join rbp\n    on ndc.brand_product_rxcui = rbp.rxcui", "language": "sql", "refs": [["stg_rxnorm__ndcs"], ["stg_rxnorm__clinical_products"], ["stg_rxnorm__brand_products"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_rxnorm__ndcs", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__brand_products"]}, "compiled_path": null}, "model.sagerx.stg_nadac__all_nadac": {"database": "sagerx", "schema": "staging", "name": "stg_nadac__all_nadac", "resource_type": "model", "package_name": "sagerx", "path": "staging/nadac/stg_nadac__all_nadac.sql", "original_file_path": "models/staging/nadac/stg_nadac__all_nadac.sql", "unique_id": "model.sagerx.stg_nadac__all_nadac", "fqn": ["sagerx", "staging", "nadac", "stg_nadac__all_nadac"], "alias": "stg_nadac__all_nadac", "checksum": {"name": "sha256", "checksum": "4e73a1ac3548fa19ed19085c5dfa9255841c11f6019bd93c120d109a8bdfd089"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Deduplicates NADAC data and converts format of some columns.", "columns": {"ndc": {"name": "ndc", "description": "The National Drug Code (NDC) is a numerical code maintained by the FDA that includes the labeler code, product code, and package code. The NDC is an 11-digit code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc_description": {"name": "ndc_description", "description": "Identifies the drug name, strength, and dosage form of the drug product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nadac_per_unit": {"name": "nadac_per_unit", "description": "The National Average Drug Acquisition Cost per unit. Staging table converts this to a numeric type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pricing_unit": {"name": "pricing_unit", "description": "Indicates the pricing unit for the associated NDC ('ML', 'GM' or 'EA').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The effective date of the NADAC Per Unit cost. Staging table converts this to a date type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/nadac/_nadac__models.yml", "build_path": "target/run/sagerx/models/staging/nadac/stg_nadac__all_nadac.sql", "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3085525, "relation_name": "\"sagerx\".\"staging\".\"stg_nadac__all_nadac\"", "raw_code": "-- stg_nadac__all_nadac.sql\n\nwith\n\nnadac as (\n\n    select * from {{ source('nadac','nadac') }}\n\n)\n\nselect distinct \n\tndc\n\t, ndc_description\n\t, nadac_per_unit::numeric\n\t, pricing_unit\n\t, effective_date::date\nfrom nadac", "language": "sql", "refs": [], "sources": [["nadac", "nadac"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sagerx.nadac.nadac"]}, "compiled_path": "target/compiled/sagerx/models/staging/nadac/stg_nadac__all_nadac.sql", "compiled": true, "compiled_code": "-- stg_nadac__all_nadac.sql\n\nwith\n\nnadac as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"nadac\"\n\n)\n\nselect distinct \n\tndc\n\t, ndc_description\n\t, nadac_per_unit::numeric\n\t, pricing_unit\n\t, effective_date::date\nfrom nadac", "extra_ctes_injected": true, "extra_ctes": []}, "model.sagerx.stg_nadac__enhanced_nadac": {"database": "sagerx", "schema": "staging", "name": "stg_nadac__enhanced_nadac", "resource_type": "model", "package_name": "sagerx", "path": "staging/nadac/stg_nadac__enhanced_nadac.sql", "original_file_path": "models/staging/nadac/stg_nadac__enhanced_nadac.sql", "unique_id": "model.sagerx.stg_nadac__enhanced_nadac", "fqn": ["sagerx", "staging", "nadac", "stg_nadac__enhanced_nadac"], "alias": "stg_nadac__enhanced_nadac", "checksum": {"name": "sha256", "checksum": "fbdd48611f51cfde18ae41704d4a6b259af83093c3a7eca459b7ec685f85322f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Flags NADAC survey data to make it easy to find most recent price, first price, and dollar / percent changes between prices. Can also SUM change_type to see the number of price increases over time.", "columns": {"ndc": {"name": "ndc", "description": "The National Drug Code (NDC) is a numerical code maintained by the FDA that includes the labeler code, product code, and package code. The NDC is an 11-digit code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc_description": {"name": "ndc_description", "description": "Identifies the drug name, strength, and dosage form of the drug product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nadac_per_unit": {"name": "nadac_per_unit", "description": "The National Average Drug Acquisition Cost per unit. Staging table converts this to a numeric type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pricing_unit": {"name": "pricing_unit", "description": "Indicates the pricing unit for the associated NDC ('ML', 'GM' or 'EA').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_start_date": {"name": "price_start_date", "description": "The effective date of the NADAC Per Unit cost. Staging table converts this to a date type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_price": {"name": "most_recent_price", "description": "True if the price is the most recent available price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_price": {"name": "first_price", "description": "True if the price is the first available price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dollar_change": {"name": "dollar_change", "description": "Change between this price and previous price in dollars.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "percent_change": {"name": "percent_change", "description": "Change between this price and previous price in percentage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "change_type": {"name": "change_type", "description": "1 if the price went up, 0 if the price went down.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/nadac/_nadac__models.yml", "build_path": "target/run/sagerx/models/staging/nadac/stg_nadac__enhanced_nadac.sql", "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3152318, "relation_name": "\"sagerx\".\"staging\".\"stg_nadac__enhanced_nadac\"", "raw_code": "-- stg_nadac__enhanced_nadac.sql\n\nwith\n\nall_nadac as (\n\n    select * from {{ ref('stg_nadac__all_nadac') }}\n\n),\n\nnadac as (\n\t\n\tselect ndc\n\t\t, ndc_description\n\t\t, row_number() over (partition by ndc order by effective_date desc) as price_line\n\t\t, effective_date as price_start_date\n\t\t, lag(effective_date, 1) over (partition by ndc order by effective_date desc) price_end_date\n\t\t, nadac_per_unit\n\t\t, pricing_unit\n\t\tfrom all_nadac\n\n)\n\nselect\n\tndc\n\t, ndc_description\n\t, price_line\n\t, nadac_per_unit\n\t, pricing_unit \n\t, price_start_date\n\t, case when price_line = 1 then true else false end as most_recent_price\n\t, case when price_line = first_value(price_line) over (partition by ndc order by price_line desc) then true else false end as first_price\n\t, (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) as dollar_change\n\t, (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) /\n\t\tlag(nadac_per_unit) over (partition by ndc order by price_line desc) as percent_change\n\t, case when (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) > 0 then 1\n\t\twhen (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) = 0 then 0\n\t\twhen (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) is null then null\n\t\telse -1 end as change_type\nfrom nadac", "language": "sql", "refs": [["stg_nadac__all_nadac"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.sagerx.stg_nadac__all_nadac"]}, "compiled_path": "target/compiled/sagerx/models/staging/nadac/stg_nadac__enhanced_nadac.sql", "compiled": true, "compiled_code": "-- stg_nadac__enhanced_nadac.sql\n\nwith\n\nall_nadac as (\n\n    select * from \"sagerx\".\"staging\".\"stg_nadac__all_nadac\"\n\n),\n\nnadac as (\n\t\n\tselect ndc\n\t\t, ndc_description\n\t\t, row_number() over (partition by ndc order by effective_date desc) as price_line\n\t\t, effective_date as price_start_date\n\t\t, lag(effective_date, 1) over (partition by ndc order by effective_date desc) price_end_date\n\t\t, nadac_per_unit\n\t\t, pricing_unit\n\t\tfrom all_nadac\n\n)\n\nselect\n\tndc\n\t, ndc_description\n\t, price_line\n\t, nadac_per_unit\n\t, pricing_unit \n\t, price_start_date\n\t, case when price_line = 1 then true else false end as most_recent_price\n\t, case when price_line = first_value(price_line) over (partition by ndc order by price_line desc) then true else false end as first_price\n\t, (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) as dollar_change\n\t, (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) /\n\t\tlag(nadac_per_unit) over (partition by ndc order by price_line desc) as percent_change\n\t, case when (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) > 0 then 1\n\t\twhen (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) = 0 then 0\n\t\twhen (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) is null then null\n\t\telse -1 end as change_type\nfrom nadac", "extra_ctes_injected": true, "extra_ctes": []}, "model.sagerx.stg_rxnorm__dose_form_group_links": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__dose_form_group_links", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__dose_form_group_links.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__dose_form_group_links.sql", "unique_id": "model.sagerx.stg_rxnorm__dose_form_group_links", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__dose_form_group_links"], "alias": "stg_rxnorm__dose_form_group_links", "checksum": {"name": "sha256", "checksum": "9901ab625637d9d001cbcc1ed4d2723b7e8ad71cd1dec82c5236084af88014d6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Links dose forms (DF) to dose form groups (DFG).", "columns": {"dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_group_rxcui": {"name": "dose_form_group_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3498163, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__dose_form_group_links\"", "raw_code": "-- stg_rxnorm__dose_form_group_links.sql\n\nselect distinct\n\tdose_form.rxcui dose_form_rxcui\n\t, rxnrel.rxcui1 dose_form_group_rxcui\nfrom sagerx_lake.rxnorm_rxnconso dose_form\ninner join sagerx_lake.rxnorm_rxnrel rxnrel\n\ton rxnrel.rxcui2 = dose_form.rxcui\n\tand rxnrel.rela = 'isa'\n\tand rxnrel.sab = 'RXNORM'\nwhere dose_form.tty = 'DF'\n\tand dose_form.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__ingredients": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__ingredients", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__ingredients.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__ingredients.sql", "unique_id": "model.sagerx.stg_rxnorm__ingredients", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__ingredients"], "alias": "stg_rxnorm__ingredients", "checksum": {"name": "sha256", "checksum": "ef923a7904b9ef8a91de4c48a1993c442e5d6eea3a6b5311ab33062331cb53cb"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm ingredients (IN/MIN).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3547983, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__ingredients\"", "raw_code": "-- stg_rxnorm__ingredients.sql\n\nselect\n\tingredient.rxcui rxcui\n\t, ingredient.str name\n\t, ingredient.tty tty\n\t, case when ingredient.suppress = 'N' then true else false end as active\n\t, case when ingredient.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nwhere ingredient.tty in('IN', 'MIN')\n\tand ingredient.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__clinical_products": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__clinical_products", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__clinical_products.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__clinical_products.sql", "unique_id": "model.sagerx.stg_rxnorm__clinical_products", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__clinical_products"], "alias": "stg_rxnorm__clinical_products", "checksum": {"name": "sha256", "checksum": "aae093ad2a19d21f1d4641209e5809f3fdc1ff266b0b7c61722515409d6f8c50"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical products (SCD, GPCK).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3409119, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__clinical_products\"", "raw_code": "-- stg_rxnorm__clinical_products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n\t, case when product.suppress = 'N' then true else false end as active\n\t, case when product.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nwhere product.tty in('SCD', 'GPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__ingredient_strengths": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__ingredient_strengths", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__ingredient_strengths.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__ingredient_strengths.sql", "unique_id": "model.sagerx.stg_rxnorm__ingredient_strengths", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__ingredient_strengths"], "alias": "stg_rxnorm__ingredient_strengths", "checksum": {"name": "sha256", "checksum": "16ad18d334eb43bd5dc8bd370c5641b1be4becb42234182c6af2781663924e61"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm ingredient strengths.", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numerator_value": {"name": "numerator_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numerator_unit": {"name": "numerator_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "denominator_value": {"name": "denominator_value", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "denominator_unit": {"name": "denominator_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3643527, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__ingredient_strengths\"", "raw_code": "-- stg_rxnorm__ingredient_strengths.sql\n\nselect\n\tingredient_strength.rxcui as rxcui\n\t, ingredient_strength.str as name\n\t, numerator_value.atv as numerator_value\n\t, numerator_unit.atv as numerator_unit\n\t, denominator_value.atv as denominator_value\n\t, denominator_unit.atv as denominator_unit\n\t, text.atv as text\n\t, case when ingredient_strength.suppress = 'N'\n        then true\n        else false\n        end as active\n\t, case when ingredient_strength.cvf = '4096'\n        then true\n        else false\n        end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient_strength\nleft join sagerx_lake.rxnorm_rxnsat numerator_value\n    on numerator_value.rxcui = ingredient_strength.rxcui\n    and numerator_value.atn = 'RXN_BOSS_STRENGTH_NUM_VALUE'\nleft join sagerx_lake.rxnorm_rxnsat numerator_unit\n    on numerator_unit.rxcui = ingredient_strength.rxcui\n    and numerator_unit.atn = 'RXN_BOSS_STRENGTH_NUM_UNIT'\nleft join sagerx_lake.rxnorm_rxnsat denominator_value\n    on denominator_value.rxcui = ingredient_strength.rxcui\n    and denominator_value.atn = 'RXN_BOSS_STRENGTH_DENOM_VALUE'\nleft join sagerx_lake.rxnorm_rxnsat denominator_unit\n    on denominator_unit.rxcui = ingredient_strength.rxcui\n    and denominator_unit.atn = 'RXN_BOSS_STRENGTH_DENOM_UNIT'\nleft join sagerx_lake.rxnorm_rxnsat text\n    on text.rxcui = ingredient_strength.rxcui\n    and text.atn = 'RXN_STRENGTH'\nwhere ingredient_strength.tty = 'SCDC'\n\tand ingredient_strength.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__brand_products": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__brand_products", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__brand_products.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__brand_products.sql", "unique_id": "model.sagerx.stg_rxnorm__brand_products", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__brand_products"], "alias": "stg_rxnorm__brand_products", "checksum": {"name": "sha256", "checksum": "38dd972e246e77a35f63c04977e6fe7c5bc756524292287aaf19dc142a04acb8"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm brand name products (SBD/BPCK).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3733263, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__brand_products\"", "raw_code": "-- stg_rxnorm__brand_products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n\t, clinical_product.rxcui as clinical_product_rxcui\n\t, case when product.suppress = 'N' then true else false end as active\n\t, case when product.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'tradename_of'\nleft join sagerx_lake.rxnorm_rxnconso clinical_product\n\ton rxnrel.rxcui1 = clinical_product.rxcui\n\tand clinical_product.tty in ('SCD', 'GPCK')\n\tand clinical_product.sab = 'RXNORM'\nwhere product.tty in('SBD', 'BPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__brands": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__brands", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__brands.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__brands.sql", "unique_id": "model.sagerx.stg_rxnorm__brands", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__brands"], "alias": "stg_rxnorm__brands", "checksum": {"name": "sha256", "checksum": "09b7920af626cfa4daf3ddcbc15411366bc68a29a19037c998cedabd4bc183bf"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm brand names (BN).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3806682, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__brands\"", "raw_code": "-- stg_rxnorm__brands.sql\n\nwith cte as (\n\tselect\n\t\tsq.*\n\t\t, row_number() over(partition by rxcui order by ingredient_tty desc) as rn\n\tfrom (\n\n\t\tselect\n\t\t\tbrand.rxcui as rxcui\n\t\t\t, brand.str as name\n\t\t\t, brand.tty as tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso brand\n\t\tinner join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = brand.rxcui and rxnrel.rela = 'tradename_of'\n\t\tinner join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'IN'\n\t\t\tand ingredient.sab = 'RXNORM'\n\t\twhere brand.tty = 'BN'\n\t\t\tand brand.sab = 'RXNORM'\n\n\t\tunion all\n\n\t\tselect\n\t\t\tbrand.rxcui as rxcui\n\t\t\t, brand.str as name\n\t\t\t, brand.tty as tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso brand\n\t\tinner join sagerx_lake.rxnorm_rxnrel sbd_rxnrel on sbd_rxnrel.rxcui2 = brand.rxcui and sbd_rxnrel.rela = 'ingredient_of'\n\t\tinner join sagerx_lake.rxnorm_rxnrel scd_rxnrel on scd_rxnrel.rxcui2 = sbd_rxnrel.rxcui1 and scd_rxnrel.rela = 'tradename_of'\n\t\tinner join sagerx_lake.rxnorm_rxnrel ingredient_rxnrel on ingredient_rxnrel.rxcui2 = scd_rxnrel.rxcui1 and ingredient_rxnrel.rela = 'has_ingredients'\n\t\tleft join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton ingredient_rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'MIN'\n\t\t\tand ingredient.sab = 'RXNORM'\t\t\n\t\twhere brand.tty = 'BN'\n\t\t\tand brand.sab = 'RXNORM'\n\t) sq\n)\n\nselect distinct\n\tbrand.rxcui as rxcui\n\t, brand.str as name\n\t, brand.tty as tty\n\t, case when brand.suppress = 'N' then true else false end as active\n\t, case when brand.cvf = '4096' then true else false end as prescribable\n\t, cte.ingredient_rxcui as ingredient_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\ninner join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'has_ingredient'\ninner join sagerx_lake.rxnorm_rxnconso brand\n\ton rxnrel.rxcui1 = brand.rxcui\n\tand brand.tty = 'BN'\n\tand brand.sab = 'RXNORM'\nLeft join cte on cte.rxcui = brand.rxcui and cte.rn < 2\nwhere product.tty = 'SBD'\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__mthspl_products": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__mthspl_products", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__mthspl_products.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__mthspl_products.sql", "unique_id": "model.sagerx.stg_rxnorm__mthspl_products", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__mthspl_products"], "alias": "stg_rxnorm__mthspl_products", "checksum": {"name": "sha256", "checksum": "3aa84d43dbf8713cf1453f56f6635e4fe8e17e1baf4d13873094ea4c20732245"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "DailyMed SPL products (DP) at NDC9 level.", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rxaui": {"name": "rxaui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc": {"name": "ndc", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.367409, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__mthspl_products\"", "raw_code": "-- stg_rxnorm__mthspl_products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n\t, product.rxaui as rxaui\n\t, product.code as ndc\n\t, case when product.suppress = 'N' then true else false end as active\n\t, case when product.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nwhere product.tty = 'DP'\n\tand product.sab = 'MTHSPL'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__mthspl_substances": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__mthspl_substances", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__mthspl_substances.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__mthspl_substances.sql", "unique_id": "model.sagerx.stg_rxnorm__mthspl_substances", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__mthspl_substances"], "alias": "stg_rxnorm__mthspl_substances", "checksum": {"name": "sha256", "checksum": "143cca947b1a698667997033111b39b501ef7b96d8e51c395b670631dc408006"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "DailyMed SPL substances (SU).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rxaui": {"name": "rxaui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unii": {"name": "unii", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3705935, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__mthspl_substances\"", "raw_code": "-- stg_rxnorm__mthspl_substances.sql\n\nselect\n\tsubstance.rxcui rxcui\n\t, substance.str name\n\t, substance.tty tty\n\t, substance.rxaui rxaui\n\t, substance.code unii\n\t, case when substance.suppress = 'N' then true else false end as active\n\t, case when substance.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso substance\nwhere substance.tty = 'SU'\n\tand substance.sab = 'MTHSPL'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__ingredient_strength_links": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__ingredient_strength_links", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__ingredient_strength_links.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__ingredient_strength_links.sql", "unique_id": "model.sagerx.stg_rxnorm__ingredient_strength_links", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__ingredient_strength_links"], "alias": "stg_rxnorm__ingredient_strength_links", "checksum": {"name": "sha256", "checksum": "bde6369581edc5a21448e3473c54892c96a3ceea0ab88065b3d1b9256c7b60bc"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Links combination of clinical product components (SCD) + ingredient components (IN) to ingredient strengths.", "columns": {"clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_rxcui": {"name": "ingredient_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_strength_rxcui": {"name": "ingredient_strength_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3603833, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__ingredient_strength_links\"", "raw_code": "-- stg_rxnorm__ingredient_strength_links.sql\n\nselect distinct\n\tproduct_component.rxcui as clinical_product_component_rxcui\n\t, ingredient.rxcui as ingredient_component_rxcui\n\t, ingredient_strength.rxcui as ingredient_strength_rxcui\nfrom sagerx_lake.rxnorm_rxnconso ingredient_strength\ninner join sagerx_lake.rxnorm_rxnrel has_ingredient\n    on has_ingredient.rxcui2 = ingredient_strength.rxcui\n    and has_ingredient.rela = 'has_ingredient'\ninner join sagerx_lake.rxnorm_rxnconso ingredient\n\ton ingredient.rxcui = has_ingredient.rxcui1\n\tand ingredient.tty = 'IN'\n\tand ingredient.sab = 'RXNORM'\ninner join sagerx_lake.rxnorm_rxnrel constitutes\n    on constitutes.rxcui2 = ingredient_strength.rxcui\n    and constitutes.rela = 'constitutes'\ninner join sagerx_lake.rxnorm_rxnconso product_component\n\ton product_component.rxcui = constitutes.rxcui1\n\tand product_component.tty = 'SCD'\n\tand product_component.sab = 'RXNORM'\nwhere ingredient_strength.tty = 'SCDC'\n\tand ingredient_strength.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__clinical_product_components": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__clinical_product_components", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__clinical_product_components.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__clinical_product_components.sql", "unique_id": "model.sagerx.stg_rxnorm__clinical_product_components", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__clinical_product_components"], "alias": "stg_rxnorm__clinical_product_components", "checksum": {"name": "sha256", "checksum": "4f7478ae04e0d01aba9f670a65a421e504c26233a3a33db9d4ceb31b7e48791f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm clinical product components (SCD).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_form_rxcui": {"name": "dose_form_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3457887, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__clinical_product_components\"", "raw_code": "-- stg_rxnorm__clinical_product_components.sql\n\nwith cte as (\n\tselect\n\tsq.*,\n\trow_number() over(partition by product_component_rxcui order by ingredient_tty desc) as rn\n\tfrom (\n\t\tselect\n\t\t\tproduct_component.rxcui as product_component_rxcui\n\t\t\t, product_component.str as product_component_name\n\t\t\t, product_component.tty as product_component_tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso product_component\n\t\tinner join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product_component.rxcui and rxnrel.rela = 'has_ingredients'\n\t\tinner join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'MIN'\n\t\t\tand ingredient.sab = 'RXNORM'\n\t\twhere product_component.tty = 'SCD'\n\t\t\tand product_component.sab = 'RXNORM'\n\n\t\tunion all\n\n\t\tselect\n\t\t\tproduct_component.rxcui as product_component_rxcui\n\t\t\t, product_component.str as product_component_name\n\t\t\t, product_component.tty as product_component_tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso product_component\n\t\tinner join sagerx_lake.rxnorm_rxnrel scdc_rxnrel on scdc_rxnrel.rxcui2 = product_component.rxcui and scdc_rxnrel.rela = 'consists_of'\n\t\tinner join sagerx_lake.rxnorm_rxnconso scdc on scdc_rxnrel.rxcui1 = scdc.rxcui\n\t\tinner join sagerx_lake.rxnorm_rxnrel ingredient_rxnrel on ingredient_rxnrel.rxcui2 = scdc.rxcui and ingredient_rxnrel.rela = 'has_ingredient'\n\t\tinner join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton ingredient_rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'IN'\n\t\t\tand ingredient.sab = 'RXNORM'\n\t\twhere product_component.tty = 'SCD'\n\t\t\tand product_component.sab = 'RXNORM'\n\t) sq\n)\n\nselect distinct\n\tcase when product_component.rxcui is null then product.rxcui else product_component.rxcui end rxcui\n\t, case when product_component.str is null then product.str else product_component.str end name \n\t, case when product_component.tty is null then product.tty else product_component.tty end tty\n\t, case when \n\t\tcase when product_component.rxcui is null then product.suppress else product_component.suppress end = 'N' then true else false end as active\n\t, case when \n\t\tcase when product_component.rxcui is null then product.cvf else product_component.cvf end = '4096' then true else false end as prescribable\n\t, cte.ingredient_rxcui as ingredient_rxcui\n\t, dose_form_rxnrel.rxcui1 as dose_form_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n\ton rxnrel.rxcui1 = product_component.rxcui\n    and product_component.tty = 'SCD'\n    and product_component.sab = 'RXNORM'\nleft join cte \n\ton cte.product_component_rxcui = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end\n\tand cte.rn < 2\nleft join sagerx_lake.rxnorm_rxnrel dose_form_rxnrel\n\ton dose_form_rxnrel.rxcui2 = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end\n\tand dose_form_rxnrel.rela = 'has_dose_form'\n\tand dose_form_rxnrel.sab = 'RXNORM'\nwhere product.tty in('SCD', 'GPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__clinical_product_component_links": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__clinical_product_component_links", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__clinical_product_component_links.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__clinical_product_component_links.sql", "unique_id": "model.sagerx.stg_rxnorm__clinical_product_component_links", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__clinical_product_component_links"], "alias": "stg_rxnorm__clinical_product_component_links", "checksum": {"name": "sha256", "checksum": "4d9e9ac14ec7b382a6947938364bd8f47cc6d7293b6956a1ed3a4fc40d29e99e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Links clinical products (SCD/GPCK) with clinical product components (SCD only).", "columns": {"clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3424208, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__clinical_product_component_links\"", "raw_code": "-- stg_rxnorm__clinical_product_component_links.sql\n\nselect distinct\n\tproduct.rxcui as clinical_product_rxcui\n\t, case when product_component.rxcui is null\n        then product.rxcui \n        else product_component.rxcui \n        end as clinical_product_component_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n    on rxnrel.rxcui1 = product_component.rxcui\n    and product_component.tty = 'SCD'\n    and product_component.sab = 'RXNORM'\nwhere product.tty in('SCD', 'GPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__brand_product_component_links": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__brand_product_component_links", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__brand_product_component_links.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__brand_product_component_links.sql", "unique_id": "model.sagerx.stg_rxnorm__brand_product_component_links", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__brand_product_component_links"], "alias": "stg_rxnorm__brand_product_component_links", "checksum": {"name": "sha256", "checksum": "50a530b6ab4743e247dced3ccbd3bd6dbe7f9eccc1d2766bc94c4c84ccedbc0e"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Links brand products (SBD/BPCK) with brand product components (mostly SBD, but BPCKs can also contain SCD).", "columns": {"brand_product_rxcui": {"name": "brand_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand_product_component_rxcui": {"name": "brand_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3746738, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__brand_product_component_links\"", "raw_code": "-- stg_rxnorm__brand_product_component_links.sql\n\nselect distinct\n\tproduct.rxcui as brand_product_rxcui\n\t, case when product_component.rxcui is null\n        then product.rxcui\n        else product_component.rxcui\n        end as brand_product_component_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n\ton rxnrel.rxcui1 = product_component.rxcui\n\tand product_component.tty in ('SBD', 'SCD') -- NOTE: BPCKs can contain SBDs AND SCDs\n\tand product_component.sab = 'RXNORM'\nwhere product.tty in ('SBD', 'BPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__ingredient_component_links": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__ingredient_component_links", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__ingredient_component_links.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__ingredient_component_links.sql", "unique_id": "model.sagerx.stg_rxnorm__ingredient_component_links", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__ingredient_component_links"], "alias": "stg_rxnorm__ingredient_component_links", "checksum": {"name": "sha256", "checksum": "13ac324aa8add81a1825b67dfed68d5f5653bc307f7dab2331659aae72ec26c6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Links ingredients (IN/MIN) to ingredient components (IN).", "columns": {"ingredient_rxcui": {"name": "ingredient_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingredient_component_rxcui": {"name": "ingredient_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.356171, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__ingredient_component_links\"", "raw_code": "-- stg_rxnorm__ingredient_component_links.sql\n\nwith cte as (\n\tselect\n\t\trxnrel.rxcui2 as ingredient_rxcui\n\t\t, ingredient_component.rxcui as ingredient_component_rxcui\n\t\t, ingredient_component.str as ingredient_component_name\n\t\t, ingredient_component.tty as ingredient_component_tty\n\tfrom\n\t\tsagerx_lake.rxnorm_rxnrel rxnrel\n\tinner join sagerx_lake.rxnorm_rxnconso ingredient_component\n\t\ton rxnrel.rxcui1 = ingredient_component.rxcui\n\twhere rxnrel.rela = 'has_part'\n\t\tand ingredient_component.tty = 'IN'\n\t\tand ingredient_component.sab = 'RXNORM'\n)\n\nselect distinct\n\tingredient.rxcui as ingredient_rxcui\n\t, case when cte.ingredient_component_rxcui is null\n        then ingredient.rxcui\n        else cte.ingredient_component_rxcui\n        end as ingredient_component_rxcui\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nleft join cte on ingredient.rxcui = cte.ingredient_rxcui\nwhere ingredient.tty in('IN', 'MIN')\n\tand ingredient.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__brand_product_components": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__brand_product_components", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__brand_product_components.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__brand_product_components.sql", "unique_id": "model.sagerx.stg_rxnorm__brand_product_components", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__brand_product_components"], "alias": "stg_rxnorm__brand_product_components", "checksum": {"name": "sha256", "checksum": "45f3054fc9d4d207d7444bda286c2737c32de5ffb5cbd304a8131ad9a709299d"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm brand product components (mostly SBD, but BPCKs can also contain SCD).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_component_rxcui": {"name": "clinical_product_component_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand_rxcui": {"name": "brand_rxcui", "description": "NOTE: brand_product_component SCDs will have NULL for brand_rxcui.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3779435, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__brand_product_components\"", "raw_code": "-- stg_rxnorm__brand_product_components.sql\n\nselect distinct\n\tcase when product.tty = 'SBD' then product.rxcui else product_component.rxcui end rxcui\n\t, case when product.tty = 'SBD' then product.str else product_component.str end name\n\t, case when product.tty = 'SBD' then product.tty else product_component.tty end tty\n\t, case when product_component.tty = 'SCD' then product_component.rxcui else rxnrel_scd.rxcui1 end clinical_product_component_rxcui\n\t, rxnrel_bn.rxcui1 as brand_rxcui\n\t, case when \n            case when product.tty = 'SBD'\n            then product.suppress\n            else product_component.suppress\n            end = 'N' \n        then true \n        else false\n        end as active\n\t, case when \n            case when product.tty = 'SBD'\n            then product.cvf\n            else product_component.cvf \n            end = '4096' \n        then true\n        else false\n        end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n\ton rxnrel.rxcui1 = product_component.rxcui\n\tand product_component.tty in ('SBD', 'SCD') -- NOTE: BPCKs can contain SBDs AND SCDs\n\tand product_component.sab = 'RXNORM'\nleft join sagerx_lake.rxnorm_rxnrel rxnrel_scd \n\ton rxnrel_scd.rxcui2 = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end \n\tand rxnrel_scd.rela = 'tradename_of' -- rxnrel_scd.rxcui1 = clinical_product_component_rxcui\nleft join sagerx_lake.rxnorm_rxnrel rxnrel_bn \n\ton rxnrel_bn.rxcui2 = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end \n\tand rxnrel_bn.rela = 'has_ingredient' -- rxnrel_bn.rxcui1 = brand_rxcui\nwhere product.tty in ('SBD', 'BPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__ndcs": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__ndcs", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__ndcs.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__ndcs.sql", "unique_id": "model.sagerx.stg_rxnorm__ndcs", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__ndcs"], "alias": "stg_rxnorm__ndcs", "checksum": {"name": "sha256", "checksum": "eb950092bc9b29c5aa3624310f7965c5af91f1b2732e42f7c3cece0551fbf05a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm NDCs", "columns": {"ndc": {"name": "ndc", "description": "The NDC in NDC11 format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clinical_product_rxcui": {"name": "clinical_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand_product_rxcui": {"name": "brand_product_rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3379762, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__ndcs\"", "raw_code": "-- stg_rxnorm__ndcs.sql\n\nselect rxnsat.atv as ndc\n\t,case when product.tty in ('BPCK','SBD') then clinical_product.rxcui\n\t\telse rxnsat.rxcui end as clinical_product_rxcui\t\t\n\t,case when product.tty in ('BPCK','SBD') then rxnsat.rxcui\n\t\telse null end as brand_product_rxcui\n\t, case when rxnsat.suppress = 'N' then true else false end as active\n\t, case when rxnsat.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnsat rxnsat\n\tinner join sagerx_lake.rxnorm_rxnconso product on rxnsat.rxaui = product.rxaui\n\tleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnsat.rxcui = rxnrel.rxcui2 and rela = 'tradename_of' and product.tty in ('BPCK','SBD')\n\tleft join sagerx_lake.rxnorm_rxnconso clinical_product\n\t\ton rxnrel.rxcui1 = clinical_product.rxcui\n\t\tand clinical_product.tty in ('SCD','GPCK')\n\t\tand clinical_product.sab = 'RXNORM'\nwhere rxnsat.atn = 'NDC'\n\tand product.tty in ('SCD','SBD','GPCK','BPCK')\n\tand product.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__ingredient_components": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__ingredient_components", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__ingredient_components.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__ingredient_components.sql", "unique_id": "model.sagerx.stg_rxnorm__ingredient_components", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__ingredient_components"], "alias": "stg_rxnorm__ingredient_components", "checksum": {"name": "sha256", "checksum": "f07df298aee89a4fa191e2829c60ce44555d88dc45a8be9eaa57adadf0b19065"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm ingredient components (IN).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.3586197, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__ingredient_components\"", "raw_code": "-- stg_rxnorm__ingredient_components.sql\n\nwith cte as (\n\tselect\n\t\trxnrel.rxcui2 as ingredient_rxcui\n\t\t, ingredient_component.rxcui as rxcui\n\t\t, ingredient_component.str as name\n\t\t, ingredient_component.tty as tty\n\t\t, ingredient_component.suppress\n\t\t, ingredient_component.cvf\n\tfrom\n\t\tsagerx_lake.rxnorm_rxnrel rxnrel\n\tinner join sagerx_lake.rxnorm_rxnconso ingredient_component\n\t\ton rxnrel.rxcui1 = ingredient_component.rxcui\n\twhere rxnrel.rela = 'has_part'\n\t\tand ingredient_component.tty = 'IN'\n\t\tand ingredient_component.sab = 'RXNORM'\n)\n\nselect distinct\n\tcase when cte.rxcui is null then ingredient.rxcui else cte.rxcui end rxcui\n\t, case when cte.name is null then ingredient.str else cte.name end name\n\t, case when cte.tty is null then ingredient.tty else cte.tty end tty\n\t, case when \n\t\tcase when cte.rxcui is null then ingredient.suppress else cte.suppress end = 'N' then true else false end as active\n\t, case when \n\t\tcase when cte.rxcui is null then ingredient.cvf else cte.cvf end = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nleft join cte on ingredient.rxcui = cte.ingredient_rxcui\nwhere ingredient.tty in('IN', 'MIN')\n\tand ingredient.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__dose_form_groups": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__dose_form_groups", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__dose_form_groups.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__dose_form_groups.sql", "unique_id": "model.sagerx.stg_rxnorm__dose_form_groups", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__dose_form_groups"], "alias": "stg_rxnorm__dose_form_groups", "checksum": {"name": "sha256", "checksum": "ed09633fddaa1c917a7e5e0a9e6cff543fc8b89f60ca9676de3e1b8a3d739d80"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm dose form groups (DFG).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.35228, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__dose_form_groups\"", "raw_code": "-- stg_rxnorm__dose_form_groups.sql\n\nselect\n\tdose_form_group.rxcui rxcui\n\t, dose_form_group.str name\n\t, dose_form_group.tty tty\n\t, case when dose_form_group.suppress = 'N' then true else false end as active\n\t, case when dose_form_group.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso dose_form_group\nwhere dose_form_group.tty = 'DFG'\n\tand dose_form_group.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_rxnorm__dose_forms": {"database": "sagerx", "schema": "staging", "name": "stg_rxnorm__dose_forms", "resource_type": "model", "package_name": "sagerx", "path": "staging/rxnorm/stg_rxnorm__dose_forms.sql", "original_file_path": "models/staging/rxnorm/stg_rxnorm__dose_forms.sql", "unique_id": "model.sagerx.stg_rxnorm__dose_forms", "fqn": ["sagerx", "staging", "rxnorm", "stg_rxnorm__dose_forms"], "alias": "stg_rxnorm__dose_forms", "checksum": {"name": "sha256", "checksum": "313d6bc5abdc87d0ab2a9511bd4b8ab3665297d4b04f76c274beeb3620d882d2"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "RxNorm dose forms (DF).", "columns": {"rxcui": {"name": "rxcui", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tty": {"name": "tty", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribable": {"name": "prescribable", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/rxnorm/_rxnorm__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.348434, "relation_name": "\"sagerx\".\"staging\".\"stg_rxnorm__dose_forms\"", "raw_code": "-- stg_rxnorm__dose_forms.sql\n\nselect\n\tdose_form.rxcui rxcui\n\t, dose_form.str name\n\t, dose_form.tty tty\n\t, case when dose_form.suppress = 'N' then true else false end as active\n\t, case when dose_form.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso dose_form\nwhere dose_form.tty = 'DF'\n\tand dose_form.sab = 'RXNORM'", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_fda_ndc__class": {"database": "sagerx", "schema": "staging", "name": "stg_fda_ndc__class", "resource_type": "model", "package_name": "sagerx", "path": "staging/fda_ndc/stg_fda_ndc__class.sql", "original_file_path": "models/staging/fda_ndc/stg_fda_ndc__class.sql", "unique_id": "model.sagerx.stg_fda_ndc__class", "fqn": ["sagerx", "staging", "fda_ndc", "stg_fda_ndc__class"], "alias": "stg_fda_ndc__class", "checksum": {"name": "sha256", "checksum": "3eb8364fe1c257a005ef11873d0ca7ac441abd6551191dca94835af6d031a608"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Product-level class information", "columns": {"productid": {"name": "productid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_line": {"name": "class_line", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_name": {"name": "class_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "class_type": {"name": "class_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/fda_ndc/_fda_ndc__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.4808805, "relation_name": "\"sagerx\".\"staging\".\"stg_fda_ndc__class\"", "raw_code": "-- stg_fda_ndc__class.sql\n\nselect\n\tz.productid\n\t,row_number() over (partition by z.productid order by z.token desc) as class_line\n\t,left(z.token, position('[' in z.token) -1 ) as class_name\n    ,substring(z.token, '\\[(.+)\\]') as class_type\nfrom (select distinct t.productid\n\t,t.pharm_classes\n\t, s.token\n\tfrom   sagerx_lake.fda_ndc_product t, unnest(string_to_array(t.pharm_classes, ',')) s(token)) z", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_fda_ndc__substance": {"database": "sagerx", "schema": "staging", "name": "stg_fda_ndc__substance", "resource_type": "model", "package_name": "sagerx", "path": "staging/fda_ndc/stg_fda_ndc__substance.sql", "original_file_path": "models/staging/fda_ndc/stg_fda_ndc__substance.sql", "unique_id": "model.sagerx.stg_fda_ndc__substance", "fqn": ["sagerx", "staging", "fda_ndc", "stg_fda_ndc__substance"], "alias": "stg_fda_ndc__substance", "checksum": {"name": "sha256", "checksum": "14b7eb2396b34320f04f038425466dd19de83f4fba595883e04cce011fbb92ca"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Product-level substance information", "columns": {"productid": {"name": "productid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substance_line": {"name": "substance_line", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substancename": {"name": "substancename", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_numerator_strength": {"name": "active_numerator_strength", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_ingred_unit": {"name": "active_ingred_unit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/fda_ndc/_fda_ndc__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.4833472, "relation_name": "\"sagerx\".\"staging\".\"stg_fda_ndc__substance\"", "raw_code": "-- stg_fda_ndc__substance.sql\n\nselect distinct\n\tprod.productid\n\t, row_number() over (partition by prod.productid) as substance_line\n\t, arr.*\nfrom sagerx_lake.fda_ndc_product prod\n\t, unnest(string_to_array(prod.substancename, '; ')\n\t\t,string_to_array(prod.active_numerator_strength, '; ')\n\t\t,string_to_array(prod.active_ingred_unit, '; ')\n\t) arr(substancename,active_numerator_strength,active_ingred_unit)", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}, "model.sagerx.stg_fda_ndc__ndc": {"database": "sagerx", "schema": "staging", "name": "stg_fda_ndc__ndc", "resource_type": "model", "package_name": "sagerx", "path": "staging/fda_ndc/stg_fda_ndc__ndc.sql", "original_file_path": "models/staging/fda_ndc/stg_fda_ndc__ndc.sql", "unique_id": "model.sagerx.stg_fda_ndc__ndc", "fqn": ["sagerx", "staging", "fda_ndc", "stg_fda_ndc__ndc"], "alias": "stg_fda_ndc__ndc", "checksum": {"name": "sha256", "checksum": "fe1e86c26ce5f14d948eb50ad193cf62da2efc1c855044aa76ac519747e525fc"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "FDA NDC Directory", "columns": {"ndc11": {"name": "ndc11", "description": "The ndcpackagecode field, normalized to a NDC11 format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productid": {"name": "productid", "description": "ProductID is a concatenation of the NDCproduct code and SPL documentID. It is included to help prevent duplicate rows from appearing when joining the product and package files together. It has no regulatory value or significance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "productndc": {"name": "productndc", "description": "The labeler code and product code segments of the National Drug Code number, separated by a hyphen. Asterisks are no longer used or included within the product code segment to indicate certain configurations of the NDC.  www.fda.gov/edrls under Structured Product Labeling Resources.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "producttypename": {"name": "producttypename", "description": "Indicates the type of product, such as Human Prescription Drug or Human OTC Drug. This data element corresponds to the Document Type of the SPL submission for the listing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proprietaryname": {"name": "proprietaryname", "description": "Also known as the trade name. It is the name of the product chosen by the labeler.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proprietarynamesuffix": {"name": "proprietarynamesuffix", "description": "A suffix to the proprietary name, a value here should be appended to the ProprietaryName field to obtain the complete name of the product. This suffix is often used to distinguish characteristics of a product such as extended release (XR) or sleep aid (PM). Although many companies follow certain naming conventions for suffices, there is no recognized standard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nonproprietaryname": {"name": "nonproprietaryname", "description": "Sometimes called the generic name, this is usually the active ingredient(s) of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dosageformname": {"name": "dosageformname", "description": "The translation of the DosageForm Code submitted by the firm. The complete list of codes and translations can be found www.fda.gov/edrls under Structured Product Labeling Resources.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "routename": {"name": "routename", "description": "The translation of the Route Code submitted by the firm, indicating route of administration. The complete list of codes and translations can be found at www.fda.gov/edrls under Structured Product Labeling Resources.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_startmarketingdate": {"name": "product_startmarketingdate", "description": "This is the date that the labeler indicates was the start of its marketing of the drug product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_endmarketingdate": {"name": "product_endmarketingdate", "description": "This is the date the product will no longer be available on the market. If a product is no longer being manufactured, in most cases, the FDA recommends firms use the expiration date of the last lot produced as the EndMarketingDate, to reflect the potential for drug product to remain available after manufacturing has ceased. Products that are the subject of ongoing manufacturing will not ordinarily have any EndMarketingDate. Products with a value in the EndMarketingDate will be removed from the NDC Directory when the EndMarketingDate is reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "marketingcategoryname": {"name": "marketingcategoryname", "description": "Product types are broken down into several potential Marketing Categories, such as NDA/ANDA/BLA, OTC Monograph, or Unapproved Drug. One and only one Marketing Category may be chosen for a product, not all marketing categories are available to all product types. Currently, only final marketed product categories are included. The complete list of codes and translations can be found at www.fda.gov/edrls under Structured Product Labeling Resources.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applicationnumber": {"name": "applicationnumber", "description": "This corresponds to the NDA, ANDA, or BLA number reported by the labeler for products which have the corresponding Marketing Category designated. If the designated Marketing Category is OTC Monograph Final or OTC Monograph Not Final, then the Application number will be the CFR citation corresponding to the appropriate Monograph (e.g. \u201cpart 341\u201d). For unapproved drugs, this field will be null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "labelername": {"name": "labelername", "description": "Name of Company corresponding to the labeler code segment of the ProductNDC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "substancename": {"name": "substancename", "description": "This is the active ingredient list. Each ingredient name is the preferred term of the UNII code submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_numerator_strength": {"name": "active_numerator_strength", "description": "These are the strength values (to be used with units below) of each active ingredient, listed in the same order as the SubstanceName field above.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active_ingred_unit": {"name": "active_ingred_unit", "description": "These are the units to be used with the strength values above, listed in the same order as the SubstanceName and SubstanceNumber (ActiveNumeratorStrength).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pharm_classes": {"name": "pharm_classes", "description": "These are the reported pharmacological class categories corresponding to the SubstanceNames listed above.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deaschedule": {"name": "deaschedule", "description": "This is the assigned DEA Schedule number as reported by the labeler. Values are CI, CII, CIII, CIV, and CV.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_ndc_exclude_flag": {"name": "product_ndc_exclude_flag", "description": "Values = Y, N, E, or I. This indicates whether the product has been removed/excluded from the NDC Directory for failure to respond to FDA's requests for correction to deficient or non-compliant submissions (Y), or because the listing certification is expired (E), or because the listing data was inactivated by FDA (I). The PRODUCT.XLS and PRODUCT.TXT files only contain listing records where NDC_EXCLUDE_FLAG=N. The PRODUCTS_EXCLUDED.XLS and PRODUCTS_EXCLUDED.TXT file contains all listing records with an NDC_EXCLUDE_FLAG of Y, E, and I.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "listing_record_certified_through": {"name": "listing_record_certified_through", "description": "This is the date when the listing record will expire if not updated or certified by the firm.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndcpackagecode": {"name": "ndcpackagecode", "description": "The labeler code, product code, and package code segments of the National Drug Code number, separated by hyphens. Asterisks are no longer used or included within the product and package code segments to indicate certain configurations of the NDC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "packagedescription": {"name": "packagedescription", "description": "A description of the size and type of packaging in sentence form. Multilevel packages will have the descriptions concatenated together. For example: 4 BOTTLES in 1 CARTON/100 TABLETS in 1 BOTTLE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_startmarketingdate": {"name": "package_startmarketingdate", "description": "This is the date that the labeler indicates was the start of its marketing of the drug product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_endmarketingdate": {"name": "package_endmarketingdate", "description": "This is the date the product will no longer be available on the market. If a product is no longer being manufactured, in most cases, the FDA recommends firms use the expiration date of the last lot produced as the EndMarketingDate, to reflect the potential for drug product to remain available after manufacturing has ceased. Products that are the subject of ongoing manufacturing will not ordinarily have any EndMarketingDate. Products with a value in the EndMarketingDate will be removed from the NDC Directory when the EndMarketingDate is reached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_ndc_exclude_flag": {"name": "package_ndc_exclude_flag", "description": "Values = Y, N, E, or I. This indicates whether the PACKAGE has been removed/excluded from the NDC Directory for failure to respond to FDAs requests for correction to deficient or non-compliant submissions (Y), or because the listing certification is expired (E), or because the listing data was inactivated by FDA (I). The PACKAGE.XLS and PACKAGE.TXT files only contain listing records where NDC_EXCLUDE_FLAG=N. The PACKAGES_EXCLUDED.XLS and PACKAGES_EXCLUDED.TXT file contains all listing records with an NDC_EXCLUDE_FLAG of Y, E, and I.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sample_package": {"name": "sample_package", "description": "This indicates if the package is to be distributed as a sample package. Values = Y or N.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "sagerx://models/staging/fda_ndc/_fda_ndc__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "staging", "materialized": "view"}, "created_at": 1704169463.478916, "relation_name": "\"sagerx\".\"staging\".\"stg_fda_ndc__ndc\"", "raw_code": "-- stg_fda_ndc__ndc.sql\n\nwith\n\nproduct as (\n    \n    select * from {{ source('fda_ndc', 'fda_ndc_product') }}\n\n),\n\npackage as (\n\n    select * from {{ source('fda_ndc', 'fda_ndc_package') }}\n\n)\n\nselect\n\tndc_to_11(ndcpackagecode) as ndc11\n\t, package.productid\n\t, package.productndc\n\t, producttypename\n\t, proprietaryname\n\t, proprietarynamesuffix\n\t, nonproprietaryname\n\t, dosageformname\n\t, routename\n\t, product.startmarketingdate as product_startmarketingdate\n\t, product.endmarketingdate as product_endmarketingdate\n\t, marketingcategoryname\n\t, applicationnumber\n\t, labelername\n\t, substancename\n\t, active_numerator_strength\n\t, active_ingred_unit\n\t, pharm_classes\n\t, deaschedule\n\t, product.ndc_exclude_flag as product_ndc_exclude_flag\n\t, listing_record_certified_through\n\t, ndcpackagecode\n\t, packagedescription\n\t, package.startmarketingdate as package_startmarketingdate\n\t, package.endmarketingdate as package_endmarketingdate\n\t, package.ndc_exclude_flag as package_ndc_exclude_flag\n\t, sample_package\nfrom package\nleft join product\n\ton package.productid = product.productid", "language": "sql", "refs": [], "sources": [["fda_ndc", "fda_ndc_product"], ["fda_ndc", "fda_ndc_package"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sagerx.fda_ndc.fda_ndc_product", "source.sagerx.fda_ndc.fda_ndc_package"]}, "compiled_path": null}, "test.sagerx.not_null_stg_nadac__all_nadac_ndc.13fad59845": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ndc", "model": "{{ get_where_subquery(ref('stg_nadac__all_nadac')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_nadac__all_nadac_ndc", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_nadac__all_nadac_ndc.sql", "original_file_path": "models/staging/nadac/_nadac__models.yml", "unique_id": "test.sagerx.not_null_stg_nadac__all_nadac_ndc.13fad59845", "fqn": ["sagerx", "staging", "nadac", "not_null_stg_nadac__all_nadac_ndc"], "alias": "not_null_stg_nadac__all_nadac_ndc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3276608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_nadac__all_nadac"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_nadac__all_nadac"]}, "compiled_path": null, "column_name": "ndc", "file_key_name": "models.stg_nadac__all_nadac"}, "test.sagerx.not_null_stg_nadac__all_nadac_ndc_description.d0df11974f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ndc_description", "model": "{{ get_where_subquery(ref('stg_nadac__all_nadac')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_nadac__all_nadac_ndc_description", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_nadac__all_nadac_ndc_description.sql", "original_file_path": "models/staging/nadac/_nadac__models.yml", "unique_id": "test.sagerx.not_null_stg_nadac__all_nadac_ndc_description.d0df11974f", "fqn": ["sagerx", "staging", "nadac", "not_null_stg_nadac__all_nadac_ndc_description"], "alias": "not_null_stg_nadac__all_nadac_ndc_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3299341, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_nadac__all_nadac"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_nadac__all_nadac"]}, "compiled_path": null, "column_name": "ndc_description", "file_key_name": "models.stg_nadac__all_nadac"}, "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc.4d4e5ab99c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ndc", "model": "{{ get_where_subquery(ref('stg_nadac__enhanced_nadac')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_nadac__enhanced_nadac_ndc", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_nadac__enhanced_nadac_ndc.sql", "original_file_path": "models/staging/nadac/_nadac__models.yml", "unique_id": "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc.4d4e5ab99c", "fqn": ["sagerx", "staging", "nadac", "not_null_stg_nadac__enhanced_nadac_ndc"], "alias": "not_null_stg_nadac__enhanced_nadac_ndc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3320131, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_nadac__enhanced_nadac"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_nadac__enhanced_nadac"]}, "compiled_path": null, "column_name": "ndc", "file_key_name": "models.stg_nadac__enhanced_nadac"}, "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc_description.16fde5c578": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ndc_description", "model": "{{ get_where_subquery(ref('stg_nadac__enhanced_nadac')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_nadac__enhanced_nadac_ndc_description", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_nadac__enhanced_nadac_ndc_description.sql", "original_file_path": "models/staging/nadac/_nadac__models.yml", "unique_id": "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc_description.16fde5c578", "fqn": ["sagerx", "staging", "nadac", "not_null_stg_nadac__enhanced_nadac_ndc_description"], "alias": "not_null_stg_nadac__enhanced_nadac_ndc_description", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3340166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_nadac__enhanced_nadac"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_nadac__enhanced_nadac"]}, "compiled_path": null, "column_name": "ndc_description", "file_key_name": "models.stg_nadac__enhanced_nadac"}, "test.sagerx.unique_stg_rxnorm__ndcs_ndc.9929df0b31": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ndc", "model": "{{ get_where_subquery(ref('stg_rxnorm__ndcs')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__ndcs_ndc", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__ndcs_ndc.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__ndcs_ndc.9929df0b31", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__ndcs_ndc"], "alias": "unique_stg_rxnorm__ndcs_ndc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3816738, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ndcs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__ndcs"]}, "compiled_path": null, "column_name": "ndc", "file_key_name": "models.stg_rxnorm__ndcs"}, "test.sagerx.not_null_stg_rxnorm__ndcs_ndc.4db0f5b5df": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ndc", "model": "{{ get_where_subquery(ref('stg_rxnorm__ndcs')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ndcs_ndc", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ndcs_ndc.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ndcs_ndc.4db0f5b5df", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ndcs_ndc"], "alias": "not_null_stg_rxnorm__ndcs_ndc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3835814, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ndcs"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ndcs"]}, "compiled_path": null, "column_name": "ndc", "file_key_name": "models.stg_rxnorm__ndcs"}, "test.sagerx.unique_stg_rxnorm__clinical_products_rxcui.0bac3cbe9c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__clinical_products')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__clinical_products_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__clinical_products_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__clinical_products_rxcui.0bac3cbe9c", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__clinical_products_rxcui"], "alias": "unique_stg_rxnorm__clinical_products_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3852634, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__clinical_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__clinical_products"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__clinical_products"}, "test.sagerx.not_null_stg_rxnorm__clinical_products_rxcui.5dd04a1235": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__clinical_products')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__clinical_products_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__clinical_products_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_products_rxcui.5dd04a1235", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__clinical_products_rxcui"], "alias": "not_null_stg_rxnorm__clinical_products_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3869417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__clinical_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__clinical_products"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__clinical_products"}, "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui.94c75bf656": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clinical_product_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__clinical_product_component_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__clinical__19f6fb5bcaae5ebccd694c1e44d2aa93.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui.94c75bf656", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui"], "alias": "not_null_stg_rxnorm__clinical__19f6fb5bcaae5ebccd694c1e44d2aa93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__clinical__19f6fb5bcaae5ebccd694c1e44d2aa93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__clinical__19f6fb5bcaae5ebccd694c1e44d2aa93"}, "created_at": 1704169463.3886244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__clinical__19f6fb5bcaae5ebccd694c1e44d2aa93\") }}", "language": "sql", "refs": [["stg_rxnorm__clinical_product_component_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__clinical_product_component_links"]}, "compiled_path": null, "column_name": "clinical_product_rxcui", "file_key_name": "models.stg_rxnorm__clinical_product_component_links"}, "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui.869196279f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clinical_product_component_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__clinical_product_component_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__clinical__fd69d791502479297cb519f2232d296b.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui.869196279f", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui"], "alias": "not_null_stg_rxnorm__clinical__fd69d791502479297cb519f2232d296b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__clinical__fd69d791502479297cb519f2232d296b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__clinical__fd69d791502479297cb519f2232d296b"}, "created_at": 1704169463.3903484, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__clinical__fd69d791502479297cb519f2232d296b\") }}", "language": "sql", "refs": [["stg_rxnorm__clinical_product_component_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__clinical_product_component_links"]}, "compiled_path": null, "column_name": "clinical_product_component_rxcui", "file_key_name": "models.stg_rxnorm__clinical_product_component_links"}, "test.sagerx.unique_stg_rxnorm__clinical_product_components_rxcui.2705e1f418": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__clinical_product_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__clinical_product_components_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__clinical_product_components_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__clinical_product_components_rxcui.2705e1f418", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__clinical_product_components_rxcui"], "alias": "unique_stg_rxnorm__clinical_product_components_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3922644, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__clinical_product_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__clinical_product_components"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__clinical_product_components"}, "test.sagerx.not_null_stg_rxnorm__clinical_product_components_rxcui.0b9c81f7ae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__clinical_product_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__clinical_product_components_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__clinical_product_components_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_product_components_rxcui.0b9c81f7ae", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__clinical_product_components_rxcui"], "alias": "not_null_stg_rxnorm__clinical_product_components_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3939292, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__clinical_product_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__clinical_product_components"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__clinical_product_components"}, "test.sagerx.unique_stg_rxnorm__dose_forms_rxcui.c7fb3a8da2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__dose_forms')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__dose_forms_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__dose_forms_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__dose_forms_rxcui.c7fb3a8da2", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__dose_forms_rxcui"], "alias": "unique_stg_rxnorm__dose_forms_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3956084, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__dose_forms"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__dose_forms"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__dose_forms"}, "test.sagerx.not_null_stg_rxnorm__dose_forms_rxcui.a06bc0be08": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__dose_forms')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__dose_forms_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__dose_forms_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_forms_rxcui.a06bc0be08", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__dose_forms_rxcui"], "alias": "not_null_stg_rxnorm__dose_forms_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.3972769, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__dose_forms"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__dose_forms"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__dose_forms"}, "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.3fdd0d4bb1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dose_form_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__dose_form_group_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.3fdd0d4bb1", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui"], "alias": "not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.398948, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__dose_form_group_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__dose_form_group_links"]}, "compiled_path": null, "column_name": "dose_form_rxcui", "file_key_name": "models.stg_rxnorm__dose_form_group_links"}, "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui.f4fde7102f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dose_form_group_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__dose_form_group_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__dose_form_1c7459a2a0be5b5a7b3016f225e0146f.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui.f4fde7102f", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui"], "alias": "not_null_stg_rxnorm__dose_form_1c7459a2a0be5b5a7b3016f225e0146f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__dose_form_1c7459a2a0be5b5a7b3016f225e0146f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__dose_form_1c7459a2a0be5b5a7b3016f225e0146f"}, "created_at": 1704169463.4010699, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__dose_form_1c7459a2a0be5b5a7b3016f225e0146f\") }}", "language": "sql", "refs": [["stg_rxnorm__dose_form_group_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__dose_form_group_links"]}, "compiled_path": null, "column_name": "dose_form_group_rxcui", "file_key_name": "models.stg_rxnorm__dose_form_group_links"}, "test.sagerx.unique_stg_rxnorm__dose_form_groups_rxcui.b2e6200e1b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__dose_form_groups')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__dose_form_groups_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__dose_form_groups_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__dose_form_groups_rxcui.b2e6200e1b", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__dose_form_groups_rxcui"], "alias": "unique_stg_rxnorm__dose_form_groups_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4027781, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__dose_form_groups"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__dose_form_groups"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__dose_form_groups"}, "test.sagerx.not_null_stg_rxnorm__dose_form_groups_rxcui.eca504df20": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__dose_form_groups')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__dose_form_groups_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__dose_form_groups_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_form_groups_rxcui.eca504df20", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__dose_form_groups_rxcui"], "alias": "not_null_stg_rxnorm__dose_form_groups_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4044576, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__dose_form_groups"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__dose_form_groups"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__dose_form_groups"}, "test.sagerx.unique_stg_rxnorm__ingredients_rxcui.c6b139419f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredients')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__ingredients_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__ingredients_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__ingredients_rxcui.c6b139419f", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__ingredients_rxcui"], "alias": "unique_stg_rxnorm__ingredients_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4061284, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredients"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__ingredients"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__ingredients"}, "test.sagerx.not_null_stg_rxnorm__ingredients_rxcui.24a1dca332": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredients')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredients_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredients_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredients_rxcui.24a1dca332", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredients_rxcui"], "alias": "not_null_stg_rxnorm__ingredients_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4078114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredients"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredients"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__ingredients"}, "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui.303404889c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingredient_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_component_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredien_256eebaa59b47fbaab47776df0dd4303.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui.303404889c", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui"], "alias": "not_null_stg_rxnorm__ingredien_256eebaa59b47fbaab47776df0dd4303", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__ingredien_256eebaa59b47fbaab47776df0dd4303", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__ingredien_256eebaa59b47fbaab47776df0dd4303"}, "created_at": 1704169463.4097486, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__ingredien_256eebaa59b47fbaab47776df0dd4303\") }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_component_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_component_links"]}, "compiled_path": null, "column_name": "ingredient_rxcui", "file_key_name": "models.stg_rxnorm__ingredient_component_links"}, "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui.a6923961b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingredient_component_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_component_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredien_73ff0c892ffceac004b1c3fd063eb63f.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui.a6923961b3", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui"], "alias": "not_null_stg_rxnorm__ingredien_73ff0c892ffceac004b1c3fd063eb63f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__ingredien_73ff0c892ffceac004b1c3fd063eb63f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__ingredien_73ff0c892ffceac004b1c3fd063eb63f"}, "created_at": 1704169463.4115067, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__ingredien_73ff0c892ffceac004b1c3fd063eb63f\") }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_component_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_component_links"]}, "compiled_path": null, "column_name": "ingredient_component_rxcui", "file_key_name": "models.stg_rxnorm__ingredient_component_links"}, "test.sagerx.unique_stg_rxnorm__ingredient_components_rxcui.75f7804348": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__ingredient_components_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__ingredient_components_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__ingredient_components_rxcui.75f7804348", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__ingredient_components_rxcui"], "alias": "unique_stg_rxnorm__ingredient_components_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4131923, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_components"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__ingredient_components"}, "test.sagerx.not_null_stg_rxnorm__ingredient_components_rxcui.aed8b0d4c5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_components_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredient_components_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_components_rxcui.aed8b0d4c5", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_components_rxcui"], "alias": "not_null_stg_rxnorm__ingredient_components_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4148679, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_components"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__ingredient_components"}, "test.sagerx.accepted_values_stg_rxnorm__ingredient_components_tty__IN.5d941aec74": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["IN"], "column_name": "tty", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "accepted_values_stg_rxnorm__ingredient_components_tty__IN", "resource_type": "test", "package_name": "sagerx", "path": "accepted_values_stg_rxnorm__ingredient_components_tty__IN.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.accepted_values_stg_rxnorm__ingredient_components_tty__IN.5d941aec74", "fqn": ["sagerx", "staging", "rxnorm", "accepted_values_stg_rxnorm__ingredient_components_tty__IN"], "alias": "accepted_values_stg_rxnorm__ingredient_components_tty__IN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4165587, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_components"]}, "compiled_path": null, "column_name": "tty", "file_key_name": "models.stg_rxnorm__ingredient_components"}, "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui.6be28272b5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clinical_product_component_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_strength_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredien_0e136dc1bf3f46708433b0712fc4d257.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui.6be28272b5", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui"], "alias": "not_null_stg_rxnorm__ingredien_0e136dc1bf3f46708433b0712fc4d257", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__ingredien_0e136dc1bf3f46708433b0712fc4d257", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__ingredien_0e136dc1bf3f46708433b0712fc4d257"}, "created_at": 1704169463.430624, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__ingredien_0e136dc1bf3f46708433b0712fc4d257\") }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_strength_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_strength_links"]}, "compiled_path": null, "column_name": "clinical_product_component_rxcui", "file_key_name": "models.stg_rxnorm__ingredient_strength_links"}, "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui.fec66d7333": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingredient_component_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_strength_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredien_3109d8d3c477102b98c75251c8f54b7f.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui.fec66d7333", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui"], "alias": "not_null_stg_rxnorm__ingredien_3109d8d3c477102b98c75251c8f54b7f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__ingredien_3109d8d3c477102b98c75251c8f54b7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__ingredien_3109d8d3c477102b98c75251c8f54b7f"}, "created_at": 1704169463.434611, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__ingredien_3109d8d3c477102b98c75251c8f54b7f\") }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_strength_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_strength_links"]}, "compiled_path": null, "column_name": "ingredient_component_rxcui", "file_key_name": "models.stg_rxnorm__ingredient_strength_links"}, "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui.3527b30bda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingredient_strength_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_strength_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredien_f117a3323fa2904438079e55ee840b9c.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui.3527b30bda", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui"], "alias": "not_null_stg_rxnorm__ingredien_f117a3323fa2904438079e55ee840b9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__ingredien_f117a3323fa2904438079e55ee840b9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__ingredien_f117a3323fa2904438079e55ee840b9c"}, "created_at": 1704169463.438681, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__ingredien_f117a3323fa2904438079e55ee840b9c\") }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_strength_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_strength_links"]}, "compiled_path": null, "column_name": "ingredient_strength_rxcui", "file_key_name": "models.stg_rxnorm__ingredient_strength_links"}, "test.sagerx.unique_stg_rxnorm__ingredient_strengths_rxcui.716f558a6b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_strengths')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__ingredient_strengths_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__ingredient_strengths_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__ingredient_strengths_rxcui.716f558a6b", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__ingredient_strengths_rxcui"], "alias": "unique_stg_rxnorm__ingredient_strengths_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.440519, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_strengths"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_strengths"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__ingredient_strengths"}, "test.sagerx.not_null_stg_rxnorm__ingredient_strengths_rxcui.d4a27e753c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__ingredient_strengths')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__ingredient_strengths_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__ingredient_strengths_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strengths_rxcui.d4a27e753c", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__ingredient_strengths_rxcui"], "alias": "not_null_stg_rxnorm__ingredient_strengths_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4422133, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__ingredient_strengths"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__ingredient_strengths"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__ingredient_strengths"}, "test.sagerx.not_null_stg_rxnorm__mthspl_products_rxcui.21eb3d19b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__mthspl_products')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__mthspl_products_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__mthspl_products_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__mthspl_products_rxcui.21eb3d19b0", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__mthspl_products_rxcui"], "alias": "not_null_stg_rxnorm__mthspl_products_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4438956, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__mthspl_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__mthspl_products"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__mthspl_products"}, "test.sagerx.not_null_stg_rxnorm__mthspl_substances_rxcui.1b38748ca6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__mthspl_substances')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__mthspl_substances_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__mthspl_substances_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__mthspl_substances_rxcui.1b38748ca6", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__mthspl_substances_rxcui"], "alias": "not_null_stg_rxnorm__mthspl_substances_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.445568, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__mthspl_substances"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__mthspl_substances"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__mthspl_substances"}, "test.sagerx.unique_stg_rxnorm__brand_products_rxcui.da77867bbd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_products')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__brand_products_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__brand_products_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__brand_products_rxcui.da77867bbd", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__brand_products_rxcui"], "alias": "unique_stg_rxnorm__brand_products_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4474359, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__brand_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__brand_products"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__brand_products"}, "test.sagerx.not_null_stg_rxnorm__brand_products_rxcui.634ef0c2ff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_products')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__brand_products_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__brand_products_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_products_rxcui.634ef0c2ff", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__brand_products_rxcui"], "alias": "not_null_stg_rxnorm__brand_products_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.449107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__brand_products"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__brand_products"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__brand_products"}, "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui.6135a1fa50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_product_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_product_component_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__brand_pro_a0455471671e7fb10ea436b1ff7c98e3.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui.6135a1fa50", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui"], "alias": "not_null_stg_rxnorm__brand_pro_a0455471671e7fb10ea436b1ff7c98e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__brand_pro_a0455471671e7fb10ea436b1ff7c98e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__brand_pro_a0455471671e7fb10ea436b1ff7c98e3"}, "created_at": 1704169463.4507985, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__brand_pro_a0455471671e7fb10ea436b1ff7c98e3\") }}", "language": "sql", "refs": [["stg_rxnorm__brand_product_component_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__brand_product_component_links"]}, "compiled_path": null, "column_name": "brand_product_rxcui", "file_key_name": "models.stg_rxnorm__brand_product_component_links"}, "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui.9f497ef16e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "brand_product_component_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_product_component_links')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__brand_pro_23ac4adf78100fbcdcd277bae35c9e46.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui.9f497ef16e", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui"], "alias": "not_null_stg_rxnorm__brand_pro_23ac4adf78100fbcdcd277bae35c9e46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__brand_pro_23ac4adf78100fbcdcd277bae35c9e46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__brand_pro_23ac4adf78100fbcdcd277bae35c9e46"}, "created_at": 1704169463.4524891, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__brand_pro_23ac4adf78100fbcdcd277bae35c9e46\") }}", "language": "sql", "refs": [["stg_rxnorm__brand_product_component_links"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__brand_product_component_links"]}, "compiled_path": null, "column_name": "brand_product_component_rxcui", "file_key_name": "models.stg_rxnorm__brand_product_component_links"}, "test.sagerx.unique_stg_rxnorm__brand_product_components_rxcui.cd3b918573": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_product_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__brand_product_components_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__brand_product_components_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__brand_product_components_rxcui.cd3b918573", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__brand_product_components_rxcui"], "alias": "unique_stg_rxnorm__brand_product_components_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4541686, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__brand_product_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__brand_product_components"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__brand_product_components"}, "test.sagerx.not_null_stg_rxnorm__brand_product_components_rxcui.4917a3f0ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_product_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__brand_product_components_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__brand_product_components_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_components_rxcui.4917a3f0ca", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__brand_product_components_rxcui"], "alias": "not_null_stg_rxnorm__brand_product_components_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4560592, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__brand_product_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__brand_product_components"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__brand_product_components"}, "test.sagerx.not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui.25fdaf356b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "clinical_product_component_rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brand_product_components')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__brand_pro_8a3c0a2a6e5d51cf23cd68cab747c324.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui.25fdaf356b", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui"], "alias": "not_null_stg_rxnorm__brand_pro_8a3c0a2a6e5d51cf23cd68cab747c324", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_rxnorm__brand_pro_8a3c0a2a6e5d51cf23cd68cab747c324", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_rxnorm__brand_pro_8a3c0a2a6e5d51cf23cd68cab747c324"}, "created_at": 1704169463.4577532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_rxnorm__brand_pro_8a3c0a2a6e5d51cf23cd68cab747c324\") }}", "language": "sql", "refs": [["stg_rxnorm__brand_product_components"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__brand_product_components"]}, "compiled_path": null, "column_name": "clinical_product_component_rxcui", "file_key_name": "models.stg_rxnorm__brand_product_components"}, "test.sagerx.unique_stg_rxnorm__brands_rxcui.a2c8cd0cd0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brands')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_rxnorm__brands_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_rxnorm__brands_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.unique_stg_rxnorm__brands_rxcui.a2c8cd0cd0", "fqn": ["sagerx", "staging", "rxnorm", "unique_stg_rxnorm__brands_rxcui"], "alias": "unique_stg_rxnorm__brands_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4594483, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__brands"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_rxnorm__brands"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__brands"}, "test.sagerx.not_null_stg_rxnorm__brands_rxcui.d067686860": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rxcui", "model": "{{ get_where_subquery(ref('stg_rxnorm__brands')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_rxnorm__brands_rxcui", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_rxnorm__brands_rxcui.sql", "original_file_path": "models/staging/rxnorm/_rxnorm__models.yml", "unique_id": "test.sagerx.not_null_stg_rxnorm__brands_rxcui.d067686860", "fqn": ["sagerx", "staging", "rxnorm", "not_null_stg_rxnorm__brands_rxcui"], "alias": "not_null_stg_rxnorm__brands_rxcui", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4611392, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_rxnorm__brands"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_rxnorm__brands"]}, "compiled_path": null, "column_name": "rxcui", "file_key_name": "models.stg_rxnorm__brands"}, "test.sagerx.unique_stg_fda_ndc__ndc_ndc11.60276e520c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ndc11", "model": "{{ get_where_subquery(ref('stg_fda_ndc__ndc')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "unique_stg_fda_ndc__ndc_ndc11", "resource_type": "test", "package_name": "sagerx", "path": "unique_stg_fda_ndc__ndc_ndc11.sql", "original_file_path": "models/staging/fda_ndc/_fda_ndc__models.yml", "unique_id": "test.sagerx.unique_stg_fda_ndc__ndc_ndc11.60276e520c", "fqn": ["sagerx", "staging", "fda_ndc", "unique_stg_fda_ndc__ndc_ndc11"], "alias": "unique_stg_fda_ndc__ndc_ndc11", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.4843035, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_fda_ndc__ndc"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.sagerx.stg_fda_ndc__ndc"]}, "compiled_path": null, "column_name": "ndc11", "file_key_name": "models.stg_fda_ndc__ndc"}, "test.sagerx.not_null_stg_fda_ndc__ndc_ndc11.c94b597c0b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ndc11", "model": "{{ get_where_subquery(ref('stg_fda_ndc__ndc')) }}"}, "namespace": null}, "database": "sagerx", "schema": "dbt_test__audit", "name": "not_null_stg_fda_ndc__ndc_ndc11", "resource_type": "test", "package_name": "sagerx", "path": "not_null_stg_fda_ndc__ndc_ndc11.sql", "original_file_path": "models/staging/fda_ndc/_fda_ndc__models.yml", "unique_id": "test.sagerx.not_null_stg_fda_ndc__ndc_ndc11.c94b597c0b", "fqn": ["sagerx", "staging", "fda_ndc", "not_null_stg_fda_ndc__ndc_ndc11"], "alias": "not_null_stg_fda_ndc__ndc_ndc11", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1704169463.486009, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_fda_ndc__ndc"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.sagerx.stg_fda_ndc__ndc"]}, "compiled_path": null, "column_name": "ndc11", "file_key_name": "models.stg_fda_ndc__ndc"}}, "sources": {"source.sagerx.nadac.nadac": {"database": "sagerx", "schema": "sagerx_lake", "name": "nadac", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/nadac/_nadac__sources.yml", "original_file_path": "models/staging/nadac/_nadac__sources.yml", "unique_id": "source.sagerx.nadac.nadac", "fqn": ["sagerx", "staging", "nadac", "nadac", "nadac"], "source_name": "nadac", "source_description": "", "loader": "", "identifier": "nadac", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "National Average Drug Acquisition Cost (NADAC).\nCMS has entered into a contract with Myers & Stauffer, LC, to perform a Retail Price Survey.\nThe purpose of this initiative is to perform a monthly nationwide survey of retail community pharmacy covered outpatient drug prices and to provide states with weekly updates on pricing files. These pricing files, entitled the NADAC (National Average Drug Acquisition Cost) files, provide state Medicaid agencies with covered outpatient drug prices by averaging survey invoice prices from retail community pharmacies across the United States. The state agencies have the option of using the NADAC files to meet the new Actual Acquisition Cost (AAC) reimbursement requirements in the Covered Outpatient Drug final rule with comment (CMS 2345-FC).\nThe Retail Price Survey focuses on the retail community pharmacy acquisition costs. This provides for a survey of the purchase prices of all covered outpatient drugs by retail community pharmacies. These pharmacies include independent retail community pharmacies and chain pharmacies. The prices are updated on a weekly and monthly basis.  A methodology document titled Methodology for Calculating the National Average Drug Acquisition Cost (NADAC) outlines the processes used to derive the NADAC. NADAC Questions and Responses includes questions and comments received to date regarding the NADAC, along with our responses. To the extent that states consider the NADAC as a reference price when setting their reimbursement methodology, they must submit a State Plan Amendment (SPA) to CMS in accordance with state plan requirements if they decide to use NADAC as a basis for payment.\nEffective November 27, 2013, CMS began posting final NADAC files. To view the NADAC weekly files and the NADAC Week to Week File Comparison, please visit the Pharmacy Drug Pricing Page.  \nPlease note that the NADAC file is updated on a weekly basis. Each month, a new file is posted to reflect findings from the previous month\u2019s survey results incorporating the weekly price changes that have occurred in the interim weeks before the next monthly NADAC file. For more information on the fields in the NADAC weekly file, please see the NADAC Data Field Definitions. In addition, to easily identify and understand the pricing changes that occur each week, we are posting a NADAC Week to Week File Comparison which will accompany the weekly NADAC file. This comparison file identifies the drug products with current NADAC rates that are replaced with new NADAC rates. Other changes (e.g. NDC additions and terminations) to the NADAC file are not reflected in this comparison. The explanation of the data fields used in the comparison file are further defined in the NADAC Week to Week Comparison Data Field Definitions.\nThe NADAC Equivalency Metrics are published on a quarterly basis and are intended to be utilized for analyzing and monitoring the NADAC pricing relationship to compendia drug pricing values. In addition, the NADAC equivalency metrics can be utilized by state Medicaid programs for evaluating their respective pharmacy reimbursement protocols. A methodology document titled NADAC Equivalency Methodology has been developed to outline the processes used to derive the NADAC Equivalency Metrics file.\n", "columns": {"ndc_description": {"name": "ndc_description", "description": "Identifies the drug name, strength, and dosage form of the drug product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc": {"name": "ndc", "description": "The National Drug Code (NDC) is a numerical code maintained by the FDA that includes the labeler code, product code, and package code. The NDC is an 11-digit code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nadac_per_unit": {"name": "nadac_per_unit", "description": "The National Average Drug Acquisition Cost per unit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The effective date of the NADAC Per Unit cost.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pricing_unit": {"name": "pricing_unit", "description": "Indicates the pricing unit for the associated NDC ('ML', 'GM' or 'EA').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pharmacy_type_indicator": {"name": "pharmacy_type_indicator", "description": "The source of pharmacy survey data used to calculate the NADAC. 'C/I' indicates data was collected from surveys of Chain/Independent pharmacies. Other pharmacy type indicators are not used at this time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "otc": {"name": "otc", "description": "Indicates whether or not the NDC is for an over-the-counter (OTC) product ('Y' or 'N').", "meta": {}, "data_type": null, "quote": null, "tags": []}, "explanation_code": {"name": "explanation_code", "description": "Codes that pertain to how the NADAC was calculated; see explanation code descriptions below. Numbers 1-10, multi-value, comma-delimited.\n- Code 1: The NADAC was calculated using information from the most recently completed pharmacy survey. - Code 2: The average acquisition cost of the most recent survey was within \u00b1 2% of the current NADAC; therefore, the NADAC was carried forward from the previous file. - Code 3: The NADAC based on survey data has been adjusted to reflect changes in published pricing, or as a result of an inquiry to the help desk. - Code 4: The NADAC was carried forward from the previous file. - Code 5: The NADAC was calculated based on package size. - Code 6: The CMS Covered Outpatient Drug Product File drug category type of 'S/I/N' (Single Source/Innovator/Non-Innovator) has not been applied. Most 'S/I' drugs with the same strength, dosage form and route of administration were grouped together for the purpose of the NADAC calculation and 'N' drugs were also grouped together. In some cases, however, in calculating a NADAC, the CMS 'S/I/N' designation was not applied when the State Medicaid brand or generic payment practices for these drugs generally differed from the Covered Outpatient Drug Product File designation.\n    \n> For example, authorized generic drugs are appropriately listed in the CMS covered outpatient drug file as 'I' drugs for the purpose of rebates as they were approved under a New Drug Application (NDA). However, they are grouped as 'N' for the NADAC calculation since they are generally designated as generic by most State Medicaid programs for the purposes of reimbursement. Another example of this occurrence is when proprietary named drugs, approved under an Abbreviated New Drug Application (ANDA) are appropriately in the CMS Covered Outpatient Drug file as 'N' for the purpose of rebates. However, they are grouped as 'S/I' for the NADAC calculation since they are generally reimbursed as brand drugs by State Medicaid programs.\n    \n- Codes 7 through 10: Reserved for future use.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "classification_for_rate_setting": {"name": "classification_for_rate_setting", "description": "Indicates whether the NDC was considered brand (\u2018B\u2019) or generic (\u2018G\u2019) for the NADAC rate calculation process. If the NDC was considered brand (\u2018B\u2019) and approved under an Abbreviated New Drug Application (ANDA), the indicator is shown as (\u2018B-ANDA\u2019). NDCs approved as biosimilar products are considered brand (\u2018B\u2019) and will be designated as (\u2018B-BIO\u2019).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "corresponding_generic_drug_nadac_per_unit": {"name": "corresponding_generic_drug_nadac_per_unit", "description": "The NADAC for the corresponding generic drug.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "corresponding_generic_drug_effective_date": {"name": "corresponding_generic_drug_effective_date", "description": "The effective date of when the Corresponding Generic Drug NADAC Per Unit is assigned to a multiple source brand drug NDC. This date may not correspond to the NADAC effective date for the generic drug due to the method by which the corresponding generic drug NADAC effective date is assigned.\nThe corresponding generic drug NADAC effective date is the latter of the following dates:\na) date of the NADAC reference file upon which the corresponding generic drug NADAC first appears,  b) the current corresponding generic drug NADAC effective date plus one day - one day is added to the previous date so that there are no overlapping rate segments, or  c) the NADAC Effective Date for the generic drug group. This data assignment process is necessary to eliminate the potential for applying corresponding generic drug NADACs to past claims.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "as_of_date": {"name": "as_of_date", "description": "As of date.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"nadac\"", "created_at": 1704169463.4875867}, "source.sagerx.rxnorm.rxnorm_rxnatomarchive": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxnatomarchive", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxnatomarchive", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxnatomarchive"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxnatomarchive", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxnatomarchive\"", "created_at": 1704169463.4878438}, "source.sagerx.rxnorm.rxnorm_rxnconso": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxnconso", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxnconso", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxnconso"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxnconso", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxnconso\"", "created_at": 1704169463.4880688}, "source.sagerx.rxnorm.rxnorm_rxncui": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxncui", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxncui", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxncui"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxncui", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxncui\"", "created_at": 1704169463.4882896}, "source.sagerx.rxnorm.rxnorm_rxncuichanges": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxncuichanges", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxncuichanges", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxncuichanges"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxncuichanges", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxncuichanges\"", "created_at": 1704169463.4885075}, "source.sagerx.rxnorm.rxnorm_rxndoc": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxndoc", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxndoc", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxndoc"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxndoc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxndoc\"", "created_at": 1704169463.488725}, "source.sagerx.rxnorm.rxnorm_rxnrel": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxnrel", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxnrel", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxnrel"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxnrel", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxnrel\"", "created_at": 1704169463.4889438}, "source.sagerx.rxnorm.rxnorm_rxnsab": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxnsab", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxnsab", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxnsab"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxnsab", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxnsab\"", "created_at": 1704169463.489164}, "source.sagerx.rxnorm.rxnorm_rxnsat": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxnsat", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxnsat", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxnsat"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxnsat", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxnsat\"", "created_at": 1704169463.4893832}, "source.sagerx.rxnorm.rxnorm_rxnsty": {"database": "sagerx", "schema": "sagerx_lake", "name": "rxnorm_rxnsty", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/rxnorm/_rxnorm__sources.yml", "original_file_path": "models/staging/rxnorm/_rxnorm__sources.yml", "unique_id": "source.sagerx.rxnorm.rxnorm_rxnsty", "fqn": ["sagerx", "staging", "rxnorm", "rxnorm", "rxnorm_rxnsty"], "source_name": "rxnorm", "source_description": "", "loader": "", "identifier": "rxnorm_rxnsty", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"rxnorm_rxnsty\"", "created_at": 1704169463.4895997}, "source.sagerx.fda_ndc.fda_ndc_product": {"database": "sagerx", "schema": "sagerx_lake", "name": "fda_ndc_product", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/fda_ndc/_fda_ndc__sources.yml", "original_file_path": "models/staging/fda_ndc/_fda_ndc__sources.yml", "unique_id": "source.sagerx.fda_ndc.fda_ndc_product", "fqn": ["sagerx", "staging", "fda_ndc", "fda_ndc", "fda_ndc_product"], "source_name": "fda_ndc", "source_description": "", "loader": "", "identifier": "fda_ndc_product", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"fda_ndc_product\"", "created_at": 1704169463.4898167}, "source.sagerx.fda_ndc.fda_ndc_package": {"database": "sagerx", "schema": "sagerx_lake", "name": "fda_ndc_package", "resource_type": "source", "package_name": "sagerx", "path": "models/staging/fda_ndc/_fda_ndc__sources.yml", "original_file_path": "models/staging/fda_ndc/_fda_ndc__sources.yml", "unique_id": "source.sagerx.fda_ndc.fda_ndc_package", "fqn": ["sagerx", "staging", "fda_ndc", "fda_ndc", "fda_ndc_package"], "source_name": "fda_ndc", "source_description": "", "loader": "", "identifier": "fda_ndc_package", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sagerx\".\"sagerx_lake\".\"fda_ndc_package\"", "created_at": 1704169463.4900336}}, "macros": {"macro.sagerx.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "sagerx", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "unique_id": "macro.sagerx.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.493949, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.4956722, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.4976764, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5059001, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5073624, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5081992, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5089586, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5100892, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5109804, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5113974, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.512228, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5131657, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5152984, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5157673, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.51653, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.517231, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.518246, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5187855, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5202298, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5207157, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.521004, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5215385, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.521976, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.52223, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.522487, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.522745, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.524047, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5245376, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.52546, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.53176, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5321248, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5332277, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5346804, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5355601, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5364788, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5374894, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5386686, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5390806, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5395684, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.539972, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5406075, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5417528, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5464647, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5468733, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.547428, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.548124, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5487123, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5494719, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.549913, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5504348, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.55101, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5514169, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5518997, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5525804, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.553175, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5544891, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5550482, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5554001, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5559225, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5582156, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.558847, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.559307, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5596864, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5601268, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.560715, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5612094, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5619304, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5623808, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.562771, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5654554, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5657465, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5661552, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.566436, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.567379, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5678337, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5680857, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.568631, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.569088, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5696373, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.570095, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5706453, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5722377, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5727053, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.573299, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5738482, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5766315, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5775778, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5779202, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.578314, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.579298, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.581855, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5822477, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.583011, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5834677, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5843046, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.584911, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5864804, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.587091, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5889564, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5897057, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5901527, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5905426, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5909941, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5919855, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5923483, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5927227, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5930786, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5934896, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.593676, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5940738, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5945108, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5950758, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5957716, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5969918, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5977075, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5984204, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5988238, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.5999916, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6009552, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6016064, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6019354, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6024985, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.602865, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6034863, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.603807, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.604407, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6047997, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6054432, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6057856, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6063406, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.606653, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6072857, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6076121, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6081617, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6085541, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6090658, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6092527, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.60998, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6103802, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6110044, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6113286, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6122992, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6126974, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6132288, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6138546, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6140454, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6149852, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6155753, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6163032, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6167028, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.617348, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.617684, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.618276, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.618614, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.619193, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6194522, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6200159, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.620272, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6219552, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6223242, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6227245, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6231053, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6235304, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6239038, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6242936, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6247313, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6251245, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6254916, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6258814, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6263306, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.626723, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.627081, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.627635, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6278884, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6286123, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6292489, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.629616, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6321537, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6333025, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.63469, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.635632, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6358151, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6366334, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.637246, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6380255, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.638575, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6395752, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6402123, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.640901, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6440258, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6454878, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6461918, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6489806, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6518064, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6536415, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6542027, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6564517, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6569352, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.657288, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.657643, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6579888, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6587112, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6594605, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6602004, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6610382, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.661674, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6729443, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6781924, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6788716, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6792789, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6794982, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.679854, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.68014, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6806333, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.682677, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6831384, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6837552, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.684791, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6906598, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6910727, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6916473, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6933653, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.69376, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6941783, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.6975627, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7006242, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.702031, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7046356, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7059534, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7075603, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7081249, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7098384, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7173824, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7202733, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7232642, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7252493, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.726745, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.727317, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.727769, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7284734, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7289221, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7296329, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7300868, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.730718, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7312775, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7316585, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7323217, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7403812, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7442598, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7448697, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7472558, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7478926, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7493968, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7599554, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7606635, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7611904, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7662501, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.767004, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7673929, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7678268, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.768449, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7716875, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7769003, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.777873, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7783167, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7793512, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7803771, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7868564, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.78902, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.789665, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7908351, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7913084, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7916377, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7919838, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7922711, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7926579, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7930522, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.794188, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7946343, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.7975576, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8042257, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.808602, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8095007, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8102345, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8109827, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8118918, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.812881, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8134387, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8141224, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1704169462.8147788, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.sagerx.int_rxnorm_clinical_products_to_dose_forms": ["model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__dose_forms"], "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths": ["model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredient_component_links", "model.sagerx.stg_rxnorm__ingredient_components", "model.sagerx.stg_rxnorm__ingredient_strength_links", "model.sagerx.stg_rxnorm__ingredient_strengths", "model.sagerx.stg_rxnorm__ingredients"], "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components": ["model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredient_component_links", "model.sagerx.stg_rxnorm__ingredient_components", "model.sagerx.stg_rxnorm__ingredients"], "model.sagerx.int_mthspl_products_to_active_moieties": ["model.sagerx.stg_rxnorm__mthspl_products", "model.sagerx.stg_rxnorm__mthspl_substances"], "model.sagerx.int_mthspl_products_to_inactive_ingredients": ["model.sagerx.stg_rxnorm__mthspl_products", "model.sagerx.stg_rxnorm__mthspl_substances"], "model.sagerx.int_rxnorm_clinical_products_to_ingredients": ["model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredients"], "model.sagerx.int_rxnorm_clinical_products_to_ndcs": ["model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__dose_forms", "model.sagerx.stg_rxnorm__ingredients", "model.sagerx.stg_rxnorm__ndcs"], "model.sagerx.int_mthspl_products_to_active_ingredients": ["model.sagerx.stg_rxnorm__mthspl_products", "model.sagerx.stg_rxnorm__mthspl_substances"], "model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components": ["model.sagerx.stg_rxnorm__clinical_product_component_links", "model.sagerx.stg_rxnorm__clinical_product_components", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__ndcs"], "model.sagerx.int_rxnorm_ndcs_to_products": ["model.sagerx.stg_rxnorm__brand_products", "model.sagerx.stg_rxnorm__clinical_products", "model.sagerx.stg_rxnorm__ndcs"], "model.sagerx.stg_nadac__all_nadac": ["source.sagerx.nadac.nadac"], "model.sagerx.stg_nadac__enhanced_nadac": ["model.sagerx.stg_nadac__all_nadac"], "model.sagerx.stg_rxnorm__dose_form_group_links": [], "model.sagerx.stg_rxnorm__ingredients": [], "model.sagerx.stg_rxnorm__clinical_products": [], "model.sagerx.stg_rxnorm__ingredient_strengths": [], "model.sagerx.stg_rxnorm__brand_products": [], "model.sagerx.stg_rxnorm__brands": [], "model.sagerx.stg_rxnorm__mthspl_products": [], "model.sagerx.stg_rxnorm__mthspl_substances": [], "model.sagerx.stg_rxnorm__ingredient_strength_links": [], "model.sagerx.stg_rxnorm__clinical_product_components": [], "model.sagerx.stg_rxnorm__clinical_product_component_links": [], "model.sagerx.stg_rxnorm__brand_product_component_links": [], "model.sagerx.stg_rxnorm__ingredient_component_links": [], "model.sagerx.stg_rxnorm__brand_product_components": [], "model.sagerx.stg_rxnorm__ndcs": [], "model.sagerx.stg_rxnorm__ingredient_components": [], "model.sagerx.stg_rxnorm__dose_form_groups": [], "model.sagerx.stg_rxnorm__dose_forms": [], "model.sagerx.stg_fda_ndc__class": [], "model.sagerx.stg_fda_ndc__substance": [], "model.sagerx.stg_fda_ndc__ndc": ["source.sagerx.fda_ndc.fda_ndc_package", "source.sagerx.fda_ndc.fda_ndc_product"], "test.sagerx.not_null_stg_nadac__all_nadac_ndc.13fad59845": ["model.sagerx.stg_nadac__all_nadac"], "test.sagerx.not_null_stg_nadac__all_nadac_ndc_description.d0df11974f": ["model.sagerx.stg_nadac__all_nadac"], "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc.4d4e5ab99c": ["model.sagerx.stg_nadac__enhanced_nadac"], "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc_description.16fde5c578": ["model.sagerx.stg_nadac__enhanced_nadac"], "test.sagerx.unique_stg_rxnorm__ndcs_ndc.9929df0b31": ["model.sagerx.stg_rxnorm__ndcs"], "test.sagerx.not_null_stg_rxnorm__ndcs_ndc.4db0f5b5df": ["model.sagerx.stg_rxnorm__ndcs"], "test.sagerx.unique_stg_rxnorm__clinical_products_rxcui.0bac3cbe9c": ["model.sagerx.stg_rxnorm__clinical_products"], "test.sagerx.not_null_stg_rxnorm__clinical_products_rxcui.5dd04a1235": ["model.sagerx.stg_rxnorm__clinical_products"], "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui.94c75bf656": ["model.sagerx.stg_rxnorm__clinical_product_component_links"], "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui.869196279f": ["model.sagerx.stg_rxnorm__clinical_product_component_links"], "test.sagerx.unique_stg_rxnorm__clinical_product_components_rxcui.2705e1f418": ["model.sagerx.stg_rxnorm__clinical_product_components"], "test.sagerx.not_null_stg_rxnorm__clinical_product_components_rxcui.0b9c81f7ae": ["model.sagerx.stg_rxnorm__clinical_product_components"], "test.sagerx.unique_stg_rxnorm__dose_forms_rxcui.c7fb3a8da2": ["model.sagerx.stg_rxnorm__dose_forms"], "test.sagerx.not_null_stg_rxnorm__dose_forms_rxcui.a06bc0be08": ["model.sagerx.stg_rxnorm__dose_forms"], "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.3fdd0d4bb1": ["model.sagerx.stg_rxnorm__dose_form_group_links"], "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui.f4fde7102f": ["model.sagerx.stg_rxnorm__dose_form_group_links"], "test.sagerx.unique_stg_rxnorm__dose_form_groups_rxcui.b2e6200e1b": ["model.sagerx.stg_rxnorm__dose_form_groups"], "test.sagerx.not_null_stg_rxnorm__dose_form_groups_rxcui.eca504df20": ["model.sagerx.stg_rxnorm__dose_form_groups"], "test.sagerx.unique_stg_rxnorm__ingredients_rxcui.c6b139419f": ["model.sagerx.stg_rxnorm__ingredients"], "test.sagerx.not_null_stg_rxnorm__ingredients_rxcui.24a1dca332": ["model.sagerx.stg_rxnorm__ingredients"], "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui.303404889c": ["model.sagerx.stg_rxnorm__ingredient_component_links"], "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui.a6923961b3": ["model.sagerx.stg_rxnorm__ingredient_component_links"], "test.sagerx.unique_stg_rxnorm__ingredient_components_rxcui.75f7804348": ["model.sagerx.stg_rxnorm__ingredient_components"], "test.sagerx.not_null_stg_rxnorm__ingredient_components_rxcui.aed8b0d4c5": ["model.sagerx.stg_rxnorm__ingredient_components"], "test.sagerx.accepted_values_stg_rxnorm__ingredient_components_tty__IN.5d941aec74": ["model.sagerx.stg_rxnorm__ingredient_components"], "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui.6be28272b5": ["model.sagerx.stg_rxnorm__ingredient_strength_links"], "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui.fec66d7333": ["model.sagerx.stg_rxnorm__ingredient_strength_links"], "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui.3527b30bda": ["model.sagerx.stg_rxnorm__ingredient_strength_links"], "test.sagerx.unique_stg_rxnorm__ingredient_strengths_rxcui.716f558a6b": ["model.sagerx.stg_rxnorm__ingredient_strengths"], "test.sagerx.not_null_stg_rxnorm__ingredient_strengths_rxcui.d4a27e753c": ["model.sagerx.stg_rxnorm__ingredient_strengths"], "test.sagerx.not_null_stg_rxnorm__mthspl_products_rxcui.21eb3d19b0": ["model.sagerx.stg_rxnorm__mthspl_products"], "test.sagerx.not_null_stg_rxnorm__mthspl_substances_rxcui.1b38748ca6": ["model.sagerx.stg_rxnorm__mthspl_substances"], "test.sagerx.unique_stg_rxnorm__brand_products_rxcui.da77867bbd": ["model.sagerx.stg_rxnorm__brand_products"], "test.sagerx.not_null_stg_rxnorm__brand_products_rxcui.634ef0c2ff": ["model.sagerx.stg_rxnorm__brand_products"], "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui.6135a1fa50": ["model.sagerx.stg_rxnorm__brand_product_component_links"], "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui.9f497ef16e": ["model.sagerx.stg_rxnorm__brand_product_component_links"], "test.sagerx.unique_stg_rxnorm__brand_product_components_rxcui.cd3b918573": ["model.sagerx.stg_rxnorm__brand_product_components"], "test.sagerx.not_null_stg_rxnorm__brand_product_components_rxcui.4917a3f0ca": ["model.sagerx.stg_rxnorm__brand_product_components"], "test.sagerx.not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui.25fdaf356b": ["model.sagerx.stg_rxnorm__brand_product_components"], "test.sagerx.unique_stg_rxnorm__brands_rxcui.a2c8cd0cd0": ["model.sagerx.stg_rxnorm__brands"], "test.sagerx.not_null_stg_rxnorm__brands_rxcui.d067686860": ["model.sagerx.stg_rxnorm__brands"], "test.sagerx.unique_stg_fda_ndc__ndc_ndc11.60276e520c": ["model.sagerx.stg_fda_ndc__ndc"], "test.sagerx.not_null_stg_fda_ndc__ndc_ndc11.c94b597c0b": ["model.sagerx.stg_fda_ndc__ndc"], "source.sagerx.nadac.nadac": [], "source.sagerx.rxnorm.rxnorm_rxnatomarchive": [], "source.sagerx.rxnorm.rxnorm_rxnconso": [], "source.sagerx.rxnorm.rxnorm_rxncui": [], "source.sagerx.rxnorm.rxnorm_rxncuichanges": [], "source.sagerx.rxnorm.rxnorm_rxndoc": [], "source.sagerx.rxnorm.rxnorm_rxnrel": [], "source.sagerx.rxnorm.rxnorm_rxnsab": [], "source.sagerx.rxnorm.rxnorm_rxnsat": [], "source.sagerx.rxnorm.rxnorm_rxnsty": [], "source.sagerx.fda_ndc.fda_ndc_product": [], "source.sagerx.fda_ndc.fda_ndc_package": []}, "child_map": {"model.sagerx.int_rxnorm_clinical_products_to_dose_forms": [], "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths": [], "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components": [], "model.sagerx.int_mthspl_products_to_active_moieties": [], "model.sagerx.int_mthspl_products_to_inactive_ingredients": [], "model.sagerx.int_rxnorm_clinical_products_to_ingredients": [], "model.sagerx.int_rxnorm_clinical_products_to_ndcs": [], "model.sagerx.int_mthspl_products_to_active_ingredients": [], "model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components": [], "model.sagerx.int_rxnorm_ndcs_to_products": [], "model.sagerx.stg_nadac__all_nadac": ["model.sagerx.stg_nadac__enhanced_nadac", "test.sagerx.not_null_stg_nadac__all_nadac_ndc.13fad59845", "test.sagerx.not_null_stg_nadac__all_nadac_ndc_description.d0df11974f"], "model.sagerx.stg_nadac__enhanced_nadac": ["test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc.4d4e5ab99c", "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc_description.16fde5c578"], "model.sagerx.stg_rxnorm__dose_form_group_links": ["test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui.f4fde7102f", "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.3fdd0d4bb1"], "model.sagerx.stg_rxnorm__ingredients": ["model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "test.sagerx.not_null_stg_rxnorm__ingredients_rxcui.24a1dca332", "test.sagerx.unique_stg_rxnorm__ingredients_rxcui.c6b139419f"], "model.sagerx.stg_rxnorm__clinical_products": ["model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components", "model.sagerx.int_rxnorm_clinical_products_to_dose_forms", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "model.sagerx.int_rxnorm_ndcs_to_products", "test.sagerx.not_null_stg_rxnorm__clinical_products_rxcui.5dd04a1235", "test.sagerx.unique_stg_rxnorm__clinical_products_rxcui.0bac3cbe9c"], "model.sagerx.stg_rxnorm__ingredient_strengths": ["model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "test.sagerx.not_null_stg_rxnorm__ingredient_strengths_rxcui.d4a27e753c", "test.sagerx.unique_stg_rxnorm__ingredient_strengths_rxcui.716f558a6b"], "model.sagerx.stg_rxnorm__brand_products": ["model.sagerx.int_rxnorm_ndcs_to_products", "test.sagerx.not_null_stg_rxnorm__brand_products_rxcui.634ef0c2ff", "test.sagerx.unique_stg_rxnorm__brand_products_rxcui.da77867bbd"], "model.sagerx.stg_rxnorm__brands": ["test.sagerx.not_null_stg_rxnorm__brands_rxcui.d067686860", "test.sagerx.unique_stg_rxnorm__brands_rxcui.a2c8cd0cd0"], "model.sagerx.stg_rxnorm__mthspl_products": ["model.sagerx.int_mthspl_products_to_active_ingredients", "model.sagerx.int_mthspl_products_to_active_moieties", "model.sagerx.int_mthspl_products_to_inactive_ingredients", "test.sagerx.not_null_stg_rxnorm__mthspl_products_rxcui.21eb3d19b0"], "model.sagerx.stg_rxnorm__mthspl_substances": ["model.sagerx.int_mthspl_products_to_active_ingredients", "model.sagerx.int_mthspl_products_to_active_moieties", "model.sagerx.int_mthspl_products_to_inactive_ingredients", "test.sagerx.not_null_stg_rxnorm__mthspl_substances_rxcui.1b38748ca6"], "model.sagerx.stg_rxnorm__ingredient_strength_links": ["model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui.6be28272b5", "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui.fec66d7333", "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui.3527b30bda"], "model.sagerx.stg_rxnorm__clinical_product_components": ["model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components", "model.sagerx.int_rxnorm_clinical_products_to_dose_forms", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "test.sagerx.not_null_stg_rxnorm__clinical_product_components_rxcui.0b9c81f7ae", "test.sagerx.unique_stg_rxnorm__clinical_product_components_rxcui.2705e1f418"], "model.sagerx.stg_rxnorm__clinical_product_component_links": ["model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components", "model.sagerx.int_rxnorm_clinical_products_to_dose_forms", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui.869196279f", "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui.94c75bf656"], "model.sagerx.stg_rxnorm__brand_product_component_links": ["test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui.9f497ef16e", "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui.6135a1fa50"], "model.sagerx.stg_rxnorm__ingredient_component_links": ["model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui.a6923961b3", "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui.303404889c"], "model.sagerx.stg_rxnorm__brand_product_components": ["test.sagerx.not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui.25fdaf356b", "test.sagerx.not_null_stg_rxnorm__brand_product_components_rxcui.4917a3f0ca", "test.sagerx.unique_stg_rxnorm__brand_product_components_rxcui.cd3b918573"], "model.sagerx.stg_rxnorm__ndcs": ["model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components", "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "model.sagerx.int_rxnorm_ndcs_to_products", "test.sagerx.not_null_stg_rxnorm__ndcs_ndc.4db0f5b5df", "test.sagerx.unique_stg_rxnorm__ndcs_ndc.9929df0b31"], "model.sagerx.stg_rxnorm__ingredient_components": ["model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "test.sagerx.accepted_values_stg_rxnorm__ingredient_components_tty__IN.5d941aec74", "test.sagerx.not_null_stg_rxnorm__ingredient_components_rxcui.aed8b0d4c5", "test.sagerx.unique_stg_rxnorm__ingredient_components_rxcui.75f7804348"], "model.sagerx.stg_rxnorm__dose_form_groups": ["test.sagerx.not_null_stg_rxnorm__dose_form_groups_rxcui.eca504df20", "test.sagerx.unique_stg_rxnorm__dose_form_groups_rxcui.b2e6200e1b"], "model.sagerx.stg_rxnorm__dose_forms": ["model.sagerx.int_rxnorm_clinical_products_to_dose_forms", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "test.sagerx.not_null_stg_rxnorm__dose_forms_rxcui.a06bc0be08", "test.sagerx.unique_stg_rxnorm__dose_forms_rxcui.c7fb3a8da2"], "model.sagerx.stg_fda_ndc__class": [], "model.sagerx.stg_fda_ndc__substance": [], "model.sagerx.stg_fda_ndc__ndc": ["test.sagerx.not_null_stg_fda_ndc__ndc_ndc11.c94b597c0b", "test.sagerx.unique_stg_fda_ndc__ndc_ndc11.60276e520c"], "test.sagerx.not_null_stg_nadac__all_nadac_ndc.13fad59845": [], "test.sagerx.not_null_stg_nadac__all_nadac_ndc_description.d0df11974f": [], "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc.4d4e5ab99c": [], "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc_description.16fde5c578": [], "test.sagerx.unique_stg_rxnorm__ndcs_ndc.9929df0b31": [], "test.sagerx.not_null_stg_rxnorm__ndcs_ndc.4db0f5b5df": [], "test.sagerx.unique_stg_rxnorm__clinical_products_rxcui.0bac3cbe9c": [], "test.sagerx.not_null_stg_rxnorm__clinical_products_rxcui.5dd04a1235": [], "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui.94c75bf656": [], "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui.869196279f": [], "test.sagerx.unique_stg_rxnorm__clinical_product_components_rxcui.2705e1f418": [], "test.sagerx.not_null_stg_rxnorm__clinical_product_components_rxcui.0b9c81f7ae": [], "test.sagerx.unique_stg_rxnorm__dose_forms_rxcui.c7fb3a8da2": [], "test.sagerx.not_null_stg_rxnorm__dose_forms_rxcui.a06bc0be08": [], "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.3fdd0d4bb1": [], "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui.f4fde7102f": [], "test.sagerx.unique_stg_rxnorm__dose_form_groups_rxcui.b2e6200e1b": [], "test.sagerx.not_null_stg_rxnorm__dose_form_groups_rxcui.eca504df20": [], "test.sagerx.unique_stg_rxnorm__ingredients_rxcui.c6b139419f": [], "test.sagerx.not_null_stg_rxnorm__ingredients_rxcui.24a1dca332": [], "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui.303404889c": [], "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui.a6923961b3": [], "test.sagerx.unique_stg_rxnorm__ingredient_components_rxcui.75f7804348": [], "test.sagerx.not_null_stg_rxnorm__ingredient_components_rxcui.aed8b0d4c5": [], "test.sagerx.accepted_values_stg_rxnorm__ingredient_components_tty__IN.5d941aec74": [], "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui.6be28272b5": [], "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui.fec66d7333": [], "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui.3527b30bda": [], "test.sagerx.unique_stg_rxnorm__ingredient_strengths_rxcui.716f558a6b": [], "test.sagerx.not_null_stg_rxnorm__ingredient_strengths_rxcui.d4a27e753c": [], "test.sagerx.not_null_stg_rxnorm__mthspl_products_rxcui.21eb3d19b0": [], "test.sagerx.not_null_stg_rxnorm__mthspl_substances_rxcui.1b38748ca6": [], "test.sagerx.unique_stg_rxnorm__brand_products_rxcui.da77867bbd": [], "test.sagerx.not_null_stg_rxnorm__brand_products_rxcui.634ef0c2ff": [], "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui.6135a1fa50": [], "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui.9f497ef16e": [], "test.sagerx.unique_stg_rxnorm__brand_product_components_rxcui.cd3b918573": [], "test.sagerx.not_null_stg_rxnorm__brand_product_components_rxcui.4917a3f0ca": [], "test.sagerx.not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui.25fdaf356b": [], "test.sagerx.unique_stg_rxnorm__brands_rxcui.a2c8cd0cd0": [], "test.sagerx.not_null_stg_rxnorm__brands_rxcui.d067686860": [], "test.sagerx.unique_stg_fda_ndc__ndc_ndc11.60276e520c": [], "test.sagerx.not_null_stg_fda_ndc__ndc_ndc11.c94b597c0b": [], "source.sagerx.nadac.nadac": ["model.sagerx.stg_nadac__all_nadac"], "source.sagerx.rxnorm.rxnorm_rxnatomarchive": [], "source.sagerx.rxnorm.rxnorm_rxnconso": [], "source.sagerx.rxnorm.rxnorm_rxncui": [], "source.sagerx.rxnorm.rxnorm_rxncuichanges": [], "source.sagerx.rxnorm.rxnorm_rxndoc": [], "source.sagerx.rxnorm.rxnorm_rxnrel": [], "source.sagerx.rxnorm.rxnorm_rxnsab": [], "source.sagerx.rxnorm.rxnorm_rxnsat": [], "source.sagerx.rxnorm.rxnorm_rxnsty": [], "source.sagerx.fda_ndc.fda_ndc_product": ["model.sagerx.stg_fda_ndc__ndc"], "source.sagerx.fda_ndc.fda_ndc_package": ["model.sagerx.stg_fda_ndc__ndc"]}}