{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.6", "generated_at": "2025-02-06T18:34:30.143562Z", "invocation_id": "1fd64866-1bda-4498-96f7-42f8bcc7387a", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.171910Z", "completed_at": "2025-02-06T18:34:29.186922Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.187295Z", "completed_at": "2025-02-06T18:34:29.187307Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016377925872802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.fda_excluded", "compiled": true, "compiled_code": "SELECT\n\t\n  \n  CASE WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN pack.ndcpackagecode\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(pack.ndcpackagecode,4) || REPLACE(RIGHT(pack.ndcpackagecode,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(pack.ndcpackagecode,5) || '0' || REPLACE(RIGHT(pack.ndcpackagecode,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(pack.ndcpackagecode,10),'-','') || '0' || RIGHT(pack.ndcpackagecode, 1)\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(pack.ndcpackagecode,'-','')\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN pack.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN pack.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN pack.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n AS ndc11\n\t, pack.productid\n\t, pack.productndc\n\t, producttypename\n\t, proprietaryname\n\t, proprietarynamesuffix\n\t, nonproprietaryname\n\t, dosageformname\n\t, routename\n\t, pack.startmarketingdate\n\t, pack.endmarketingdate\n\t, marketingcategoryname\n\t, applicationnumber\n\t, labelername\n\t, substancename\n\t, active_numerator_strength\n\t, active_ingred_unit\n\t, pharm_classes\n\t, deaschedule\n\t, pack.ndc_exclude_flag\n\t, listing_record_certified_through\n\t, ndcpackagecode\n\t, packagedescription\n\t, sample_package\nFROM \"sagerx\".\"sagerx_lake\".\"fda_excluded_package\" AS pack\nLEFT JOIN \"sagerx\".\"sagerx_lake\".\"fda_excluded_product\" AS prod\n\tON pack.productid = prod.productid", "relation_name": "\"sagerx\".\"sagerx_dev\".\"fda_excluded\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.189170Z", "completed_at": "2025-02-06T18:34:29.192381Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.192759Z", "completed_at": "2025-02-06T18:34:29.192766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004436969757080078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_ashp__current_drug_shortages", "compiled": true, "compiled_code": "-- stg_ashp__current_drug_shortages.sql\n\nwith \n\nashp_shortage_list as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"ashp_shortage_list\"\n\n),\n\ncurrent_drug_shortages as (\n\n    select\n        split_part(detail_url, '=', 2)::int as id,\n        name,\n        concat(\n            'https://www.ashp.org/drug-shortages/current-shortages/',\n            lower(detail_url)) as url,\n        shortage_reasons::jsonb,\n        resupply_dates::jsonb,\n        alternatives_and_management::jsonb,\n        care_implications::jsonb,\n        safety_notices::jsonb,\n        created_date::date,\n        updated_date::date\n    from ashp_shortage_list\n\n)\n\nselect\n    *\nfrom current_drug_shortages", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_ashp__current_drug_shortages\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.194546Z", "completed_at": "2025-02-06T18:34:29.197619Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.197999Z", "completed_at": "2025-02-06T18:34:29.198006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004278421401977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_ashp__current_drug_shortages_ndcs", "compiled": true, "compiled_code": "-- stg_ashp__current_drug_shortages_ndcs.sql\n\nwith \n\nashp_shortage_list as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"ashp_shortage_list_ndcs\"\n\n),\n\ncurrent_drug_shortages_ndcs as (\n\n    select\n        split_part(detail_url, '=', 2)::int as id,\n        replace(ndc, '-', '') as ndc_11,\n        ndc_type\n    from ashp_shortage_list\n\n)\n\nselect\n    *\nfrom current_drug_shortages_ndcs", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_ashp__current_drug_shortages_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.199783Z", "completed_at": "2025-02-06T18:34:29.203036Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.203414Z", "completed_at": "2025-02-06T18:34:29.203422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0044574737548828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__interactions", "compiled": true, "compiled_code": "/* staging.stg_dailymed__interactions */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect zip_file, y.*\n    from   xml_table x,\n            xmltable('dailymed/InteractionText'\n              passing xml_column\n              columns \n                document_id \t text  path '../documentId',\n\t\t\t\tset_id  \t\t text  path '../SetId',\n\t\t\t\tversion_number\t text  path '../VersionNumber',\n\t\t\t\tinteraction_text text path '.'\n\t\t\t\t\t) y", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__interactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.205179Z", "completed_at": "2025-02-06T18:34:29.207394Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.207771Z", "completed_at": "2025-02-06T18:34:29.207777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003392934799194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__main", "compiled": true, "compiled_code": "/* staging.stg_dailymed__main */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect zip_file, y.*, 'https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=' || y.set_id\n    from   xml_table x,\n            xmltable('dailymed'\n              passing xml_column\n              columns \n                document_id \tTEXT  PATH './documentId',\n\t\t\t\tset_id  \t\tTEXT  PATH './SetId',\n\t\t\t\tversion_number\tTEXT  PATH './VersionNumber',\n  \t\t\t\teffective_date\tTEXT  PATH './EffectiveDate',\n\t\t\t\tmarket_status\tTEXT  PATH './MarketStatus',\n\t\t\t\tapplication_number TEXT PATH './ApplicationNumber'\n\t\t\t\t\t) y", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__main\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.209665Z", "completed_at": "2025-02-06T18:34:29.212903Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.213274Z", "completed_at": "2025-02-06T18:34:29.213280Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00456547737121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__ndcs", "compiled": true, "compiled_code": "/* sagerx_dev.stg_dailymed__ndcs */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n),\n\nsql_table as (\n\n\tselect zip_file, y.*\n\t\tfrom   xml_table x,\n\t\t\t\txmltable('dailymed/NDCList/NDC'\n\t\t\t\tpassing xml_column\n\t\t\t\tcolumns \n\t\t\t\t\tdocument_id \ttext  path '../../documentId',\n\t\t\t\t\tset_id  \t\ttext  path '../../SetId',\n\t\t\t\t\tversion_number\t text  path '../../VersionNumber',\n\t\t\t\t\tndc\t\t\t\ttext  path '.'\n\t\t\t\t\t\t) y\n\n),\n\ncte as (\n\n\tselect\n\t\t*,\n\t\t\n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n\t\n\tfrom sql_table\n\n)\n\nselect * from cte", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.215033Z", "completed_at": "2025-02-06T18:34:29.217202Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.217569Z", "completed_at": "2025-02-06T18:34:29.217575Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003351449966430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__organization_activities", "compiled": true, "compiled_code": "/* staging.stg_dailymed__organization_activities */\n \nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect zip_file, y.*\n    from   xml_table x,\n            xmltable('/dailymed/Organizations/establishment/function'\n              passing xml_column\n              columns \n                document_id \ttext  path '../../../documentId',\n\t\t\t\tset_id  \t\ttext  path '../../../SetId',\n\t\t\t\tversion_number\t text  path '../VersionNumber',\n\t\t\t\tdun\t\t\t\ttext  path '../DUN',\n\t            activity\t\ttext  path './name'\n\t\t\t\t\t) y", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__organization_activities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.219331Z", "completed_at": "2025-02-06T18:34:29.221639Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.222002Z", "completed_at": "2025-02-06T18:34:29.222010Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003487110137939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__organization_items", "compiled": true, "compiled_code": "/* staging.dailymed_organization_item */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect zip_file, y.*\n    from   xml_table x,\n            xmltable('/dailymed/Organizations/establishment/function/item_list/item'\n              passing xml_column\n              columns\n                document_id \ttext  path '../../../../../documentId',\n\t\t\t\tset_id  \t\ttext  path '../../../../../SetId',\n\t\t\t\tversion_number\t text  path '../../../../../VersionNumber',\n\t\t\t\tdun\t\t\t\ttext  path '../../../DUN',\n\t            activity\t\ttext  path '../../name',\n\t\t\t\titem\t\t\ttext  path '.'\n\t\t\t\t\t) y", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__organization_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.223802Z", "completed_at": "2025-02-06T18:34:29.226072Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.226441Z", "completed_at": "2025-02-06T18:34:29.226447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035037994384765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__organization_texts", "compiled": true, "compiled_code": "/* staging.stg_dailymed__organization_texts */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect zip_file\n\t\t, document_id\n\t\t, set_id \n\t\t, version_number\n\t\t, organization_text\n\t\t, row_num\nfrom (select zip_file\n\t\t, y.document_id\n\t\t, y.set_id\n\t\t, y.version_number\n\t\t, y.organization_text\n\t\t--,regexp_matches(organization_text, '(manufactured|distributed) (by|for):([\\s\\S]*)(?=manufactured|distributed|made)', 'ig') as mfdg_by_match\n\t\t,row_number() over (partition by zip_file order by length(organization_text) desc) as row_num\n    from   xml_table x,\n            xmltable('/dailymed/Organizations/OrganizationsText'\n              passing xml_column\n              columns \n                document_id \t\ttext path '../../documentId',\n\t\t\t\tset_id  \t\t\ttext path '../../SetId',\n\t\t\t\tversion_number\t text  path '../../VersionNumber',\n\t\t\t\torganization_text\ttext path '.' \n\t\t\t\t\t) y\n\t) z\nwhere row_num = 1", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__organization_texts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.228235Z", "completed_at": "2025-02-06T18:34:29.230451Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.230804Z", "completed_at": "2025-02-06T18:34:29.230809Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0033845901489257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__organizations", "compiled": true, "compiled_code": "/* staging.stg_dailymed__organizations */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect zip_file, y.*\n    from   xml_table x,\n            xmltable('/dailymed/Organizations/establishment'\n              passing xml_column\n              columns \n                document_id \ttext  path '../../documentId',\n\t\t\t\tset_id  \t\ttext  path '../../SetId',\n\t\t\t\tversion_number\t text  path '../../VersionNumber',\n\t\t\t\tdun\t\t\t\ttext  path './DUN',\n\t            org_name\t\ttext  path './name',\n\t            org_type\t\ttext  path './type'\n\t\t\t\t\t) y", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__organizations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.232540Z", "completed_at": "2025-02-06T18:34:29.234810Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.235171Z", "completed_at": "2025-02-06T18:34:29.235176Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003434419631958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__package_label_sections", "compiled": true, "compiled_code": "/* staging.stg_dailymed__package_label_sections */\n\nwith xml_table as\n(\n\tselect zip_file, xml_content::xml as xml_column\n\tfrom sagerx_lake.dailymed\n)\n\nselect\n\tzip_file\n\t, y.*\nfrom xml_table x,\n\txmltable(\n\t\t'//PackageLabel' passing xml_column\n\t\tcolumns \n\t\t\tdocument_id \ttext  path '../../documentId',\n\t\t\tset_id  \t\ttext  path '../../SetId',\n\t\t\tversion_number\ttext  path '../../VersionNumber',\n\t\t\tid\t\t\t\ttext  path 'ID',\n\t\t\ttext\t\t\ttext  path 'Text',\n\t\t\tmedia_list\t\txml   path 'MediaList'\n\t) y", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_sections\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.236921Z", "completed_at": "2025-02-06T18:34:29.241102Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.241477Z", "completed_at": "2025-02-06T18:34:29.241483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005362987518310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_enforcement__json_ndcs", "compiled": true, "compiled_code": "-- stg_fda_enforcement__json_ndcs.sql\n\nWITH base AS (\n\tselect\n\t\tfdae.recall_number\n\t\t, ndc.id_value #>> '{}' as ndc\n\t\t, app_num.id_value #>> '{}' as app_num\n\tfrom sagerx_lake.fda_enforcement fdae\n\t\t, json_array_elements(openfda->'package_ndc') with ordinality ndc(id_value, line)\n\t\t, json_array_elements(openfda->'application_number') with ordinality app_num(id_value, line)\n) \n\nselect\n\tfdae.recall_number\n\t, \n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n\t, left(\n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n,9) as ndc9\n\t, app_num\nfrom sagerx_lake.fda_enforcement fdae\n\t, json_array_elements(openfda->'package_ndc') with ordinality ndc(id_value, line)\n\t, json_array_elements(openfda->'application_number') with ordinality app_num(id_value, line)\nwhere \n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n is not null", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_enforcement__json_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.243231Z", "completed_at": "2025-02-06T18:34:29.246860Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.247223Z", "completed_at": "2025-02-06T18:34:29.247228Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0048062801361083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_enforcement__regex_ndcs", "compiled": true, "compiled_code": "-- stg_fda_enforcement__regex_ndcs.sql\n\n\nwith\n\nz_base as (\n\tselect\n\t\trecall_number\n\t\t, (regexp_matches(product_description, '(\\m\\d{1,5}-\\d{1,4}-\\d{1,2}\\M|\\m\\d{11}\\M)', 'g'))[1] as ndc\n\tfrom sagerx_lake.fda_enforcement\n),\nz as (\n\tselect \n\trecall_number\n\t, \n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n\t, left( \n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n, 9) as ndc9\n\tfrom z_base\n)\t\n\nselect\n\t*\nfrom z\nwhere ndc11 is not null", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_enforcement__regex_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.248957Z", "completed_at": "2025-02-06T18:34:29.251121Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.251486Z", "completed_at": "2025-02-06T18:34:29.251491Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003326416015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_enforcement__reports", "compiled": true, "compiled_code": "-- stg_fda_enforcement__reports.sql\n\nselect\n\tstatus\n\t, city\n\t, state\n\t, country\n\t, classification\n\t, openfda\n\t, product_type\n\t, event_id\n\t, recalling_firm\n\t, address_1\n\t, address_2\n\t, postal_code\n\t, voluntary_mandated\n\t, initial_firm_notification\n\t, distribution_pattern\n\t, recall_number\n\t, product_description\n\t, product_quantity\n\t, reason_for_recall\n\t, recall_initiation_date\n\t, center_classification_date\n\t, report_date\n\t, code_info\nfrom sagerx_lake.fda_enforcement", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_enforcement__reports\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.253230Z", "completed_at": "2025-02-06T18:34:29.256338Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.256696Z", "completed_at": "2025-02-06T18:34:29.256701Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004265785217285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_excluded__classes", "compiled": true, "compiled_code": "-- stg_fda_excluded__classes.sql\nwith\n\nproduct as (\n    select * from \"sagerx\".\"sagerx_lake\".\"fda_excluded_product\"\n)\n\n, pharm_classes_array as (\n\tselect \n\t\tproduct.productid\n\t\t, token\n\t\t, row_number() over (partition by product.productid order by token desc) as class_line\n\tfrom product, unnest(string_to_array(product.pharm_classes, ',')) as token\n)\n\nselect\n\tclasses.productid\n\t, classes.class_line\n\t, trim(left(classes.token, position('[' in classes.token) -1 )) as class_name\n\t, substring(classes.token, '\\[(.+)\\]') as class_type\nfrom pharm_classes_array classes\norder by\n\tproductid\n\t, class_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.258414Z", "completed_at": "2025-02-06T18:34:29.262440Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.262795Z", "completed_at": "2025-02-06T18:34:29.262800Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005173683166503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_excluded__ndcs", "compiled": true, "compiled_code": "-- stg_fda_excluded__ndcs.sql\n\nwith\n\nproduct as (\n    \n    select * from \"sagerx\".\"sagerx_lake\".\"fda_excluded_product\"\n\n),\n\npackage as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"fda_excluded_package\"\n\n)\n\nselect\n\t\n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndcpackagecode\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndcpackagecode,4) || REPLACE(RIGHT(ndcpackagecode,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndcpackagecode,5) || '0' || REPLACE(RIGHT(ndcpackagecode,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndcpackagecode,10),'-','') || '0' || RIGHT(ndcpackagecode, 1)\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndcpackagecode,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n\t, package.productid\n\t, package.productndc\n\t, producttypename\n\t, proprietaryname\n\t, proprietarynamesuffix\n\t, nonproprietaryname\n\t, dosageformname\n\t, routename\n\t, product.startmarketingdate as product_startmarketingdate\n\t, product.endmarketingdate as product_endmarketingdate\n\t, marketingcategoryname\n\t, applicationnumber\n\t, labelername\n\t, substancename\n\t, active_numerator_strength\n\t, active_ingred_unit\n\t, pharm_classes\n\t, deaschedule\n\t, product.ndc_exclude_flag as product_ndc_exclude_flag\n\t, listing_record_certified_through\n\t, ndcpackagecode\n\t, packagedescription\n\t, package.startmarketingdate as package_startmarketingdate\n\t, package.endmarketingdate as package_endmarketingdate\n\t, package.ndc_exclude_flag as package_ndc_exclude_flag\n\t, sample_package\nfrom package\nleft join product\n\ton package.productid = product.productid", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.265849Z", "completed_at": "2025-02-06T18:34:29.268972Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.269334Z", "completed_at": "2025-02-06T18:34:29.269340Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005606651306152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_excluded__substances", "compiled": true, "compiled_code": "-- stg_fda_excluded__substances.sql\n\nwith\n\nproduct as (    \n    select * from \"sagerx\".\"sagerx_lake\".\"fda_excluded_product\"\n)\n\n, substancename_array as (\n\tselect\n\t\tproductid\n\t\t, substance\n\t\t, row_number() over(partition by productid) as substance_line\n\tfrom product, unnest(string_to_array(substancename, '; ')) as substance\n)\n\n, strength_array as (\n\tselect\n\t\tproductid\n\t\t, strength\n\t\t, row_number() over(partition by productid) as strength_line\n\tfrom product, unnest(string_to_array(active_numerator_strength, '; ')) as strength\n)\n\n, unit_array as (\n\tselect\n\t\tproductid\n\t\t, unit\n\t\t, row_number() over(partition by productid) as unit_line\n\tfrom product, unnest(string_to_array(active_ingred_unit, '; ')) as unit\n)\n\nselect\n\tsubstance.productid\n\t, substance.substance_line\n\t, substance.substance as substancename\n\t, strength.strength as active_numerator_strength\n\t, unit.unit as active_ingred_unit\nfrom substancename_array substance\ninner join strength_array strength\n\ton strength.productid = substance.productid\n\tand strength.strength_line = substance.substance_line\ninner join unit_array unit\n\ton unit.productid = substance.productid\n\tand unit.unit_line = substance.substance_line\norder by\n\tproductid\n\t, substance_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__substances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.271063Z", "completed_at": "2025-02-06T18:34:29.321153Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.321773Z", "completed_at": "2025-02-06T18:34:29.321784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.051725149154663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_ndc__classes", "compiled": true, "compiled_code": "-- stg_fda_ndc__classes.sql\n\nwith\n\nproduct as (    \n    select * from \"sagerx\".\"sagerx_lake\".\"fda_ndc_product\"\n)\n\n, pharm_classes_array as (\n\tselect \n\t\tproduct.productid\n\t\t, token\n\t\t, row_number() over (partition by product.productid order by token desc) as class_line\n\tfrom product, unnest(string_to_array(product.pharm_classes, ',')) as token\n)\n\nselect\n\tclasses.productid\n\t, classes.class_line\n\t, trim(left(classes.token, position('[' in classes.token) -1 )) as class_name\n\t, substring(classes.token, '\\[(.+)\\]') as class_type\nfrom pharm_classes_array classes\norder by\n\tproductid\n\t, class_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__classes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.325050Z", "completed_at": "2025-02-06T18:34:29.331827Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.332428Z", "completed_at": "2025-02-06T18:34:29.332437Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00876164436340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_ndc__ndc_associations", "compiled": true, "compiled_code": "-- stg_fda_ndc__ndc_associations\n\nwith package as (\n\n    select * \n    from \"sagerx\".\"sagerx_lake\".\"fda_ndc_package\"\n\n),\n\nextracted_ndc as (\n\n    select \n        package.ndcpackagecode,\n        regexp_matches(package.packagedescription, '\\d+-\\d+-\\d+', 'g') as ndc_match,\n\t\tpackagedescription\n    from package\n\n),\n\nndc_array as (\n\n    select \n        ndc.ndcpackagecode,\n        unnest(ndc.ndc_match) as token,\n\t\tpackagedescription\n    from extracted_ndc ndc\n\n),\n\nranked_array as (\n\t\n\tselect\n\t\tndcpackagecode,\n\t\ttoken,\n\t\trow_number() over() as rn,\n\t\tpackagedescription\n\tfrom ndc_array\n\n),\n\nfinal_array as (\n\n    select\n        ndcpackagecode,\n        token,\n        row_number() over (partition by ndcpackagecode order by rn) as ndc_line,\n\t\tpackagedescription\n    from ranked_array\n\n),\n\nndc_associations as (\n\n    select\n        ndcpackagecode as outer_ndc,\n        \n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndcpackagecode\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndcpackagecode,4) || REPLACE(RIGHT(ndcpackagecode,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndcpackagecode,5) || '0' || REPLACE(RIGHT(ndcpackagecode,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndcpackagecode,10),'-','') || '0' || RIGHT(ndcpackagecode, 1)\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndcpackagecode,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as outer_ndc11,\n        ndc_line,\n        token as ndc,\n        \n  \n  CASE WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN token\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(token,4) || REPLACE(RIGHT(token,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(token,5) || '0' || REPLACE(RIGHT(token,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(token,10),'-','') || '0' || RIGHT(token, 1)\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(token,'-','')\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN token ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN token ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN token ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN token ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN token ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN token ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN token ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11,\n        packagedescription\n    from final_array\n    order by\n        ndcpackagecode,\n        ndc_line\n\n)\n\nselect * from ndc_associations", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndc_associations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.335347Z", "completed_at": "2025-02-06T18:34:29.341537Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.342057Z", "completed_at": "2025-02-06T18:34:29.342065Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00799870491027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_ndc__ndcs", "compiled": true, "compiled_code": "-- stg_fda_ndc__ndcs.sql\n\nwith\n\nproduct as (\n    \n    select * from \"sagerx\".\"sagerx_lake\".\"fda_ndc_product\"\n\n),\n\npackage as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"fda_ndc_package\"\n\n)\n\nselect\n\t\n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndcpackagecode\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndcpackagecode,4) || REPLACE(RIGHT(ndcpackagecode,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndcpackagecode,5) || '0' || REPLACE(RIGHT(ndcpackagecode,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndcpackagecode,10),'-','') || '0' || RIGHT(ndcpackagecode, 1)\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndcpackagecode,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n\t, package.productid\n\t, package.productndc\n\t, producttypename\n\t, proprietaryname\n\t, proprietarynamesuffix\n\t, nonproprietaryname\n\t, dosageformname\n\t, routename\n\t, product.startmarketingdate as product_startmarketingdate\n\t, product.endmarketingdate as product_endmarketingdate\n\t, marketingcategoryname\n\t, applicationnumber\n\t, labelername\n\t, substancename\n\t, active_numerator_strength\n\t, active_ingred_unit\n\t, pharm_classes\n\t, deaschedule\n\t, product.ndc_exclude_flag as product_ndc_exclude_flag\n\t, listing_record_certified_through\n\t, ndcpackagecode\n\t, packagedescription\n\t, package.startmarketingdate as package_startmarketingdate\n\t, package.endmarketingdate as package_endmarketingdate\n\t, package.ndc_exclude_flag as package_ndc_exclude_flag\n\t, sample_package\nfrom package\nleft join product\n\ton package.productid = product.productid", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.344682Z", "completed_at": "2025-02-06T18:34:29.349273Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.349776Z", "completed_at": "2025-02-06T18:34:29.349783Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0063741207122802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_ndc__substances", "compiled": true, "compiled_code": "-- stg_fda_ndc__substances.sql\n\nwith\n\nproduct as (\n    select * from \"sagerx\".\"sagerx_lake\".\"fda_ndc_product\"\n)\n\n, substancename_array as (\n\tselect\n\t\tproductid\n\t\t, substance\n\t\t, row_number() over(partition by productid) as substance_line\n\tfrom product, unnest(string_to_array(substancename, '; ')) as substance\n)\n\n, strength_array as (\n\tselect\n\t\tproductid\n\t\t, strength\n\t\t, row_number() over(partition by productid) as strength_line\n\tfrom product, unnest(string_to_array(active_numerator_strength, '; ')) as strength\n)\n\n, unit_array as (\n\tselect\n\t\tproductid\n\t\t, unit\n\t\t, row_number() over(partition by productid) as unit_line\n\tfrom product, unnest(string_to_array(active_ingred_unit, '; ')) as unit\n)\n\nselect\n\tsubstance.productid\n\t, substance.substance_line\n\t, substance.substance as substancename\n\t, strength.strength as active_numerator_strength\n\t, unit.unit as active_ingred_unit\nfrom substancename_array substance\ninner join strength_array strength\n\ton strength.productid = substance.productid\n\tand strength.strength_line = substance.substance_line\ninner join unit_array unit\n\ton unit.productid = substance.productid\n\tand unit.unit_line = substance.substance_line\norder by\n\tproductid\n\t, substance_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__substances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.352132Z", "completed_at": "2025-02-06T18:34:29.357345Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.357828Z", "completed_at": "2025-02-06T18:34:29.357835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0067942142486572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_unfinished__ndcs", "compiled": true, "compiled_code": "-- stg_fda_unfinished__ndcs.sql\n\nwith\n\nproduct as (\n    \n    select * from \"sagerx\".\"sagerx_lake\".\"fda_unfinished_product\"\n\n),\n\npackage as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"fda_unfinished_package\"\n\n)\n\nselect\n\t\n  \n  CASE WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN package.ndcpackagecode\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(package.ndcpackagecode,4) || REPLACE(RIGHT(package.ndcpackagecode,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(package.ndcpackagecode,5) || '0' || REPLACE(RIGHT(package.ndcpackagecode,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(package.ndcpackagecode,10),'-','') || '0' || RIGHT(package.ndcpackagecode, 1)\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(package.ndcpackagecode,'-','')\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN package.ndcpackagecode ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN package.ndcpackagecode ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN package.ndcpackagecode ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n\t, package.productid\n\t, package.productndc\n\t, producttypename\n\t, nonproprietaryname\n\t, dosageformname\n\t, product.startmarketingdate as product_startmarketingdate\n\t, product.endmarketingdate as product_endmarketingdate\n\t, marketingcategoryname\n\t, labelername\n\t, substancename\n\t, active_numerator_strength\n\t, active_ingred_unit\n\t, deaschedule\n\t, listing_record_certified_through\n\t, ndcpackagecode\n\t, packagedescription\n\t, package.startmarketingdate as package_startmarketingdate\n\t, package.endmarketingdate as package_endmarketingdate\nfrom package\nleft join product\n\ton package.productid = product.productid", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.360083Z", "completed_at": "2025-02-06T18:34:29.364104Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.364532Z", "completed_at": "2025-02-06T18:34:29.364538Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005468845367431641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_unfinished__substances", "compiled": true, "compiled_code": "-- stg_fda_unfinished__substances.sql\n\nwith\n\nproduct as (    \n    select * from \"sagerx\".\"sagerx_lake\".\"fda_unfinished_product\"\n)\n\n, substancename_array as (\n\tselect\n\t\tproductid\n\t\t, substance\n\t\t, row_number() over(partition by productid) as substance_line\n\tfrom product, unnest(string_to_array(substancename, '; ')) as substance\n)\n\n, strength_array as (\n\tselect\n\t\tproductid\n\t\t, strength\n\t\t, row_number() over(partition by productid) as strength_line\n\tfrom product, unnest(string_to_array(active_numerator_strength, '; ')) as strength\n)\n\n, unit_array as (\n\tselect\n\t\tproductid\n\t\t, unit\n\t\t, row_number() over(partition by productid) as unit_line\n\tfrom product, unnest(string_to_array(active_ingred_unit, '; ')) as unit\n)\n\nselect\n\tsubstance.productid\n\t, substance.substance_line\n\t, substance.substance as substancename\n\t, strength.strength as active_numerator_strength\n\t, unit.unit as active_ingred_unit\nfrom substancename_array substance\ninner join strength_array strength\n\ton strength.productid = substance.productid\n\tand strength.strength_line = substance.substance_line\ninner join unit_array unit\n\ton unit.productid = substance.productid\n\tand unit.unit_line = substance.substance_line\norder by\n\tproductid\n\t, substance_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__substances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.366579Z", "completed_at": "2025-02-06T18:34:29.370047Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.370457Z", "completed_at": "2025-02-06T18:34:29.370463Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004822254180908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_fda_unii__unii_codes", "compiled": true, "compiled_code": "-- stg_fda_unii__unii_codes.sql\n\nwith\n\nfda_unii as (\n    select * from \"sagerx\".\"sagerx_lake\".\"fda_unii\"\n)\n\nselect\n    unii\n    , display_name\n    , rxcui\n    , pubchem\n    , rn\n    , ncit\n    , ncbi\n    , dailymed\nfrom fda_unii", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_fda_unii__unii_codes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.372415Z", "completed_at": "2025-02-06T18:34:29.375737Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.376130Z", "completed_at": "2025-02-06T18:34:29.376137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004618167877197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_nadac__all_nadac", "compiled": true, "compiled_code": "-- stg_nadac__all_nadac.sql\n\nwith\n\nnadac as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"nadac\"\n\n)\n\nselect distinct \n\tndc\n\t, ndc_description\n\t, nadac_per_unit::numeric\n\t, pricing_unit\n\t, effective_date::date\nfrom nadac", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_nadac__all_nadac\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.378065Z", "completed_at": "2025-02-06T18:34:29.381366Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.381762Z", "completed_at": "2025-02-06T18:34:29.381768Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004592418670654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxclass__atc_codes_to_rxnorm_product_rxcuis", "compiled": true, "compiled_code": "-- stg_rxclass__atc_codes_to_rxnorm_product_rxcuis.sql\n\nwith atc_codes_to_rxnorm_product_rxcuis as (\n    \n    select * from \"sagerx\".\"sagerx_lake\".\"rxclass_atc_to_product\"\n\n)\n\nselect\n    *\nfrom atc_codes_to_rxnorm_product_rxcuis", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxclass__atc_codes_to_rxnorm_product_rxcuis\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.383626Z", "completed_at": "2025-02-06T18:34:29.387003Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.387371Z", "completed_at": "2025-02-06T18:34:29.387377Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004593610763549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__all_ndcs", "compiled": true, "compiled_code": "-- stg_rxnorm__all_ndcs.sql\n\nselect\n   \n  \n  CASE WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN rxnsat.atv\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(rxnsat.atv,4) || REPLACE(RIGHT(rxnsat.atv,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(rxnsat.atv,5) || '0' || REPLACE(RIGHT(rxnsat.atv,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(rxnsat.atv,10),'-','') || '0' || RIGHT(rxnsat.atv, 1)\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(rxnsat.atv,'-','')\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \nas ndc11\n    , rxnsat.atv as ndc\n    , rxnsat.rxcui\n    , rxnsat.sab\n\t, case when rxnsat.suppress = 'N' then true else false end as active\n\t, case when rxnsat.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnsat rxnsat\n    where rxnsat.atn = 'NDC'\n\tand rxnsat.sab in ('ATC', 'CVX', 'DRUGBANK', 'MSH', 'MTHCMSFRF', 'MTHSPL', 'RXNORM', 'USP', 'VANDF')", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__all_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.389159Z", "completed_at": "2025-02-06T18:34:29.391650Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.392017Z", "completed_at": "2025-02-06T18:34:29.392022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003675222396850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__atc_codes", "compiled": true, "compiled_code": "with atc as (\n\tselect distinct a.rxcui\n\t\t,a.code\n\t\t,b.atn\n\t\t,b.atv as atc_class_level\n\t\t,a.str as description\n\t\t,a.sab\n\t\t,a.tty\n\tfrom (\n\t\tselect *\n\t\tfrom sagerx_lake.rxnorm_rxnconso\n\t\twhere sab = 'ATC'\n\t\tand tty not like 'RXN%'\n\t\torder by code\n\t) a\n\tleft join sagerx_lake.rxnorm_rxnsat b\n\t\ton a.code= b.code\n\twhere atn = 'ATC_LEVEL'\n\torder by code\n)\n\n, atc_5 as (\n\tselect\n\t\t*\n\tfrom atc\n\twhere atc_class_level = '5'\n)\n\n, atc_4 as (\n\tselect\n\t\t*\n\tfrom atc\n\twhere atc_class_level = '4'\n)\n\n, atc_3 as (\n\tselect\n\t\t*\n\tfrom atc\n\twhere atc_class_level = '3'\n)\n\n, atc_2 as (\n\tselect\n\t\t*\n\tfrom atc\n\twhere atc_class_level = '2'\n)\n\n, atc_1 as (\n\tselect\n\t\t*\n\tfrom atc\n\twhere atc_class_level = '1'\n)\n\n, sagerx_atc as (\n\nselect\n\tatc_1.code as atc_1_code\n\t, atc_1.description as atc_1_name\n\t, atc_2.code as atc_2_code\n\t, atc_2.description as atc_2_name\n\t, atc_3.code as atc_3_code\n\t, atc_3.description as atc_3_name\n\t, atc_4.code as atc_4_code\n\t, atc_4.description as atc_4_name\n\t, atc_5.code as atc_5_code\n\t, atc_5.description as atc_5_name\n\t, atc_5.rxcui as ingredient_rxcui\n\t, atc_5.description as ingredient_name\n\t, atc_5.tty as ingredient_tty\n\nfrom atc_5\nleft join atc_4\n\ton left(atc_5.code, 5) = atc_4.code\nleft join atc_3\n\ton left(atc_4.code, 4) = atc_3.code\nleft join atc_2\n\ton left(atc_3.code, 3) = atc_2.code\nleft join atc_1\n\ton left(atc_2.code, 1) = atc_1.code\n)\n\t\nselect * \nfrom sagerx_atc", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__atc_codes\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.393769Z", "completed_at": "2025-02-06T18:34:29.397803Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.398182Z", "completed_at": "2025-02-06T18:34:29.398189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005247592926025391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__brand_product_component_links", "compiled": true, "compiled_code": "-- stg_rxnorm__brand_product_component_links.sql\n\nselect distinct\n\tproduct.rxcui as brand_product_rxcui\n\t, case when product_component.rxcui is null\n        then product.rxcui\n        else product_component.rxcui\n        end as brand_product_component_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n\ton rxnrel.rxcui1 = product_component.rxcui\n\tand product_component.tty in ('SBD', 'SCD') -- NOTE: BPCKs can contain SBDs AND SCDs\n\tand product_component.sab = 'RXNORM'\nwhere product.tty in ('SBD', 'BPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_component_links\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.400018Z", "completed_at": "2025-02-06T18:34:29.402593Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.402976Z", "completed_at": "2025-02-06T18:34:29.402983Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0038247108459472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__brand_product_components", "compiled": true, "compiled_code": "-- stg_rxnorm__brand_product_components.sql\n\nselect distinct\n\tcase when product.tty = 'SBD' then product.rxcui else product_component.rxcui end rxcui\n\t, case when product.tty = 'SBD' then product.str else product_component.str end name\n\t, case when product.tty = 'SBD' then product.tty else product_component.tty end tty\n\t, case when product_component.tty = 'SCD' then product_component.rxcui else rxnrel_scd.rxcui1 end clinical_product_component_rxcui\n\t, rxnrel_bn.rxcui1 as brand_rxcui\n\t, case when \n            case when product.tty = 'SBD'\n            then product.suppress\n            else product_component.suppress\n            end = 'N' \n        then true \n        else false\n        end as active\n\t, case when \n            case when product.tty = 'SBD'\n            then product.cvf\n            else product_component.cvf \n            end = '4096' \n        then true\n        else false\n        end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n\ton rxnrel.rxcui1 = product_component.rxcui\n\tand product_component.tty in ('SBD', 'SCD') -- NOTE: BPCKs can contain SBDs AND SCDs\n\tand product_component.sab = 'RXNORM'\nleft join sagerx_lake.rxnorm_rxnrel rxnrel_scd \n\ton rxnrel_scd.rxcui2 = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end \n\tand rxnrel_scd.rela = 'tradename_of' -- rxnrel_scd.rxcui1 = clinical_product_component_rxcui\nleft join sagerx_lake.rxnorm_rxnrel rxnrel_bn \n\ton rxnrel_bn.rxcui2 = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end \n\tand rxnrel_bn.rela = 'has_ingredient' -- rxnrel_bn.rxcui1 = brand_rxcui\nwhere product.tty in ('SBD', 'BPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_components\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.404806Z", "completed_at": "2025-02-06T18:34:29.407336Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.407701Z", "completed_at": "2025-02-06T18:34:29.407707Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0037353038787841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__brand_products", "compiled": true, "compiled_code": "-- stg_rxnorm__brand_products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n\t, clinical_product.rxcui as clinical_product_rxcui\n\t, case when product.suppress = 'N' then true else false end as active\n\t, case when product.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'tradename_of'\nleft join sagerx_lake.rxnorm_rxnconso clinical_product\n\ton rxnrel.rxcui1 = clinical_product.rxcui\n\tand clinical_product.tty in ('SCD', 'GPCK')\n\tand clinical_product.sab = 'RXNORM'\nwhere product.tty in('SBD', 'BPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.409500Z", "completed_at": "2025-02-06T18:34:29.411927Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.412287Z", "completed_at": "2025-02-06T18:34:29.412292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035965442657470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__brands", "compiled": true, "compiled_code": "-- stg_rxnorm__brands.sql\n\nwith cte as (\n\tselect\n\t\tsq.*\n\t\t, row_number() over(partition by rxcui order by ingredient_tty desc) as rn\n\tfrom (\n\n\t\tselect\n\t\t\tbrand.rxcui as rxcui\n\t\t\t, brand.str as name\n\t\t\t, brand.tty as tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso brand\n\t\tinner join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = brand.rxcui and rxnrel.rela = 'tradename_of'\n\t\tinner join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'IN'\n\t\t\tand ingredient.sab = 'RXNORM'\n\t\twhere brand.tty = 'BN'\n\t\t\tand brand.sab = 'RXNORM'\n\n\t\tunion all\n\n\t\tselect\n\t\t\tbrand.rxcui as rxcui\n\t\t\t, brand.str as name\n\t\t\t, brand.tty as tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso brand\n\t\tinner join sagerx_lake.rxnorm_rxnrel sbd_rxnrel on sbd_rxnrel.rxcui2 = brand.rxcui and sbd_rxnrel.rela = 'ingredient_of'\n\t\tinner join sagerx_lake.rxnorm_rxnrel scd_rxnrel on scd_rxnrel.rxcui2 = sbd_rxnrel.rxcui1 and scd_rxnrel.rela = 'tradename_of'\n\t\tinner join sagerx_lake.rxnorm_rxnrel ingredient_rxnrel on ingredient_rxnrel.rxcui2 = scd_rxnrel.rxcui1 and ingredient_rxnrel.rela = 'has_ingredients'\n\t\tleft join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton ingredient_rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'MIN'\n\t\t\tand ingredient.sab = 'RXNORM'\t\t\n\t\twhere brand.tty = 'BN'\n\t\t\tand brand.sab = 'RXNORM'\n\t) sq\n)\n\nselect distinct\n\tbrand.rxcui as rxcui\n\t, brand.str as name\n\t, brand.tty as tty\n\t, case when brand.suppress = 'N' then true else false end as active\n\t, case when brand.cvf = '4096' then true else false end as prescribable\n\t, cte.ingredient_rxcui as ingredient_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\ninner join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'has_ingredient'\ninner join sagerx_lake.rxnorm_rxnconso brand\n\ton rxnrel.rxcui1 = brand.rxcui\n\tand brand.tty = 'BN'\n\tand brand.sab = 'RXNORM'\nLeft join cte on cte.rxcui = brand.rxcui and cte.rn < 2\nwhere product.tty = 'SBD'\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brands\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.414056Z", "completed_at": "2025-02-06T18:34:29.416615Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.416990Z", "completed_at": "2025-02-06T18:34:29.416995Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003764629364013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__clinical_product_component_links", "compiled": true, "compiled_code": "-- stg_rxnorm__clinical_product_component_links.sql\n\nselect distinct\n\tproduct.rxcui as clinical_product_rxcui\n\t, case when product_component.rxcui is null\n        then product.rxcui \n        else product_component.rxcui \n        end as clinical_product_component_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n    on rxnrel.rxcui1 = product_component.rxcui\n    and product_component.tty = 'SCD'\n    and product_component.sab = 'RXNORM'\nwhere product.tty in('SCD', 'GPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.418788Z", "completed_at": "2025-02-06T18:34:29.421123Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.421489Z", "completed_at": "2025-02-06T18:34:29.421494Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003529071807861328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__clinical_product_components", "compiled": true, "compiled_code": "-- stg_rxnorm__clinical_product_components.sql\n\nwith cte as (\n\tselect\n\tsq.*,\n\trow_number() over(partition by product_component_rxcui order by ingredient_tty desc) as rn\n\tfrom (\n\t\tselect\n\t\t\tproduct_component.rxcui as product_component_rxcui\n\t\t\t, product_component.str as product_component_name\n\t\t\t, product_component.tty as product_component_tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso product_component\n\t\tinner join sagerx_lake.rxnorm_rxnrel rxnrel\n\t\t\ton rxnrel.rxcui2 = product_component.rxcui and rxnrel.rela = 'has_ingredients'\n\t\tinner join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'MIN'\n\t\t\tand ingredient.sab = 'RXNORM'\n\t\twhere product_component.tty = 'SCD'\n\t\t\tand product_component.sab = 'RXNORM'\n\n\t\tunion all\n\n\t\tselect\n\t\t\tproduct_component.rxcui as product_component_rxcui\n\t\t\t, product_component.str as product_component_name\n\t\t\t, product_component.tty as product_component_tty\n\t\t\t, ingredient.rxcui as ingredient_rxcui\n\t\t\t, ingredient.str as ingredient_name\n\t\t\t, ingredient.tty as ingredient_tty\n\t\tfrom sagerx_lake.rxnorm_rxnconso product_component\n\t\tinner join sagerx_lake.rxnorm_rxnrel scdc_rxnrel\n\t\t\ton scdc_rxnrel.rxcui2 = product_component.rxcui and scdc_rxnrel.rela = 'consists_of'\n\t\tinner join sagerx_lake.rxnorm_rxnconso scdc\n\t\t\ton scdc_rxnrel.rxcui1 = scdc.rxcui\n\t\tinner join sagerx_lake.rxnorm_rxnrel ingredient_rxnrel\n\t\t\ton ingredient_rxnrel.rxcui2 = scdc.rxcui and ingredient_rxnrel.rela = 'has_ingredient'\n\t\tinner join sagerx_lake.rxnorm_rxnconso ingredient\n\t\t\ton ingredient_rxnrel.rxcui1 = ingredient.rxcui\n\t\t\tand ingredient.tty = 'IN'\n\t\t\tand ingredient.sab = 'RXNORM'\n\t\twhere product_component.tty = 'SCD'\n\t\t\tand product_component.sab = 'RXNORM'\n\t) sq\n)\n\nselect distinct\n\tcase when product_component.rxcui is null then product.rxcui else product_component.rxcui end rxcui\n\t, case when product_component.str is null then product.str else product_component.str end name \n\t, case when product_component.tty is null then product.tty else product_component.tty end tty\n\t, case when \n\t\tcase when product_component.rxcui is null then product.suppress else product_component.suppress end = 'N' then true else false end as active\n\t, case when \n\t\tcase when product_component.rxcui is null then product.cvf else product_component.cvf end = '4096' then true else false end as prescribable\n\t, cte.ingredient_rxcui as ingredient_rxcui\n\t, dose_form_rxnrel.rxcui1 as dose_form_rxcui\nfrom sagerx_lake.rxnorm_rxnconso product\nleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnrel.rxcui2 = product.rxcui and rxnrel.rela = 'contains'\nleft join sagerx_lake.rxnorm_rxnconso product_component\n\ton rxnrel.rxcui1 = product_component.rxcui\n    and product_component.tty = 'SCD'\n    and product_component.sab = 'RXNORM'\nleft join cte \n\ton cte.product_component_rxcui = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end\n\tand cte.rn < 2\nleft join sagerx_lake.rxnorm_rxnrel dose_form_rxnrel\n\ton dose_form_rxnrel.rxcui2 = case when product_component.rxcui is null then product.rxcui else product_component.rxcui end\n\tand dose_form_rxnrel.rela = 'has_dose_form'\n\tand dose_form_rxnrel.sab = 'RXNORM'\nwhere product.tty in('SCD', 'GPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.423238Z", "completed_at": "2025-02-06T18:34:29.425625Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.425983Z", "completed_at": "2025-02-06T18:34:29.425988Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035512447357177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__clinical_products", "compiled": true, "compiled_code": "-- stg_rxnorm__clinical_products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n\t, case when product.suppress = 'N' then true else false end as active\n\t, case when product.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nwhere product.tty in('SCD', 'GPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.427741Z", "completed_at": "2025-02-06T18:34:29.430061Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.430423Z", "completed_at": "2025-02-06T18:34:29.430429Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003501415252685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__dose_form_group_links", "compiled": true, "compiled_code": "-- stg_rxnorm__dose_form_group_links.sql\n\nselect distinct\n\tdose_form.rxcui dose_form_rxcui\n\t, rxnrel.rxcui1 dose_form_group_rxcui\nfrom sagerx_lake.rxnorm_rxnconso dose_form\ninner join sagerx_lake.rxnorm_rxnrel rxnrel\n\ton rxnrel.rxcui2 = dose_form.rxcui\n\tand rxnrel.rela = 'isa'\n\tand rxnrel.sab = 'RXNORM'\nwhere dose_form.tty = 'DF'\n\tand dose_form.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_form_group_links\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.432176Z", "completed_at": "2025-02-06T18:34:29.434482Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.434843Z", "completed_at": "2025-02-06T18:34:29.434848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034856796264648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__dose_form_groups", "compiled": true, "compiled_code": "-- stg_rxnorm__dose_form_groups.sql\n\nselect\n\tdose_form_group.rxcui rxcui\n\t, dose_form_group.str name\n\t, dose_form_group.tty tty\n\t, case when dose_form_group.suppress = 'N' then true else false end as active\n\t, case when dose_form_group.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso dose_form_group\nwhere dose_form_group.tty = 'DFG'\n\tand dose_form_group.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_form_groups\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.436599Z", "completed_at": "2025-02-06T18:34:29.438949Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.439310Z", "completed_at": "2025-02-06T18:34:29.439315Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035109519958496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__dose_forms", "compiled": true, "compiled_code": "-- stg_rxnorm__dose_forms.sql\n\nselect\n\tdose_form.rxcui rxcui\n\t, dose_form.str name\n\t, dose_form.tty tty\n\t, case when dose_form.suppress = 'N' then true else false end as active\n\t, case when dose_form.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso dose_form\nwhere dose_form.tty = 'DF'\n\tand dose_form.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.441077Z", "completed_at": "2025-02-06T18:34:29.443485Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.443862Z", "completed_at": "2025-02-06T18:34:29.443867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003599405288696289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__ingredient_component_links", "compiled": true, "compiled_code": "-- stg_rxnorm__ingredient_component_links.sql\n\nwith cte as (\n\tselect\n\t\trxnrel.rxcui2 as ingredient_rxcui\n\t\t, ingredient_component.rxcui as ingredient_component_rxcui\n\t\t, ingredient_component.str as ingredient_component_name\n\t\t, ingredient_component.tty as ingredient_component_tty\n\tfrom\n\t\tsagerx_lake.rxnorm_rxnrel rxnrel\n\tinner join sagerx_lake.rxnorm_rxnconso ingredient_component\n\t\ton rxnrel.rxcui1 = ingredient_component.rxcui\n\twhere rxnrel.rela = 'has_part'\n\t\tand ingredient_component.tty = 'IN'\n\t\tand ingredient_component.sab = 'RXNORM'\n)\n\nselect distinct\n\tingredient.rxcui as ingredient_rxcui\n\t, case when cte.ingredient_component_rxcui is null\n        then ingredient.rxcui\n        else cte.ingredient_component_rxcui\n        end as ingredient_component_rxcui\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nleft join cte on ingredient.rxcui = cte.ingredient_rxcui\nwhere ingredient.tty in('IN', 'MIN')\n\tand ingredient.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_component_links\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.445615Z", "completed_at": "2025-02-06T18:34:29.448043Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.448405Z", "completed_at": "2025-02-06T18:34:29.448410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003600597381591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__ingredient_components", "compiled": true, "compiled_code": "-- stg_rxnorm__ingredient_components.sql\n\nwith cte as (\n\tselect\n\t\trxnrel.rxcui2 as ingredient_rxcui\n\t\t, ingredient_component.rxcui as rxcui\n\t\t, ingredient_component.str as name\n\t\t, ingredient_component.tty as tty\n\t\t, ingredient_component.suppress\n\t\t, ingredient_component.cvf\n\tfrom\n\t\tsagerx_lake.rxnorm_rxnrel rxnrel\n\tinner join sagerx_lake.rxnorm_rxnconso ingredient_component\n\t\ton rxnrel.rxcui1 = ingredient_component.rxcui\n\twhere rxnrel.rela = 'has_part'\n\t\tand ingredient_component.tty = 'IN'\n\t\tand ingredient_component.sab = 'RXNORM'\n)\n\nselect distinct\n\tcase when cte.rxcui is null then ingredient.rxcui else cte.rxcui end rxcui\n\t, case when cte.name is null then ingredient.str else cte.name end name\n\t, case when cte.tty is null then ingredient.tty else cte.tty end tty\n\t, case when \n\t\tcase when cte.rxcui is null then ingredient.suppress else cte.suppress end = 'N' then true else false end as active\n\t, case when \n\t\tcase when cte.rxcui is null then ingredient.cvf else cte.cvf end = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nleft join cte on ingredient.rxcui = cte.ingredient_rxcui\nwhere ingredient.tty in('IN', 'MIN')\n\tand ingredient.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_components\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.450154Z", "completed_at": "2025-02-06T18:34:29.452543Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.452910Z", "completed_at": "2025-02-06T18:34:29.452915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035660266876220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__ingredient_strength_links", "compiled": true, "compiled_code": "-- stg_rxnorm__ingredient_strength_links.sql\n\nselect distinct\n\tproduct_component.rxcui as clinical_product_component_rxcui\n\t, ingredient.rxcui as ingredient_component_rxcui\n\t, ingredient_strength.rxcui as ingredient_strength_rxcui\nfrom sagerx_lake.rxnorm_rxnconso ingredient_strength\ninner join sagerx_lake.rxnorm_rxnrel has_ingredient\n    on has_ingredient.rxcui2 = ingredient_strength.rxcui\n    and has_ingredient.rela = 'has_ingredient'\ninner join sagerx_lake.rxnorm_rxnconso ingredient\n\ton ingredient.rxcui = has_ingredient.rxcui1\n\tand ingredient.tty = 'IN'\n\tand ingredient.sab = 'RXNORM'\ninner join sagerx_lake.rxnorm_rxnrel constitutes\n    on constitutes.rxcui2 = ingredient_strength.rxcui\n    and constitutes.rela = 'constitutes'\ninner join sagerx_lake.rxnorm_rxnconso product_component\n\ton product_component.rxcui = constitutes.rxcui1\n\tand product_component.tty = 'SCD'\n\tand product_component.sab = 'RXNORM'\nwhere ingredient_strength.tty = 'SCDC'\n\tand ingredient_strength.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strength_links\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.454662Z", "completed_at": "2025-02-06T18:34:29.458688Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.459058Z", "completed_at": "2025-02-06T18:34:29.459064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005210399627685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__ingredient_strengths", "compiled": true, "compiled_code": "-- stg_rxnorm__ingredient_strengths.sql\n\nselect\n\tingredient_strength.rxcui as rxcui\n\t, ingredient_strength.str as name\n\t, numerator_value.atv as numerator_value\n\t, numerator_unit.atv as numerator_unit\n\t, denominator_value.atv as denominator_value\n\t, denominator_unit.atv as denominator_unit\n\t, text.atv as text\n\t, case when ingredient_strength.suppress = 'N'\n        then true\n        else false\n        end as active\n\t, case when ingredient_strength.cvf = '4096'\n        then true\n        else false\n        end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient_strength\nleft join sagerx_lake.rxnorm_rxnsat numerator_value\n    on numerator_value.rxcui = ingredient_strength.rxcui\n    and numerator_value.atn = 'RXN_BOSS_STRENGTH_NUM_VALUE'\nleft join sagerx_lake.rxnorm_rxnsat numerator_unit\n    on numerator_unit.rxcui = ingredient_strength.rxcui\n    and numerator_unit.atn = 'RXN_BOSS_STRENGTH_NUM_UNIT'\nleft join sagerx_lake.rxnorm_rxnsat denominator_value\n    on denominator_value.rxcui = ingredient_strength.rxcui\n    and denominator_value.atn = 'RXN_BOSS_STRENGTH_DENOM_VALUE'\nleft join sagerx_lake.rxnorm_rxnsat denominator_unit\n    on denominator_unit.rxcui = ingredient_strength.rxcui\n    and denominator_unit.atn = 'RXN_BOSS_STRENGTH_DENOM_UNIT'\nleft join sagerx_lake.rxnorm_rxnsat text\n    on text.rxcui = ingredient_strength.rxcui\n    and text.atn = 'RXN_STRENGTH'\nwhere ingredient_strength.tty = 'SCDC'\n\tand ingredient_strength.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strengths\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.460833Z", "completed_at": "2025-02-06T18:34:29.463069Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.463430Z", "completed_at": "2025-02-06T18:34:29.463435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034084320068359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__ingredients", "compiled": true, "compiled_code": "-- stg_rxnorm__ingredients.sql\n\nselect\n\tingredient.rxcui rxcui\n\t, ingredient.str name\n\t, ingredient.tty tty\n\t, case when ingredient.suppress = 'N' then true else false end as active\n\t, case when ingredient.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nwhere ingredient.tty in('IN', 'MIN')\n\tand ingredient.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.465174Z", "completed_at": "2025-02-06T18:34:29.468517Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.468879Z", "completed_at": "2025-02-06T18:34:29.468884Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004605293273925781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__mthspl_ndcs", "compiled": true, "compiled_code": "-- stg_rxnorm__mthspl_ndcs.sql\n\nselect\n    \n  \n  CASE WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN rxnsat.atv\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(rxnsat.atv,4) || REPLACE(RIGHT(rxnsat.atv,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(rxnsat.atv,5) || '0' || REPLACE(RIGHT(rxnsat.atv,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(rxnsat.atv,10),'-','') || '0' || RIGHT(rxnsat.atv, 1)\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(rxnsat.atv,'-','')\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN rxnsat.atv ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN rxnsat.atv ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN rxnsat.atv ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN rxnsat.atv ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11\n    , rxnsat.atv as ndc\n    , rxnsat.rxcui\n\t, case when rxnsat.suppress = 'N' then true else false end as active\n\t, case when rxnsat.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnsat rxnsat\n    where rxnsat.atn = 'NDC'\n        and rxnsat.sab = 'MTHSPL'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.470740Z", "completed_at": "2025-02-06T18:34:29.473199Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.473559Z", "completed_at": "2025-02-06T18:34:29.473565Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0036339759826660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__mthspl_products", "compiled": true, "compiled_code": "-- stg_rxnorm__mthspl_products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n\t, product.rxaui as rxaui\n\t, product.code as ndc\n\t, case when product.suppress = 'N' then true else false end as active\n\t, case when product.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso product\nwhere product.tty = 'DP'\n\tand product.sab = 'MTHSPL'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.475419Z", "completed_at": "2025-02-06T18:34:29.477718Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.478078Z", "completed_at": "2025-02-06T18:34:29.478084Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003588438034057617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__mthspl_substances", "compiled": true, "compiled_code": "-- stg_rxnorm__mthspl_substances.sql\n\nselect\n\tsubstance.rxcui rxcui\n\t, substance.str name\n\t, substance.tty tty\n\t, substance.rxaui rxaui\n\t, substance.code unii\n\t, case when substance.suppress = 'N' then true else false end as active\n\t, case when substance.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso substance\nwhere substance.tty = 'SU'\n\tand substance.sab = 'MTHSPL'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_substances\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.479816Z", "completed_at": "2025-02-06T18:34:29.482191Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.482545Z", "completed_at": "2025-02-06T18:34:29.482550Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035331249237060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__ndcs", "compiled": true, "compiled_code": "-- stg_rxnorm__ndcs.sql\n\nselect rxnsat.atv as ndc\n\t,case when product.tty in ('BPCK','SBD') then clinical_product.rxcui\n\t\telse rxnsat.rxcui end as clinical_product_rxcui\t\t\n\t,case when product.tty in ('BPCK','SBD') then rxnsat.rxcui\n\t\telse null end as brand_product_rxcui\n\t, case when rxnsat.suppress = 'N' then true else false end as active\n\t, case when rxnsat.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnsat rxnsat\n\tinner join sagerx_lake.rxnorm_rxnconso product on rxnsat.rxaui = product.rxaui\n\tleft join sagerx_lake.rxnorm_rxnrel rxnrel on rxnsat.rxcui = rxnrel.rxcui2 and rela = 'tradename_of' and product.tty in ('BPCK','SBD')\n\tleft join sagerx_lake.rxnorm_rxnconso clinical_product\n\t\ton rxnrel.rxcui1 = clinical_product.rxcui\n\t\tand clinical_product.tty in ('SCD','GPCK')\n\t\tand clinical_product.sab = 'RXNORM'\nwhere rxnsat.atn = 'NDC'\n\tand rxnsat.sab in ('ATC', 'CVX', 'DRUGBANK', 'MSH', 'MTHCMSFRF', 'MTHSPL', 'RXNORM', 'USP', 'VANDF')\n\tand product.tty in ('SCD','SBD','GPCK','BPCK')\n\tand product.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.484310Z", "completed_at": "2025-02-06T18:34:29.486686Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.487053Z", "completed_at": "2025-02-06T18:34:29.487058Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035669803619384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__precise_ingredient_links", "compiled": true, "compiled_code": "-- stg_rxnorm__precise_ingredient_links.sql\n\nselect distinct\n\tingredient_strength.rxcui as ingredient_strength_rxcui\n\t, precise_ingredient.rxcui as precise_ingredient_rxcui\nfrom sagerx_lake.rxnorm_rxnconso precise_ingredient\ninner join sagerx_lake.rxnorm_rxnrel precise_ingredient_of\n    on precise_ingredient_of.rxcui2 = precise_ingredient.rxcui\n    and precise_ingredient_of.rela = 'precise_ingredient_of'\ninner join sagerx_lake.rxnorm_rxnconso ingredient_strength\n\ton ingredient_strength.rxcui = precise_ingredient_of.rxcui1\n\tand ingredient_strength.tty = 'SCDC'\n\tand ingredient_strength.sab = 'RXNORM'\nwhere precise_ingredient.tty = 'PIN'\n\tand precise_ingredient.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__precise_ingredient_links\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.488826Z", "completed_at": "2025-02-06T18:34:29.491306Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.491670Z", "completed_at": "2025-02-06T18:34:29.491676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0036678314208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__precise_ingredients", "compiled": true, "compiled_code": "-- stg_rxnorm__precise_ingredients.sql\n\nselect\n\tingredient.rxcui rxcui\n\t, ingredient.str name\n\t, ingredient.tty tty\n\t, case when ingredient.suppress = 'N' then true else false end as active\n\t, case when ingredient.cvf = '4096' then true else false end as prescribable\nfrom sagerx_lake.rxnorm_rxnconso ingredient\nwhere ingredient.tty = 'PIN'\n\tand ingredient.sab = 'RXNORM'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__precise_ingredients\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.493419Z", "completed_at": "2025-02-06T18:34:29.496483Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.496841Z", "completed_at": "2025-02-06T18:34:29.496846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004227638244628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__product_rxcuis", "compiled": true, "compiled_code": "-- stg_rxnorm__product_rxcuis\n\nselect * from \"sagerx\".\"sagerx_lake\".\"rxnorm_rxnconso\"\nwhere sab = 'RXNORM'\n    and tty in ('SCD', 'SBD', 'GPCK', 'BPCK')", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__product_rxcuis\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.498582Z", "completed_at": "2025-02-06T18:34:29.501821Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.502194Z", "completed_at": "2025-02-06T18:34:29.502199Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0044193267822265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm_historical__ndcs", "compiled": true, "compiled_code": "-- stg_rxnorm_historical__ndcs.sql\n\nselect\n    *\nfrom \"sagerx\".\"sagerx_lake\".\"rxnorm_historical\"", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm_historical__ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.503937Z", "completed_at": "2025-02-06T18:34:29.507202Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.507555Z", "completed_at": "2025-02-06T18:34:29.507560Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00442814826965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxterms__names", "compiled": true, "compiled_code": "with\n\nrxterms as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"rxterms\"\n    \n)\n\nselect distinct\n    display_name as name\n    , display_name_synonym as synonyms\nfrom rxterms\nwhere suppress_for is null \n    and is_retired is null", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxterms__names\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.509289Z", "completed_at": "2025-02-06T18:34:29.512319Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.512676Z", "completed_at": "2025-02-06T18:34:29.512682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004183530807495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxterms__strengths", "compiled": true, "compiled_code": "with\n\nrxterms as (\n\n    select * from \"sagerx\".\"sagerx_lake\".\"rxterms\"\n    \n)\n\nselect distinct\n    rxcui\n    , display_name as name\n    , concat(strength, ' ', new_dose_form) as strength\nfrom rxterms\nwhere suppress_for is null \n    and is_retired is null", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxterms__strengths\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.514408Z", "completed_at": "2025-02-06T18:34:29.516128Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.516486Z", "completed_at": "2025-02-06T18:34:29.516491Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003020763397216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.sagerx.usp_preservatives", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.518407Z", "completed_at": "2025-02-06T18:34:29.522025Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.522388Z", "completed_at": "2025-02-06T18:34:29.522394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0048007965087890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_dailymed_organization_metrics", "compiled": true, "compiled_code": "/* intermediate.int_dailymed_organization_metrics */\n\nwith dailymed_main as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__main\"\n),\n\ndailymed_organizations as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__organizations\"\n),\n\ndailymed_organization_texts as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__organization_texts\"\n)\n\nselect o.set_id\n\t, ma.market_status\n\t, sum(case when org_type = 'Functioner' then 1 else 0 end) as functioner_count\n\t, sum(case when org_type = 'Labeler' then 1 else 0 end) as labeler_count\n\t, sum(case when org_type = 'Repacker' then 1 else 0 end) as repacker_count\n\t, case when sum(case when ot.set_id is not null then 1 else 0 end) > 0 then 'Yes' else '' end as organization_text\n\t, case when sum(case when org_type = 'Labeler' then 1 else 0 end) = 1 \n\t\t\t\tand sum(case when org_type = 'Functioner' then 1 else 0 end) = 0\n\t\t\tthen 'yes' else '' end as labeler_only\n\t, count(*)\nfrom dailymed_main ma\n\tinner join dailymed_organizations o\n        on o.set_id = ma.set_id\n\tleft join dailymed_organization_texts ot\n        on o.set_id = ot.set_id\ngroup by o.set_id, ma.market_status", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_dailymed_organization_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.524192Z", "completed_at": "2025-02-06T18:34:29.528829Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.529200Z", "completed_at": "2025-02-06T18:34:29.529206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058672428131103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__package_label_section_images", "compiled": true, "compiled_code": "/* stg_dailymed__package_label_section_images */\n\nwith\n\npackage_label_sections as\n(\n\tselect * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_sections\"\n),\n\nimages as (\n\n\tselect\n\t\tp.set_id,\n\t\tp.id as package_label_section_id,\n\t\ty.*\n\tfrom package_label_sections p,\n\t\txmltable(\n\t\t\t'//MediaList/Media' passing media_list\n\t\t\tcolumns \n\t\t\t\timage \t\ttext  path 'Image',\n\t\t\t\timage_id  \ttext  path 'ID'\n\t\t) y\n\n),\n\nid_images as (\n\n\tselect\n\t\trow_number() over() as id,\n\t\t*\n\tfrom images\n\n)\n\nselect * from id_images", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_section_images\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.530979Z", "completed_at": "2025-02-06T18:34:29.534053Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.534427Z", "completed_at": "2025-02-06T18:34:29.534432Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004269599914550781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_dailymed__package_label_section_ndcs", "compiled": true, "compiled_code": "/* stg_dailymed__package_label_section_ndcs */\n\nwith\n\npackage_label_sections as\n(\n\tselect * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_sections\"\n),\n\nndcs as (\n\n\tselect\n\t\tp.set_id,\n\t\tp.id as package_label_section_id,\n\t\t-- TODO: account for NDCs with spaces instead of dashes\n\t\t-- example ndc 55292 140 01\n\t\t-- example set_id a0aad470-3f38-af97-e053-2995a90a383a\n\t\tregexp_replace(regexp_replace((regexp_matches(p.text, '(?:\\d{4}|\\d{5})\\s*(?:-|\u2013)\\s*\\d{3,6}\\s*(?:-|\u2013)\\s*\\d{1,2}|\\d{11}|\\d{10}', 'g'))[1], '\\s', '', 'g'), '\u2013', '-') as ndc\n\tfrom package_label_sections p\n\n),\n\nid_ndcs as (\n\n\tselect\n\t\trow_number() over() as id,\n\t\t*\n\tfrom ndcs\n\n)\n\nselect * from id_ndcs", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_section_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.536218Z", "completed_at": "2025-02-06T18:34:29.549100Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.549468Z", "completed_at": "2025-02-06T18:34:29.549474Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014084100723266602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_fda_excluded__ndcs_ndc11.f9b06099d2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc11\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__ndcs\"\nwhere ndc11 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.551245Z", "completed_at": "2025-02-06T18:34:29.557728Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.558089Z", "completed_at": "2025-02-06T18:34:29.558095Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0076715946197509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_fda_excluded__ndcs_ndc11.fcedc4532b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ndc11 as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__ndcs\"\nwhere ndc11 is not null\ngroup by ndc11\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.559854Z", "completed_at": "2025-02-06T18:34:29.562746Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.563102Z", "completed_at": "2025-02-06T18:34:29.563108Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0040705204010009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.ndc_associations", "compiled": true, "compiled_code": "-- ndc_associations\n\nselect * from \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndc_associations\"", "relation_name": "\"sagerx\".\"sagerx_dev\".\"ndc_associations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.564822Z", "completed_at": "2025-02-06T18:34:29.568058Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.568405Z", "completed_at": "2025-02-06T18:34:29.568410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00437164306640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.gtins", "compiled": true, "compiled_code": "-- gtins.sql\n\nwith\n\nndcs as (\n\n    select\n        ndc11,\n        replace(ndcpackagecode, '-', '') as ndc10,\n        ndcpackagecode as ndc,\n        concat(\n            '003',\n            replace(ndcpackagecode,'-', '')\n        ) as gtin13,\n        concat(\n            '3',\n            replace(ndcpackagecode,'-', '')\n        ) as gtin11,\n        concat(\n            '03',\n            split_part(ndcpackagecode, '-', 1)\n        ) as gs1_company_prefix\n\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\n\n),\n\ndigits as (\n\n    -- split the 13-digit number into individual digits\n    select \n        ndc,\n        position,\n        substring(gtin13 from position for 1)::int as digit\n    from ndcs,\n        generate_series(1, 13) as position\n\n),\n\nproducts as (\n\n    -- apply the alternating multiplication rule\n    select \n        *,\n        case\n            when position % 2 = 1\n                then digit * 3\n            else digit * 1 \n        end as product\n    from digits\n\n),\n\nsums as (\n\n    -- sum of the products of each digit\n    select\n        ndc,\n        sum(product) as sum\n    from products\n    group by ndc\n\n),\n\ncheck_digits as (\n\n    -- round the sum to the nearest 10 and subtract the sum\n    select\n        ndc,\n        ceil(sum / 10.0) * 10 - sum as check_digit\n    from sums\n\n),\n\ngtin14s as (\n\n    -- concatenate the gtin13 and check_digit\n    select\n        ndc11,\n        ndc10,\n        ndcs.ndc,\n        concat(\n            gtin13,\n            check_digit\n        ) as gtin14,\n        concat(\n            gtin11,\n            check_digit\n        ) as gtin12,\n        gs1_company_prefix\n    from ndcs\n    left join check_digits\n        on check_digits.ndc = ndcs.ndc\n\n)\n\nselect * from gtin14s", "relation_name": "\"sagerx\".\"sagerx_dev\".\"gtins\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.570132Z", "completed_at": "2025-02-06T18:34:29.573678Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.574033Z", "completed_at": "2025-02-06T18:34:29.574038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004868030548095703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_fda_ndc_to_te", "compiled": true, "compiled_code": "-- DISCLAIMER: This model is under development and incomplete.\n\nwith cte as (\n    select\n        fda.ndc11\n        , obp.te_code\n        , count(fda.ndc11) over( partition by fda.ndc11 ) as num_te_codes\n    from \"sagerx\".\"sagerx_lake\".\"orange_book_products\" as obp\n    inner join \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\" as fda \n        on concat(case when obp.appl_type = 'A' then 'ANDA' else 'NDA' end, obp.appl_no) = fda.applicationnumber\n    group by fda.ndc11, obp.te_code\n)\nselect\n    fda.ndc11\n    , fda.applicationnumber as application_number\n    , cte.te_code\n    , left(cte.te_code, 2) as first_two_te_code\n    , left(cte.te_code, 1) as first_one_te_code\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\" as fda \ninner join cte \n    on fda.ndc11 = cte.ndc11 \n    and cte.num_te_codes = 1", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_fda_ndc_to_te\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.576011Z", "completed_at": "2025-02-06T18:34:29.580040Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.580399Z", "completed_at": "2025-02-06T18:34:29.580405Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052525997161865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_fda_ndc__ndcs_ndc11.7680fa8975", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc11\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\nwhere ndc11 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.582158Z", "completed_at": "2025-02-06T18:34:29.586172Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.586535Z", "completed_at": "2025-02-06T18:34:29.586540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0051915645599365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_fda_ndc__ndcs_ndc11.8b4e77e239", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ndc11 as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\nwhere ndc11 is not null\ngroup by ndc11\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.588303Z", "completed_at": "2025-02-06T18:34:29.592896Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.593261Z", "completed_at": "2025-02-06T18:34:29.593266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057830810546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_fda_packaging_components", "compiled": true, "compiled_code": "\n\nwith \n\nall_fda as (\n\tselect ndc11, packagedescription\n\tfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\n\n\tunion all\n\n\tselect ndc11, packagedescription\n\tfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__ndcs\"\n\n\tunion all\n\n\tselect ndc11, packagedescription\n\tfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__ndcs\"\n),\n\nsplit_components as (\n\tselect\n\t\tz.ndc11\n\t\t, z.packagedescription\n\t\t, z.ordinality as component_line\n\t\t, trim(z.token) as component_text\n\tfrom (\n\t\tselect distinct \n\t\t\tall_fda.ndc11\n\t\t\t, all_fda.packagedescription\n\t\t\t, s.token\n\t\t\t, s.ordinality\n\t\tfrom\n\t\t\tall_fda\n\t\t\t, unnest(\n\t\t\t\tstring_to_array(\n\t\t\t\t\tregexp_replace(\n\t\t\t\t\t\tall_fda.packagedescription\n\t\t\t\t\t\t, '(?<!\\*.*)\\/'\n\t\t\t\t\t\t, ' | '\n\t\t\t\t\t\t, 'g')\n\t\t\t\t\t, '|')\n\t\t\t\t) with ordinality as s(token, ordinality)\n\t) z\n\torder by ndc11, component_line\n),\n\ninner_outer_text as (\n\tselect\n\t\tc.*\n\t\t, trim(substring(component_text from '(.*) in ')) as inner_text\n\t\t, trim(substring(component_text from ' in (.*?)(?:\\(|$)')) as outer_text\n\t\t, trim(substring(component_text from '\\((.+)\\)')) as outer_ndc\n\tfrom split_components c\n),\n\ninner_outer_value_unit as (\n\n\tselect\n\t\t*\n\t\t, \n  \n  CASE WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN outer_ndc\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(outer_ndc,4) || REPLACE(RIGHT(outer_ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(outer_ndc,5) || '0' || REPLACE(RIGHT(outer_ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(outer_ndc,10),'-','') || '0' || RIGHT(outer_ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(outer_ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN outer_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN outer_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN outer_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN outer_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as outer_ndc11\n\t\t, (regexp_match(inner_text, '^([^ ]+) (.+)'))[1]::numeric as inner_value\n\t\t, (regexp_match(inner_text, '^([^ ]+) (.+)'))[2] as inner_unit\n\t\t, (regexp_match(outer_text, '^([^ ]+) (.+)'))[1]::numeric as outer_value\n\t\t, (regexp_match(outer_text, '^([^ ]+) (.+)'))[2] as outer_unit\n\tfrom inner_outer_text\n\n),\n\ninner_outer_product as (\n\n\tselect\n\t\t*,\n\t\t(inner_value * outer_value)::numeric as product\n\tfrom inner_outer_value_unit\n\n),\n\ntotal_product as (\n\n\tselect\n\t\tndc11,\n\t\tarray_product(array_agg(product)) as total_product\n\tfrom inner_outer_product\n\twhere product > 0\n\tgroup by ndc11\n\n),\n\nfinal as (\n\n\tselect\n\t\ttotal_product,\n\t\tinner_outer_value_unit.*\n\tfrom inner_outer_value_unit\n\tleft join total_product\n\t\ton total_product.ndc11 = inner_outer_value_unit.ndc11\n\n)\n\nselect \n\t*\nfrom final", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_fda_packaging_components\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.595029Z", "completed_at": "2025-02-06T18:34:29.599073Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.599439Z", "completed_at": "2025-02-06T18:34:29.599445Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00522160530090332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_fda_unfinished__ndcs_ndc11.0257f0c5fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc11\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__ndcs\"\nwhere ndc11 is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.601209Z", "completed_at": "2025-02-06T18:34:29.606921Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.607290Z", "completed_at": "2025-02-06T18:34:29.607296Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0069026947021484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_fda_unfinished__ndcs_ndc11.dd8892c8c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ndc11 as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__ndcs\"\nwhere ndc11 is not null\ngroup by ndc11\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.609057Z", "completed_at": "2025-02-06T18:34:29.612287Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.612650Z", "completed_at": "2025-02-06T18:34:29.612656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004400968551635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_nadac__enhanced_nadac", "compiled": true, "compiled_code": "-- stg_nadac__enhanced_nadac.sql\n\nwith\n\nall_nadac as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_nadac__all_nadac\"\n\n),\n\nnadac as (\n\t\n\tselect ndc\n\t\t, ndc_description\n\t\t, row_number() over (partition by ndc order by effective_date desc) as price_line\n\t\t, effective_date as price_start_date\n\t\t, lag(effective_date, 1) over (partition by ndc order by effective_date desc) price_end_date\n\t\t, nadac_per_unit\n\t\t, pricing_unit\n\t\tfrom all_nadac\n\n)\n\nselect\n\tndc\n\t, ndc_description\n\t, price_line\n\t, nadac_per_unit\n\t, pricing_unit \n\t, price_start_date\n\t, case when price_line = 1 then true else false end as most_recent_price\n\t, case when price_line = first_value(price_line) over (partition by ndc order by price_line desc) then true else false end as first_price\n\t, (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) as dollar_change\n\t, (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) /\n\t\tlag(nadac_per_unit) over (partition by ndc order by price_line desc) as percent_change\n\t, case when (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) > 0 then 1\n\t\twhen (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) = 0 then 0\n\t\twhen (nadac_per_unit - lag(nadac_per_unit) over (partition by ndc order by price_line desc)) is null then null\n\t\telse -1 end as change_type\nfrom nadac", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_nadac__enhanced_nadac\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.614403Z", "completed_at": "2025-02-06T18:34:29.618468Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.618833Z", "completed_at": "2025-02-06T18:34:29.618839Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005242824554443359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_nadac__all_nadac_ndc.13fad59845", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc\nfrom \"sagerx\".\"sagerx_dev\".\"stg_nadac__all_nadac\"\nwhere ndc is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.620619Z", "completed_at": "2025-02-06T18:34:29.624875Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.625281Z", "completed_at": "2025-02-06T18:34:29.625286Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005505800247192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_nadac__all_nadac_ndc_description.d0df11974f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc_description\nfrom \"sagerx\".\"sagerx_dev\".\"stg_nadac__all_nadac\"\nwhere ndc_description is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.627095Z", "completed_at": "2025-02-06T18:34:29.630236Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.630642Z", "completed_at": "2025-02-06T18:34:29.630648Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004388332366943359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_all_ndcs_to_product_rxcuis", "compiled": true, "compiled_code": "with all_ndcs as\n(\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__all_ndcs\"\n),\n\nproduct_rxcuis as\n(\n    select * from sagerx_lake.rxnorm_rxnconso\n    where sab = 'RXNORM'\n        and tty in ('SCD', 'SBD', 'GPCK', 'BPCK')\n)\n\nselect distinct\n    all_ndcs.ndc11\n    , product_rxcuis.rxcui\nfrom all_ndcs\ninner join product_rxcuis\n    on all_ndcs.rxcui = product_rxcuis.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_all_ndcs_to_product_rxcuis\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.632540Z", "completed_at": "2025-02-06T18:34:29.637191Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.637597Z", "completed_at": "2025-02-06T18:34:29.637603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00594639778137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_component_rxcui.9f497ef16e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect brand_product_component_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_component_links\"\nwhere brand_product_component_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.639483Z", "completed_at": "2025-02-06T18:34:29.644004Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.644402Z", "completed_at": "2025-02-06T18:34:29.644408Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005802154541015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_component_links_brand_product_rxcui.6135a1fa50", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect brand_product_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_component_links\"\nwhere brand_product_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.646277Z", "completed_at": "2025-02-06T18:34:29.650689Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.651086Z", "completed_at": "2025-02-06T18:34:29.651091Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00568842887878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_components_clinical_product_component_rxcui.25fdaf356b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clinical_product_component_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_components\"\nwhere clinical_product_component_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.653026Z", "completed_at": "2025-02-06T18:34:29.657391Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.657774Z", "completed_at": "2025-02-06T18:34:29.657782Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005645275115966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_product_components_rxcui.4917a3f0ca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_components\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.659629Z", "completed_at": "2025-02-06T18:34:29.663809Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.664195Z", "completed_at": "2025-02-06T18:34:29.664202Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005438566207885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__brand_product_components_rxcui.cd3b918573", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_product_components\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.666032Z", "completed_at": "2025-02-06T18:34:29.670327Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.670702Z", "completed_at": "2025-02-06T18:34:29.670708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055310726165771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__brand_products_rxcui.634ef0c2ff", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.672523Z", "completed_at": "2025-02-06T18:34:29.676669Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.677040Z", "completed_at": "2025-02-06T18:34:29.677046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005367279052734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__brands_rxcui.d067686860", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brands\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.678842Z", "completed_at": "2025-02-06T18:34:29.684735Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.685115Z", "completed_at": "2025-02-06T18:34:29.685122Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007127046585083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__brand_products_rxcui.da77867bbd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.686916Z", "completed_at": "2025-02-06T18:34:29.690920Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.691287Z", "completed_at": "2025-02-06T18:34:29.691292Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005209684371948242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__brands_rxcui.a2c8cd0cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brands\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.693148Z", "completed_at": "2025-02-06T18:34:29.697465Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.697855Z", "completed_at": "2025-02-06T18:34:29.697860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00558018684387207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_component_rxcui.869196279f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clinical_product_component_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\nwhere clinical_product_component_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.699773Z", "completed_at": "2025-02-06T18:34:29.704092Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.704479Z", "completed_at": "2025-02-06T18:34:29.704484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005629539489746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_product_component_links_clinical_product_rxcui.94c75bf656", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clinical_product_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\nwhere clinical_product_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.706324Z", "completed_at": "2025-02-06T18:34:29.710433Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.710813Z", "completed_at": "2025-02-06T18:34:29.710818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0053517818450927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_product_components_rxcui.0b9c81f7ae", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.712690Z", "completed_at": "2025-02-06T18:34:29.716712Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.717094Z", "completed_at": "2025-02-06T18:34:29.717099Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005260944366455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__clinical_product_components_rxcui.2705e1f418", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.718894Z", "completed_at": "2025-02-06T18:34:29.722971Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.723341Z", "completed_at": "2025-02-06T18:34:29.723346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052890777587890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm__products", "compiled": true, "compiled_code": "-- stg_rxnorm__products.sql\n\nselect\n\tproduct.rxcui as rxcui\n\t, product.str as name\n\t, product.tty as tty\n    , case\n        when brand_product.rxcui is not null then brand_product.clinical_product_rxcui\n        else product.rxcui\n        end as clinical_product_rxcui\n\t, case\n        when product.suppress = 'N' then true\n        else false\n        end as active\n\t, case \n        when product.cvf = '4096' then true \n        else false\n        end as prescribable\nfrom \"sagerx\".\"sagerx_lake\".\"rxnorm_rxnconso\" product\nleft join \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\" brand_product\n    on product.rxcui = brand_product.rxcui\nwhere product.tty in('SCD', 'GPCK', 'SBD', 'BPCK')\n\tand product.sab = 'RXNORM'\n\n/*\nwith\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrbp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\"\n\n)\n\nselect distinct\n    coalesce(rbp.rxcui, rcp.rxcui, null) as product_rxcui\n    , coalesce(rbp.name, rcp.name, null) as product_name\n    , coalesce(rbp.tty, rcp.tty, null) as product_tty\n    , rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\nfrom rcp\nleft join rbp\n    on rbp.clinical_product_rxcui = rcp.rxcui\n*/", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm__products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.725160Z", "completed_at": "2025-02-06T18:34:29.729214Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.729590Z", "completed_at": "2025-02-06T18:34:29.729596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005276679992675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__clinical_products_rxcui.5dd04a1235", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.731507Z", "completed_at": "2025-02-06T18:34:29.735555Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.735934Z", "completed_at": "2025-02-06T18:34:29.735940Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005391597747802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__clinical_products_rxcui.0bac3cbe9c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.737773Z", "completed_at": "2025-02-06T18:34:29.742060Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.742443Z", "completed_at": "2025-02-06T18:34:29.742448Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005538463592529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_group_rxcui.f4fde7102f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dose_form_group_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_form_group_links\"\nwhere dose_form_group_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.744285Z", "completed_at": "2025-02-06T18:34:29.748323Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.748703Z", "completed_at": "2025-02-06T18:34:29.748708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005285739898681641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_form_group_links_dose_form_rxcui.3fdd0d4bb1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dose_form_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_form_group_links\"\nwhere dose_form_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.750516Z", "completed_at": "2025-02-06T18:34:29.754540Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.754913Z", "completed_at": "2025-02-06T18:34:29.754918Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005248546600341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_form_groups_rxcui.eca504df20", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_form_groups\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.756719Z", "completed_at": "2025-02-06T18:34:29.762444Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.762821Z", "completed_at": "2025-02-06T18:34:29.762827Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006953001022338867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__dose_form_groups_rxcui.b2e6200e1b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_form_groups\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.764671Z", "completed_at": "2025-02-06T18:34:29.768682Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.769064Z", "completed_at": "2025-02-06T18:34:29.769070Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005251407623291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_dose_forms", "compiled": true, "compiled_code": "-- int_rxnorm_clinical_products_to_dose_forms.sql\n\nwith\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrcpcl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\n\n),\n\nrcpc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\n\n),\n\nrdf as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_dose_forms\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.770872Z", "completed_at": "2025-02-06T18:34:29.774887Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.775261Z", "completed_at": "2025-02-06T18:34:29.775266Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052301883697509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__dose_forms_rxcui.a06bc0be08", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.777122Z", "completed_at": "2025-02-06T18:34:29.781092Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.781464Z", "completed_at": "2025-02-06T18:34:29.781470Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005189657211303711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__dose_forms_rxcui.c7fb3a8da2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.783303Z", "completed_at": "2025-02-06T18:34:29.787621Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.788017Z", "completed_at": "2025-02-06T18:34:29.788022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055828094482421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_component_rxcui.a6923961b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_component_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_component_links\"\nwhere ingredient_component_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.789878Z", "completed_at": "2025-02-06T18:34:29.794184Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.794568Z", "completed_at": "2025-02-06T18:34:29.794573Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0055620670318603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_component_links_ingredient_rxcui.303404889c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_component_links\"\nwhere ingredient_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.796414Z", "completed_at": "2025-02-06T18:34:29.805092Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.805477Z", "completed_at": "2025-02-06T18:34:29.805482Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009930849075317383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.accepted_values_stg_rxnorm__ingredient_components_tty__IN.5d941aec74", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        tty as value_field,\n        count(*) as n_records\n\n    from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_components\"\n    group by tty\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'IN'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.807313Z", "completed_at": "2025-02-06T18:34:29.811368Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.811757Z", "completed_at": "2025-02-06T18:34:29.811763Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005303859710693359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_components_rxcui.aed8b0d4c5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_components\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.813564Z", "completed_at": "2025-02-06T18:34:29.817523Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.817897Z", "completed_at": "2025-02-06T18:34:29.817903Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005179405212402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__ingredient_components_rxcui.75f7804348", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_components\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.819749Z", "completed_at": "2025-02-06T18:34:29.824013Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.824461Z", "completed_at": "2025-02-06T18:34:29.824467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005590200424194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_clinical_product_component_rxcui.6be28272b5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect clinical_product_component_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strength_links\"\nwhere clinical_product_component_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.826339Z", "completed_at": "2025-02-06T18:34:29.830689Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.831081Z", "completed_at": "2025-02-06T18:34:29.831086Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005621671676635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_component_rxcui.fec66d7333", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_component_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strength_links\"\nwhere ingredient_component_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.832955Z", "completed_at": "2025-02-06T18:34:29.838987Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.839377Z", "completed_at": "2025-02-06T18:34:29.839383Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0073010921478271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strength_links_ingredient_strength_rxcui.3527b30bda", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingredient_strength_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strength_links\"\nwhere ingredient_strength_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.841360Z", "completed_at": "2025-02-06T18:34:29.845404Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.845782Z", "completed_at": "2025-02-06T18:34:29.845788Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005409955978393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredient_strengths_rxcui.d4a27e753c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strengths\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.847579Z", "completed_at": "2025-02-06T18:34:29.851591Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.851998Z", "completed_at": "2025-02-06T18:34:29.852004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005263805389404297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__ingredient_strengths_rxcui.716f558a6b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strengths\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.853852Z", "completed_at": "2025-02-06T18:34:29.859059Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.859452Z", "completed_at": "2025-02-06T18:34:29.859457Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006471395492553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ingredient_components", "compiled": true, "compiled_code": "-- int_rxnorm_clinical_products_to_ingredient_components.sql\n\nwith\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrcpcl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\n\n),\n\nrcpc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\n\n),\n\nrdf as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\n\n),\n\nri as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\"\n\n),\n\nricl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_component_links\"\n\n),\n\nric as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_components\"\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_component_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , ric.rxcui as ingredient_component_rxcui\n    , ric.name as ingredient_component_name\n    , ric.tty as ingredient_component_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \nleft join ricl \n    on ri.rxcui = ricl.ingredient_rxcui \nleft join ric \n    on ricl.ingredient_component_rxcui = ric.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_ingredient_components\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.861364Z", "completed_at": "2025-02-06T18:34:29.865732Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.866117Z", "completed_at": "2025-02-06T18:34:29.866123Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005611896514892578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ingredients", "compiled": true, "compiled_code": "-- int_rxnorm_clinical_products_to_ingredients.sql\n\nwith\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrcpcl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\n\n),\n\nrcpc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\n\n),\n\nrdf as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\n\n),\n\nri as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\"\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , string_agg(rcpc.rxcui, ' | ') as clinical_product_component_rxcui\n    , string_agg(rcpc.name, ' | ') as clinical_product_compnent_name\n    , string_agg(rcpc.tty, ' | ') as clinical_product_component_tty\n    , string_agg(rdf.rxcui, ' | ') as dose_form_rxcui\n    , string_agg(rdf.name, ' | ') as dose_form_name\n    , string_agg(rdf.tty, ' | ') as dose_form_tty\n    , string_agg(ri.rxcui, ' | ') as ingredient_rxcui\n    , string_agg(ri.name, ' | ') as ingredient_name\n    , string_agg(ri.tty, ' | ') as ingredient_tty\n    , rcp.active\n    , rcp.prescribable        \nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \ngroup by\n    rcp.rxcui\n    , rcp.name\n    , rcp.tty\n    , rcp.active\n    , rcp.prescribable", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_ingredients\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.867961Z", "completed_at": "2025-02-06T18:34:29.872083Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.872457Z", "completed_at": "2025-02-06T18:34:29.872463Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005367755889892578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ingredients_rxcui.24a1dca332", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.874402Z", "completed_at": "2025-02-06T18:34:29.880754Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.881351Z", "completed_at": "2025-02-06T18:34:29.881360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007983684539794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__ingredients_rxcui.c6b139419f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.884549Z", "completed_at": "2025-02-06T18:34:29.890959Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.891502Z", "completed_at": "2025-02-06T18:34:29.891510Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008588075637817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__mthspl_products_rxcui.21eb3d19b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_products\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.894461Z", "completed_at": "2025-02-06T18:34:29.900747Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.901288Z", "completed_at": "2025-02-06T18:34:29.901297Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008174896240234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__mthspl_products_rxaui.09d72011ed", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxaui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_products\"\nwhere rxaui is not null\ngroup by rxaui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.904047Z", "completed_at": "2025-02-06T18:34:29.907840Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.908255Z", "completed_at": "2025-02-06T18:34:29.908263Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005523204803466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_mthspl_products_to_active_ingredients", "compiled": true, "compiled_code": "-- int_mthspl_products_to_active_ingredients.sql\n\nwith\n\nsubstance as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_substances\"\n\n),\n\nproduct as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_products\"\n\n)\n\nselect distinct\n    concat(lpad(split_part(product.ndc,'-', 1), 5, '0'), lpad(split_part(product.ndc,'-', 2), 4, '0')) as ndc9\n    , product.ndc as ndc\n    , product.rxcui as product_rxcui\n    , product.name as product_name\n    , product.tty as product_tty\n    , substance.unii as active_ingredient_unii\n    , substance.rxcui as active_ingredient_rxcui\n    , substance.name as active_ingredient_name\n    , substance.tty as active_ingredient_tty\t\n    , product.active as active\n    , product.prescribable as prescribable\nfrom sagerx_lake.rxnorm_rxnrel rxnrel\ninner join substance\n    on rxnrel.rxaui1 = substance.rxaui\ninner join product\n    on rxnrel.rxaui2 = product.rxaui\nwhere rela = 'has_active_ingredient'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_mthspl_products_to_active_ingredients\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.910388Z", "completed_at": "2025-02-06T18:34:29.914244Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.914644Z", "completed_at": "2025-02-06T18:34:29.914651Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00525665283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_mthspl_products_to_active_moieties", "compiled": true, "compiled_code": "-- int_mthspl_products_to_active_moieties.sql\n\nwith\n\nsubstance as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_substances\"\n\n),\n\nproduct as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_products\"\n\n)\n\nselect distinct\n    concat(lpad(split_part(product.ndc,'-', 1), 5, '0'), lpad(split_part(product.ndc,'-', 2), 4, '0')) as ndc9\n    , product.ndc as ndc\n    , product.rxcui as product_rxcui\n    , product.name as product_name\n    , product.tty as product_tty\n    , substance.unii as active_moiety_unii\n    , substance.rxcui as active_moiety_rxcui\n    , substance.name as active_moiety_name\n    , substance.tty as active_moiety_tty\t\n    , product.active as active\n    , product.prescribable as prescribable\nfrom sagerx_lake.rxnorm_rxnrel rxnrel\ninner join substance\n    on rxnrel.rxaui1 = substance.rxaui\ninner join product\n    on rxnrel.rxaui2 = product.rxaui\nwhere rela = 'has_active_moiety'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_mthspl_products_to_active_moieties\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.916505Z", "completed_at": "2025-02-06T18:34:29.920126Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.920515Z", "completed_at": "2025-02-06T18:34:29.920520Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004852771759033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_mthspl_products_to_inactive_ingredients", "compiled": true, "compiled_code": "-- int_mthspl_products_to_inactive_ingredients.sql\n\nwith\n\nsubstance as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_substances\"\n)\n\n, product as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_products\"\n)\n\nselect distinct\n    concat(lpad(split_part(product.ndc,'-', 1), 5, '0'), lpad(split_part(product.ndc,'-', 2), 4, '0')) as ndc9\n    , product.ndc as ndc\n    , product.rxcui as product_rxcui\n    , product.name as product_name\n    , product.tty as product_tty\n    , substance.unii as inactive_ingredient_unii\n    , substance.rxcui as inactive_ingredient_rxcui\n    , substance.name as inactive_ingredient_name\n    , substance.tty as inactive_ingredient_tty\t\n    , product.active as active\n    , product.prescribable as prescribable\nfrom product\ninner join sagerx_lake.rxnorm_rxnrel rxnrel\n    on rxnrel.rxaui2 = product.rxaui\ninner join substance\n    on substance.rxaui = rxnrel.rxaui1\nwhere rela = 'has_inactive_ingredient'", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_mthspl_products_to_inactive_ingredients\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.922308Z", "completed_at": "2025-02-06T18:34:29.928446Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.928830Z", "completed_at": "2025-02-06T18:34:29.928836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007348537445068359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__mthspl_substances_rxcui.1b38748ca6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__mthspl_substances\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.930659Z", "completed_at": "2025-02-06T18:34:29.934699Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.935108Z", "completed_at": "2025-02-06T18:34:29.935114Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052983760833740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_clinical_product_components", "compiled": true, "compiled_code": "-- int_rxnorm_clinical_products_to_clinical_product_components.sql\n\nwith\n\nndc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\"\n\n),\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrcpcl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\n\n),\n\nrcpc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_clinical_product_components\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.936944Z", "completed_at": "2025-02-06T18:34:29.941530Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.941911Z", "completed_at": "2025-02-06T18:34:29.941917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058023929595947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ndcs", "compiled": true, "compiled_code": "-- int_rxnorm_clinical_products_to_ndcs.sql\n\nwith\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrcpcl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\n\n),\n\nrcpc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\n\n),\n\nrdf as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\n\n),\n\nri as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\"\n\n),\n\nrn as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\"\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , rn.brand_product_rxcui\n    , rn.ndc\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \nleft join rn\n    on rcp.rxcui = rn.clinical_product_rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.943690Z", "completed_at": "2025-02-06T18:34:29.947303Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.947678Z", "completed_at": "2025-02-06T18:34:29.947684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004819154739379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_ndcs_to_products", "compiled": true, "compiled_code": "-- int_rxnorm_ndcs_to_products.sql\n\nwith\n\nndc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\"\n\n),\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrbp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\"\n\n)\n\nselect distinct\n    ndc\n    , coalesce(rbp.rxcui, rcp.rxcui, null) as product_rxcui\n    , coalesce(rbp.name, rcp.name, null) as product_name\n    , coalesce(rbp.tty, rcp.tty, null) as product_tty\n    , rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\nfrom ndc\nleft join rcp \n    on ndc.clinical_product_rxcui = rcp.rxcui\nleft join rbp\n    on ndc.brand_product_rxcui = rbp.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_ndcs_to_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.949464Z", "completed_at": "2025-02-06T18:34:29.953489Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.953857Z", "completed_at": "2025-02-06T18:34:29.953863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005208253860473633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_rxnorm__ndcs_ndc.4db0f5b5df", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\"\nwhere ndc is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.955630Z", "completed_at": "2025-02-06T18:34:29.959731Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.960102Z", "completed_at": "2025-02-06T18:34:29.960107Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005285739898681641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_stg_rxnorm__ndcs_ndc.9929df0b31", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ndc as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\"\nwhere ndc is not null\ngroup by ndc\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.961893Z", "completed_at": "2025-02-06T18:34:29.968070Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.968461Z", "completed_at": "2025-02-06T18:34:29.968467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007406711578369141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_rxnorm_clinical_products_to_ingredient_strengths", "compiled": true, "compiled_code": "-- int_rxnorm_clinical_products_to_ingredient_strengths.sql\n\nwith\n\nrcp as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_products\"\n\n),\n\nrcpcl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_component_links\"\n\n),\n\nrcpc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__clinical_product_components\"\n\n),\n\nrdf as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__dose_forms\"\n\n),\n\nri as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredients\"\n\n),\n\nricl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_component_links\"\n\n),\n\nric as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_components\"\n\n),\n\nrisl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strength_links\"\n\n),\n\nris as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ingredient_strengths\"\n\n),\n\npinl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__precise_ingredient_links\"\n\n),\n\npin as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__precise_ingredients\"\n\n)\n\nselect\n    rcp.rxcui as clinical_product_rxcui\n    , rcp.name as clinical_product_name\n    , rcp.tty as clinical_product_tty\n    , rcpc.rxcui as clinical_product_component_rxcui\n    , rcpc.name as clinical_product_compnent_name\n    , rcpc.tty as clinical_product_component_tty\n    , rdf.rxcui as dose_form_rxcui\n    , rdf.name as dose_form_name\n    , rdf.tty as dose_form_tty\n    , ri.rxcui as ingredient_rxcui\n    , ri.name as ingredient_name\n    , ri.tty as ingredient_tty\n    , ric.rxcui as ingredient_component_rxcui\n    , ric.name as ingredient_component_name\n    , ric.tty as ingredient_component_tty\n    , ris.rxcui as ingredient_strength_rxcui\n    , ris.name as ingredient_strength_name\n    , ris.numerator_value as strength_numerator_value\n    , ris.numerator_unit as strength_numerator_unit\n    , ris.denominator_value as strength_denominator_value\n    , ris.denominator_unit as strength_denominator_unit\n    , ris.text as strength_text\n    , pin.rxcui as precise_ingredient_rxcui\n    , pin.name as precise_ingredient_name\n    , pin.tty as precise_ingredient_tty\n    , rcp.active\n    , rcp.prescribable\nfrom rcp \nleft join rcpcl \n    on rcp.rxcui = rcpcl.clinical_product_rxcui \nleft join rcpc \n    on rcpcl.clinical_product_component_rxcui = rcpc.rxcui \nleft join rdf \n    on rcpc.dose_form_rxcui = rdf.rxcui \nleft join ri \n    on rcpc.ingredient_rxcui = ri.rxcui \nleft join ricl \n    on ri.rxcui = ricl.ingredient_rxcui \nleft join ric \n    on ricl.ingredient_component_rxcui = ric.rxcui \nleft join risl \n    on rcpc.rxcui = risl.clinical_product_component_rxcui \n    and ric.rxcui = risl.ingredient_component_rxcui \nleft join ris \n    on risl.ingredient_strength_rxcui = ris.rxcui\nleft join pinl\n    on ris.rxcui = pinl.ingredient_strength_rxcui\nleft join pin\n    on pinl.precise_ingredient_rxcui = pin.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_ingredient_strengths\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.970246Z", "completed_at": "2025-02-06T18:34:29.974027Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.974419Z", "completed_at": "2025-02-06T18:34:29.974426Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005006313323974609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.atc_codes_to_rxnorm_products", "compiled": true, "compiled_code": "-- atc_codes_to_rxnorm_products\n\nwith atc_codes_to_rxnorm_product_rxcuis as (\n\n\tselect * from \"sagerx\".\"sagerx_dev\".\"stg_rxclass__atc_codes_to_rxnorm_product_rxcuis\"\n\n)\n\n, atc_codes as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__atc_codes\"\n\n)\n\n, rxnorm_product_rxcuis as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__product_rxcuis\"\n\n)\n\nselect distinct\n\tatc_codes_to_rxnorm_product_rxcuis.rxcui\n\t, rxnorm_product_rxcuis.str as rxnorm_description\n\t, atc_codes.atc_1_code\n\t, atc_codes.atc_2_code\n\t, atc_codes.atc_3_code\n\t, atc_codes.atc_4_code\n\t, atc_codes.atc_1_name\n\t, atc_codes.atc_2_name\n\t, atc_codes.atc_3_name\n\t, atc_codes.atc_4_name\nfrom atc_codes_to_rxnorm_product_rxcuis\nleft join atc_codes\n\ton atc_codes.atc_4_code = atc_codes_to_rxnorm_product_rxcuis.class_id\nleft join rxnorm_product_rxcuis\n\ton rxnorm_product_rxcuis.rxcui = atc_codes_to_rxnorm_product_rxcuis.rxcui\norder by rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"atc_codes_to_rxnorm_products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.976264Z", "completed_at": "2025-02-06T18:34:29.979763Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.980149Z", "completed_at": "2025-02-06T18:34:29.980155Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0047380924224853516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.stg_rxnorm_historical__most_recent_ndcs", "compiled": true, "compiled_code": "-- stg_rxnorm_historical__most_recent_ndcs.sql\n\nwith \n\nrxnorm_historical_ndcs as\n(\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm_historical__ndcs\"\n)\n\n/*\nNOTE: we do this grouping and ranking to avoid NDCs that\nrelate to RXCUIs that have been remapped to multiple RXCUIs\n- see issue #265 for more details\n*/\n, grouped_and_ranked_rxnorm_historical_ndcs as\n(\n    \n    select\n        ndc\n        , end_date\n        , row_number() over (partition by ndc order by end_date desc) as end_date_line\n        , count(rxcui) as rxcui_count\n    from rxnorm_historical_ndcs\n    group by ndc, end_date\n    order by count(rxcui) desc\n\n)\n\nselect\n    rxnorm_historical_ndcs.*\nfrom grouped_and_ranked_rxnorm_historical_ndcs\ninner join rxnorm_historical_ndcs\n    on rxnorm_historical_ndcs.ndc = grouped_and_ranked_rxnorm_historical_ndcs.ndc\n    and rxnorm_historical_ndcs.end_date = grouped_and_ranked_rxnorm_historical_ndcs.end_date\nwhere rxcui_count = 1 -- only NDCs that are associated with one RXCUI per end_date\n\tand end_date_line = 1 -- only NDCs that are most recently associated with an RXCUI", "relation_name": "\"sagerx\".\"sagerx_dev\".\"stg_rxnorm_historical__most_recent_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.981926Z", "completed_at": "2025-02-06T18:34:29.986434Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.986826Z", "completed_at": "2025-02-06T18:34:29.986832Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005716085433959961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_dailymed_image_name_ndcs", "compiled": true, "compiled_code": "-- int_dailymed_image_name_ndcs\n\nwith\n\npackage_label_section_images as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_section_images\"\n\n),\n\nregex_ndcs as (\n\n    select\n        *,\n        (regexp_matches(image, '(?:\\d{4}|\\d{5})-\\d{3,6}(?:-\\d{1,2})?|\\d{11}|\\d{10}', 'g'))[1] as regex_ndc\n    from package_label_section_images\n\n    /*\n        \\d{11}              | # 11 digit\n        \\d{10}              | # 10 digit\n        \\d{5}-\\d{5}         | # 5-5\n        \\d{5}-\\d{4}-\\d{2}   | # 5-4-2\n        \\d{5}-\\d{4}-\\d{1}   | # 5-4-1\n        \\d{5}-\\d{3}-\\d{2}   | # 5-3-2\n        \\d{4}-\\d{6}         | # 4-6\n        \\d{4}-\\d{4}-\\d{2}     # 4-4-2\n    */\n\n),\n\nvalid_spl_ndcs as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__ndcs\"\n\n),\n\nvalidated_ndcs as (\n\n    select\n        regex_ndcs.*,\n        spl_ndc.ndc,\n        spl_ndc.ndc11\n    from regex_ndcs\n    inner join valid_spl_ndcs spl_ndc\n        on spl_ndc.set_id = regex_ndcs.set_id\n        and \n  \n  CASE WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN spl_ndc.ndc\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(spl_ndc.ndc,4) || REPLACE(RIGHT(spl_ndc.ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(spl_ndc.ndc,5) || '0' || REPLACE(RIGHT(spl_ndc.ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(spl_ndc.ndc,10),'-','') || '0' || RIGHT(spl_ndc.ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(spl_ndc.ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN spl_ndc.ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN spl_ndc.ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN spl_ndc.ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n = \n  \n  CASE WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN regex_ndcs.regex_ndc\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(regex_ndcs.regex_ndc,4) || REPLACE(RIGHT(regex_ndcs.regex_ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(regex_ndcs.regex_ndc,5) || '0' || REPLACE(RIGHT(regex_ndcs.regex_ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(regex_ndcs.regex_ndc,10),'-','') || '0' || RIGHT(regex_ndcs.regex_ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(regex_ndcs.regex_ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN regex_ndcs.regex_ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN regex_ndcs.regex_ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n\n\n)\n\nselect * from validated_ndcs", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_dailymed_image_name_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.988621Z", "completed_at": "2025-02-06T18:34:29.991590Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.992011Z", "completed_at": "2025-02-06T18:34:29.992017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004213809967041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_dailymed_ranked_package_label_images", "compiled": true, "compiled_code": "with\n\npackage_label_images as (\n\n    select * from\"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_section_images\"\n\n),\n\nranked_package_images as (\n\n    select \n        *,\n        row_number() over (\n            partition by package_label_section_id\n            order by id\n        ) as rn\n    from package_label_images\n\n)\n\nselect * from ranked_package_images", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_dailymed_ranked_package_label_images\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.993800Z", "completed_at": "2025-02-06T18:34:29.997113Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:29.997493Z", "completed_at": "2025-02-06T18:34:29.997499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004518270492553711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_dailymed_validated_package_label_ndcs", "compiled": true, "compiled_code": "--int_dailymed_validated_package_label_ndcs\n\nwith\n\nvalid_spl_ndcs as (\n\n    select * from\"sagerx\".\"sagerx_dev\".\"stg_dailymed__ndcs\"\n\n),\n\npackage_label_ndc_matches as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_dailymed__package_label_section_ndcs\"\n\n),\n\nvalidated_package_ndcs as (\n\n    select\n        *\n    from package_label_ndc_matches pkg_ndc\n    where exists (\n\n        select\n            ndc\n        from valid_spl_ndcs\n        where ndc = pkg_ndc.ndc\n        \n    )\n\n)\n\nselect * from validated_package_ndcs", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_dailymed_validated_package_label_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:29.999251Z", "completed_at": "2025-02-06T18:34:30.004719Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.005109Z", "completed_at": "2025-02-06T18:34:30.005115Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00667262077331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_fda_packaging_parts", "compiled": true, "compiled_code": "\n\nwith \n\npackaging_components as (\n\tselect * from \"sagerx\".\"sagerx_dev\".\"int_fda_packaging_components\"\n\twhere component_text like ('%*%')\n)\n\nselect\n\tz.ndc11\n    , z.packagedescription\n\t, z.component_line\n\t, z.component_text\n   \t, z.ordinality as part_line\n\t, trim(z.token) as part_text\nfrom (\n    select distinct \n        components.*\n\t    , s.token\n        , s.ordinality\n\tfrom\n\t\tpackaging_components components\n\t\t, unnest(\n\t\t\tstring_to_array(\n\t\t\t\tcomponent_text\n\t\t\t\t, '*')\n\t\t\t) with ordinality as s(token, ordinality)\n) z\norder by ndc11, component_line, part_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_fda_packaging_parts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.006853Z", "completed_at": "2025-02-06T18:34:30.009967Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.010331Z", "completed_at": "2025-02-06T18:34:30.010336Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004278421401977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.pack_size", "compiled": true, "compiled_code": "with\n\npackaging_components as (\n\n    select\n        *\n    from \"sagerx\".\"sagerx_dev\".\"int_fda_packaging_components\"\n\n),\n\ninnermost_unit as (\n\n    select ndc11, inner_unit\n    from (\n        select ndc11, inner_unit, \n            row_number() over (partition by ndc11 order by component_line desc) as row_num\n        from packaging_components\n    ) as ranked\n    where row_num = 1\n\n),\n\noutermost_unit as (\n\n    select ndc11, outer_unit\n    from packaging_components\n    where component_line = 1\n\n)\n\nselect distinct\n    packaging_components.ndc11,\n    outermost_unit.outer_unit as outermost_unit,\n    total_product,\n    case\n        when innermost_unit.inner_unit like('%KIT %')\n            then 'KIT' \n        else innermost_unit.inner_unit \n    end as innermost_unit,\n    packagedescription\nfrom packaging_components\nleft join innermost_unit\n    on innermost_unit.ndc11 = packaging_components.ndc11\nleft join outermost_unit\n    on outermost_unit.ndc11 = packaging_components.ndc11", "relation_name": "\"sagerx\".\"sagerx_dev\".\"pack_size\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.012308Z", "completed_at": "2025-02-06T18:34:30.016399Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.016778Z", "completed_at": "2025-02-06T18:34:30.016784Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005505084991455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc.4d4e5ab99c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc\nfrom \"sagerx\".\"sagerx_dev\".\"stg_nadac__enhanced_nadac\"\nwhere ndc is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.018568Z", "completed_at": "2025-02-06T18:34:30.022661Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.023043Z", "completed_at": "2025-02-06T18:34:30.023049Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005309104919433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_stg_nadac__enhanced_nadac_ndc_description.16fde5c578", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc_description\nfrom \"sagerx\".\"sagerx_dev\".\"stg_nadac__enhanced_nadac\"\nwhere ndc_description is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.024820Z", "completed_at": "2025-02-06T18:34:30.028917Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.029284Z", "completed_at": "2025-02-06T18:34:30.029289Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005280494689941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.products", "compiled": true, "compiled_code": "with\n\nrxnorm_products as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__products\"\n\n),\n\nrxnorm_psn as (\n\n    select\n        rxcui,\n        str        \n    from \"sagerx\".\"sagerx_lake\".\"rxnorm_rxnconso\"\n    where sab = 'RXNORM'\n        and tty = 'PSN'\n\n),\n\nrxnorm_clinical_products_to_ingredients as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_ingredients\"\n\n)\n\nselect\n    prod.rxcui as product_rxcui\n    , prod.name as product_name\n    , prod.tty as product_tty\n    , psn.str as prescribable_name\n    , case\n        when prod.tty in ('SBD', 'BPCK') then 'brand'\n        when prod.tty in ('SCD', 'GPCK') then 'generic'\n        end as brand_vs_generic\n    , substring(prod.name from '\\[(.*)\\]') as brand_name\n    , cping.clinical_product_rxcui\n    , cping.clinical_product_name\n    , cping.clinical_product_tty\n    , cping.ingredient_name\n    -- strength - couldn't easily get strength at this grain - can if needed\n    , cping.dose_form_name\n    , prod.active\n    , prod.prescribable\nfrom rxnorm_products prod\nleft join rxnorm_clinical_products_to_ingredients cping\n    on cping.clinical_product_rxcui = prod.clinical_product_rxcui\nleft join rxnorm_psn psn\n    on psn.rxcui = prod.rxcui", "relation_name": "\"sagerx\".\"sagerx_dev\".\"products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.031047Z", "completed_at": "2025-02-06T18:34:30.035028Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.035406Z", "completed_at": "2025-02-06T18:34:30.035411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00518035888671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.products_to_inactive_ingredients", "compiled": true, "compiled_code": "-- products_to_inactive_ingredients.sql\n\nwith products_to_inactive_ingredients as (\n    select * from \"sagerx\".\"sagerx_dev\".\"int_mthspl_products_to_inactive_ingredients\"\n)\n\n, unii_codes as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_fda_unii__unii_codes\"\n)\n\n, usp_preservatives as (\n    select * from \"sagerx\".\"sagerx_dev\".\"usp_preservatives\"\n)\n\nselect\n    ndc9\n    , ndc\n    , unii_codes.unii as fda_unii_code\n    , unii_codes.display_name as fda_unii_display_name\n    , unii_codes.pubchem as pubchem_id\n    , max(case\n        when preservative.cas_rn is not null\n            then 1\n        end) as preservative\n    , product_rxcui\n    , string_agg(product_name, ' | ') as product_name\n    , product_tty\n    , inactive_ingredient_unii\n    , inactive_ingredient_rxcui\n    , string_agg(inactive_ingredient_name, ' | ') as inactive_ingredient_name\n    , inactive_ingredient_tty\n    , active\n    , prescribable\nfrom products_to_inactive_ingredients\n/*\nneed to join unii_codes twice - once\nto pull in the actual UNII -> displa\ny name\nmapping, and another initial one to try\nto map substance RXCUIs to FDA UNII RXCUIs.\n*/\nleft join unii_codes rxcui_to_unii\n    on rxcui_to_unii.rxcui = inactive_ingredient_rxcui\n/*\nif MTHSPL (DailyMed) has a substance UNII,\nuse that. if it does not, try to map the\nsubstance RXCUI to the FDA UNII RXCUI and\nthen use the resulting matched UNII to pull\nin the UNII display name.\n*/\nleft join unii_codes\n    on unii_codes.unii = case\n        when (\n            inactive_ingredient_unii is not null \n            and\n            inactive_ingredient_unii != 'NOCODE'\n        ) then inactive_ingredient_unii\n        else rxcui_to_unii.unii\n        end\nleft join usp_preservatives preservative\n    on preservative.cas_rn = unii_codes.rn\ngroup by\n    ndc9\n    , ndc\n    , unii_codes.unii\n    , unii_codes.display_name\n    , unii_codes.pubchem\n    , product_rxcui\n    , product_tty\n    , inactive_ingredient_unii\n    , inactive_ingredient_rxcui\n    , inactive_ingredient_tty\n    , active\n    , prescribable", "relation_name": "\"sagerx\".\"sagerx_dev\".\"products_to_inactive_ingredients\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.037189Z", "completed_at": "2025-02-06T18:34:30.040822Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.041202Z", "completed_at": "2025-02-06T18:34:30.041207Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0048329830169677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.brand_products_with_related_ndcs", "compiled": true, "compiled_code": "with brand_products as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__brand_products\"\n)\n\n, fda_ndcs as (\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\n)\n\n, rxnorm_ndcs_to_products as (\n    select * from \"sagerx\".\"sagerx_dev\".\"int_rxnorm_ndcs_to_products\"\n)\n\n, map as (\n    select\n        prod.tty as product_tty\n        , prod.rxcui as product_rxcui\n        , prod.name as product_name\n        , ndc.product_tty as ndc_product_tty\n        , ndc.product_rxcui as ndc_product_rxcui\n        , ndc.product_name as ndc_product_name\n        , ndc.ndc\n        , fda.product_startmarketingdate\n        , fda.package_startmarketingdate\n    from brand_products prod\n    left join rxnorm_ndcs_to_products ndc\n        on ndc.clinical_product_rxcui = prod.clinical_product_rxcui\n    left join fda_ndcs fda\n        on fda.ndc11 = ndc.ndc\n    order by prod.rxcui\n)\n\nselect\n    *\nfrom map", "relation_name": "\"sagerx\".\"sagerx_dev\".\"brand_products_with_related_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.043004Z", "completed_at": "2025-02-06T18:34:30.047822Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.048222Z", "completed_at": "2025-02-06T18:34:30.048227Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006059885025024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_inactive_ingredients_to_fda_enforcement_reports", "compiled": true, "compiled_code": "with\n\nregex_ndcs as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_fda_enforcement__regex_ndcs\"\n\n),\n\njson_ndcs as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_fda_enforcement__json_ndcs\"\n\n),\n\nenf as (\n    -- UNION RegEx NDCs from description and JSON NDCs from OpenFDA column\n    -- NOTE: UNION removes duplicates by default, which is what we want here\n    select * from (\n        -- first get only the NDCs from combined RegEx and JSON enforcement report data\n        select \n            recall_number\n            , ndc11\n            , ndc9\n        from regex_ndcs\n        \n        union\n        \n        select\n            recall_number\n            , ndc11\n            , ndc9\n        from json_ndcs\n    ) enf_ndcs\n    -- then, join NDCs with application numbers, where they exist from JSON data\n    left join (\n        -- get distinct NDC11 -> application numbers so as to not blow up granularity\n        select\n            ndc11\n            , app_num\n        from json_ndcs\n        group by\n            ndc11\n            , app_num\n    ) json_app_num\n        on enf_ndcs.ndc11 = json_app_num.ndc11\n),\n\nndc as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_rxnorm_ndcs_to_products\"\n\n),\n\ning as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_rxnorm_clinical_products_to_ingredients\"\n\n),\n\nspl as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_mthspl_products_to_inactive_ingredients\"\n\n),\n\nfda as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\n\n)\n\nselect distinct\n    ndc.ndc as ndc11\n    , left(ndc.ndc, 9) as ndc9\n    , ndc.product_rxcui\n    , ndc.product_name\n    , ndc.product_tty\n    , ndc.clinical_product_rxcui\n    , ndc.clinical_product_name\n    , ndc.clinical_product_tty\n    , ing.ingredient_rxcui as active_ingredient_rxcui\n    , ing.ingredient_name as active_ingredient_name\n    , ing.ingredient_tty as active_ingredient_tty\n    -- if FDA NDC Directory has an application number, use that...\n    -- otherwise, use the application number from the enforcement report JSON\n    , coalesce(fda.applicationnumber, enf.app_num) as application_number\n    , fda.labelername as labeler\n    , enf.recall_number\n    , spl.inactive_ingredient_unii\n    , spl.inactive_ingredient_rxcui\n    , spl.inactive_ingredient_name\n    , spl.inactive_ingredient_tty\n-- RxNorm NDCs that have one of the ingredients in the WHERE clause\nfrom ndc\n-- clinical product and related active ingredients for each NDC\nleft join ing\n    on ing.clinical_product_rxcui = ndc.clinical_product_rxcui\n-- FDA enforcement reports (UNION of RegEx and JSON) joined on NDC9\nleft join enf\n    on enf.ndc9 = left(ndc.ndc, 9)\n-- DailyMed SPL inactive ingredients joined on NDC9\nleft join spl\n    on spl.ndc9 = left(ndc.ndc, 9)\n-- FDA NDC Directory joined on NDC11 to pull in application number\nleft join fda\n    on fda.ndc11 = ndc.ndc", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_inactive_ingredients_to_fda_enforcement_reports\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.050031Z", "completed_at": "2025-02-06T18:34:30.054281Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.054661Z", "completed_at": "2025-02-06T18:34:30.054667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005470752716064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.product_synonyms", "compiled": true, "compiled_code": "with\n\nrxnorm_synonyms as (\n\n    select\n        str as synonym,\n        rxcui as product_rxcui,\n        'RXNORM' as source\n    from \"sagerx\".\"sagerx_lake\".\"rxnorm_rxnconso\"\n    where sab = 'RXNORM'\n    and tty in('PSN', 'SY', 'TMSY', 'ET')\n\n),\n\nnadac_synonyms as (\n\n    select distinct\n        ndc_description as synonym,\n        product_rxcui,\n        'NADAC' as source\n    from \"sagerx\".\"sagerx_lake\".\"nadac\" n\n    left join \"sagerx\".\"sagerx_dev\".\"int_rxnorm_ndcs_to_products\" r\n        on r.ndc = n.ndc\n    where r.product_rxcui is not null\n\n),\n\nfda_synonyms as (\n\n    select distinct\n        trim(concat(\n            nonproprietaryname\n            , ' '\n            , active_numerator_strength\n            , ' '\n            , active_ingred_unit\n            , ' '\n            , lower(dosageformname)\n            , case when proprietaryname is not null then concat(\n                ' ['\n                , proprietaryname\n                , case when proprietarynamesuffix is not null then concat(\n                    ' '\n                    , proprietarynamesuffix\n                    ) else '' end\n                , ']'\n                ) else '' end\n            )) as synonym,\n            product_rxcui,\n            'FDA' as source\n    from sagerx_dev.stg_fda_ndc__ndcs f\n    left join sagerx_dev.int_rxnorm_ndcs_to_products r\n        on r.ndc = f.ndc11\n    where r.product_rxcui is not null\n\n),\n\nall_synonyms as (\n    \n    select * from rxnorm_synonyms\n\n    union\n\n    select * from nadac_synonyms\n\n    union\n\n    select * from fda_synonyms\n\n),\n\nrxnorm_products as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__products\"\n\n),\n\nprescribable_product_synonyms as (\n\n    select\n        all_synonyms.*\n    from all_synonyms\n    inner join rxnorm_products\n        on rxnorm_products.rxcui = all_synonyms.product_rxcui\n    where rxnorm_products.prescribable = true\n\n)\n\nselect * from prescribable_product_synonyms", "relation_name": "\"sagerx\".\"sagerx_dev\".\"product_synonyms\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.056485Z", "completed_at": "2025-02-06T18:34:30.060580Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.060964Z", "completed_at": "2025-02-06T18:34:30.060969Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0053288936614990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_atc_codes_to_rxnorm_products_rxcui.f1ef3093c1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"atc_codes_to_rxnorm_products\"\nwhere rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.062784Z", "completed_at": "2025-02-06T18:34:30.066837Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.067221Z", "completed_at": "2025-02-06T18:34:30.067226Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005288362503051758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_atc_codes_to_rxnorm_products_rxcui.b171565c1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"atc_codes_to_rxnorm_products\"\nwhere rxcui is not null\ngroup by rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.069033Z", "completed_at": "2025-02-06T18:34:30.074294Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.074681Z", "completed_at": "2025-02-06T18:34:30.074687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006488800048828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.all_ndc_descriptions", "compiled": true, "compiled_code": "-- all_ndc_descriptions.sql\n\nwith \n\n/*\nNOTE: this intermediate table is only NDCs that have\nSAB = RXNORM RXCUIs, which limits the total NDC count - \nthere are lots of NDCs that don't have RXNORM RXCUIs\nthat might be good to include in the future, but a lot\nseem to be inactive or not prescribable\nMTHSPL = 174k+, VANDF = 309k+, CVX = 500+\n*/\nrxnorm_ndcs as (\n\n    select\n        ndc\n        , product_rxcui as rxcui\n        , product_name as rxnorm_description\n    from \"sagerx\".\"sagerx_dev\".\"int_rxnorm_ndcs_to_products\"\n\n) \n\n/* \nNOTE: maybe want to make a stg_rxnorm__products table\nto replace this weird one-off table\n*/\n, rxnorm_product_rxcuis as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__product_rxcuis\"\n\n)\n\n/*\nNOTE: do we really only want the most recent historical NDCs?\nmaybe should mash rxnorm_historical_ndcs up against rxnorm_ndcs\nand somehow filter out any parts that are wrong?\n*/\n, most_recent_rxnorm_historical_ndcs as (\n\n    select\n        rxnorm_historical_most_recent_ndcs.ndc::varchar\n        , rxnorm_historical_most_recent_ndcs.rxcui::varchar\n        , rxnorm_product_rxcuis.str as rxnorm_description\n    from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm_historical__most_recent_ndcs\" rxnorm_historical_most_recent_ndcs\n    left join rxnorm_product_rxcuis\n        on rxnorm_product_rxcuis.rxcui = rxnorm_historical_most_recent_ndcs.rxcui::varchar\n\n)\n\n, fda_ndc_ndcs as (\n\n    select\n        ndc11 as ndc\n        , trim(concat(\n            nonproprietaryname\n            , ' '\n            , active_numerator_strength\n            , ' '\n            , active_ingred_unit\n            , ' '\n            , lower(dosageformname)\n            , case when proprietaryname is not null then concat(\n                ' ['\n                , proprietaryname\n                , case when proprietarynamesuffix is not null then concat(\n                    ' '\n                    , proprietarynamesuffix\n                    ) else '' end\n                , ']'\n                ) else '' end\n            )) as fda_description\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\n\n)\n\n, fda_unfinished_ndcs as (\n\n    select\n        ndc11 as ndc\n        , trim(concat(\n            nonproprietaryname\n            , ' '\n            , active_numerator_strength\n            , ' '\n            , active_ingred_unit\n            , ' '\n            , lower(dosageformname)\n            )) as fda_description\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__ndcs\"\n\n)\n\n, fda_excluded_ndcs as (\n\n    select\n        ndc11 as ndc\n        , trim(concat(\n            nonproprietaryname\n            , ' '\n            , active_numerator_strength\n            , ' '\n            , active_ingred_unit\n            , ' '\n            , lower(dosageformname)\n            , case when proprietaryname is not null then concat(\n                ' ['\n                , proprietaryname\n                , case when proprietarynamesuffix is not null then concat(\n                    ' '\n                    , proprietarynamesuffix\n                    ) else '' end\n                , ']'\n                ) else '' end\n            )) as fda_description\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__ndcs\"\n\n)\n\n, all_rxnorm_ndcs as (\n    \n    select *, 1 as table_rank from rxnorm_ndcs\n\n    union\n\n    select *, 2 as table_rank from most_recent_rxnorm_historical_ndcs\n\n)\n\n, ranked_rxnorm_ndcs as (\n\n    select\n        *\n        , row_number() over (partition by ndc order by table_rank asc) as row_num\n    from all_rxnorm_ndcs\n\n)\n\n, distinct_rxnorm_ndcs as (\n\n    select\n        ndc\n        , rxcui\n        , rxnorm_description\n    from ranked_rxnorm_ndcs\n    where row_num = 1\n\n)\n\n, all_fda_ndcs as (\n\n    select *, 1 as table_rank from fda_ndc_ndcs\n    \n    union\n    \n    select *, 2 as table_rank from fda_excluded_ndcs\n\n    union\n\n    select *, 3 as table_rank from fda_unfinished_ndcs    \n\n)\n\n, ranked_fda_ndcs as (\n\n    select\n        *\n        , row_number() over (partition by ndc order by table_rank asc) as row_num\n    from all_fda_ndcs\n\n)\n\n, distinct_fda_ndcs as (\n\n    select\n        ndc\n        , fda_description\n    from ranked_fda_ndcs\n    where row_num = 1\n\n)\n\n, all_ndcs as (\n\n    select ndc from distinct_rxnorm_ndcs\n\n    union\n    \n    select ndc from distinct_fda_ndcs\n\n)\n\n, all_ndc_descriptions as (\n\n    select\n        all_ndcs.ndc\n        , rxcui\n        , rxnorm_description\n        , fda_description\n    from all_ndcs\n    left join distinct_rxnorm_ndcs\n        on distinct_rxnorm_ndcs.ndc = all_ndcs.ndc\n    left join distinct_fda_ndcs\n        on distinct_fda_ndcs.ndc = all_ndcs.ndc\n\n)\n\n, all_not_null_ndc_descriptions as (\n\nselect * from all_ndc_descriptions\nwhere ndc is not null\n\n)\n\nselect * from all_not_null_ndc_descriptions", "relation_name": "\"sagerx\".\"sagerx_dev\".\"all_ndc_descriptions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.076694Z", "completed_at": "2025-02-06T18:34:30.082066Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.082484Z", "completed_at": "2025-02-06T18:34:30.082492Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006691455841064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_dailymed_ranked_package_label_ndcs", "compiled": true, "compiled_code": "with\n\nvalidated_package_ndcs as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_dailymed_validated_package_label_ndcs\"\n\n),\n\nranked_package_ndcs as (\n\n    select \n        *,\n        row_number() over (\n            partition by package_label_section_id\n            order by id\n        ) as rn\n    from validated_package_ndcs\n\n)\n\nselect * from ranked_package_ndcs", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_dailymed_ranked_package_label_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.084521Z", "completed_at": "2025-02-06T18:34:30.088498Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.088934Z", "completed_at": "2025-02-06T18:34:30.088942Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054569244384765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_fda_packaging_subparts", "compiled": true, "compiled_code": "\n\nwith \n\npackaging_parts as (\n\tselect * from \"sagerx\".\"sagerx_dev\".\"int_fda_packaging_parts\"\n\twhere part_text like ('%/%')\n)\n\nselect\n\tz.ndc11\n    , z.packagedescription\n\t, z.component_line\n\t, z.component_text\n    , z.part_line\n    , z.part_text\n   \t, z.ordinality as subpart_line\n\t, trim(z.token) as subpart_text\nfrom (\n    select distinct \n        parts.*\n\t    , s.token\n        , s.ordinality\n\tfrom\n\t\tpackaging_parts parts\n\t\t, unnest(\n\t\t\tstring_to_array(\n\t\t\t\tpart_text\n\t\t\t\t, '/')\n\t\t\t) with ordinality as s(token, ordinality)\n) z\norder by ndc11, component_line, part_line, subpart_line", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_fda_packaging_subparts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.091339Z", "completed_at": "2025-02-06T18:34:30.097581Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.098095Z", "completed_at": "2025-02-06T18:34:30.098103Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007924318313598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_products_product_rxcui.fa0e88a9af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rxcui\nfrom \"sagerx\".\"sagerx_dev\".\"products\"\nwhere product_rxcui is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.100308Z", "completed_at": "2025-02-06T18:34:30.104635Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.105001Z", "completed_at": "2025-02-06T18:34:30.105008Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005907297134399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_products_product_rxcui.72c98af3cb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rxcui as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"products\"\nwhere product_rxcui is not null\ngroup by product_rxcui\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.106975Z", "completed_at": "2025-02-06T18:34:30.109979Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.110346Z", "completed_at": "2025-02-06T18:34:30.110351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004389762878417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.scorecard_data", "compiled": true, "compiled_code": "with\n\ning_to_report as (\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_inactive_ingredients_to_fda_enforcement_reports\"\n\n)\n\nselect * from ing_to_report\nwhere active_ingredient_name in (\n    'risperidone'\n    , 'adalimumab'\n    , 'lidocaine'\n    , 'carbamazepine'\n    , 'phenytoin'\n    , 'midazolam'\n    , 'valproate'\n    , 'tacrolimus'\n    , 'amoxicillin'\n    , 'hydrocortisone'\n    , 'cetirizine'\n    , 'pertuzumab'\n    , 'methylphenidate'\n    , 'erythromycin'\n    , 'gabapentin'\n    , 'lopinavir / ritonavir'\n    , 'levothyroxine'\n    , 'albuterol'\n    )", "relation_name": "\"sagerx\".\"sagerx_dev\".\"scorecard_data\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.112130Z", "completed_at": "2025-02-06T18:34:30.117609Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.117979Z", "completed_at": "2025-02-06T18:34:30.117984Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00666499137878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.all_ndcs_to_sources", "compiled": true, "compiled_code": "-- stg_ndc_all_ndcs_to_sources.sql\n\nwith rxnorm_historical_ndcs as\n(\n    -- NOTE: likely need to pick the most recent NDC\n    -- instead of just distinct\n    -- and pull in the other columns too possibly\n    select distinct ndc\n    from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm_historical__ndcs\"\n)\n\n, rxnorm_ndcs as\n(\n    select distinct ndc\n    from \"sagerx\".\"sagerx_dev\".\"stg_rxnorm__ndcs\"\n)\n\n, fda_ndc_ndcs as\n(\n    select distinct ndc11 as ndc\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_ndc__ndcs\"\n)\n\n, fda_excluded_ndcs as\n(\n    select distinct ndc11 as ndc\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_excluded__ndcs\"\n)\n\n, fda_unfinished_ndcs as\n(\n    select distinct ndc11 as ndc\n    from \"sagerx\".\"sagerx_dev\".\"stg_fda_unfinished__ndcs\"\n)\n\n, all_distinct_ndcs as\n(\n    select ndc from rxnorm_historical_ndcs\n    union\n    select ndc from rxnorm_ndcs\n    union\n    select ndc from fda_ndc_ndcs\n    union\n    select ndc from fda_excluded_ndcs\n    union\n    select ndc from fda_unfinished_ndcs\n)\n\n, all_ndcs_to_sources as (\n    select\n        all_distinct_ndcs.ndc\n        , case when rxnorm_historical_ndcs.ndc is not null\n            then 1 \n            else 0\n            end as rxnorm_historical_ndcs\n        , case when rxnorm_ndcs.ndc is not null\n            then 1 \n            else 0\n            end as rxnorm_ndcs\n        , case when fda_ndc_ndcs.ndc is not null\n            then 1 \n            else 0\n            end as fda_ndc_ndcs\n        , case when fda_excluded_ndcs.ndc is not null\n            then 1 \n            else 0\n            end as fda_excluded_ndcs\n        , case when fda_unfinished_ndcs.ndc is not null\n            then 1 \n            else 0\n            end as fda_unfinished_ndcs\n    from all_distinct_ndcs\n    left join rxnorm_historical_ndcs\n        on rxnorm_historical_ndcs.ndc = all_distinct_ndcs.ndc\n    left join rxnorm_ndcs\n        on rxnorm_ndcs.ndc = all_distinct_ndcs.ndc\n    left join fda_ndc_ndcs\n        on fda_ndc_ndcs.ndc = all_distinct_ndcs.ndc\n    left join fda_excluded_ndcs\n        on fda_excluded_ndcs.ndc = all_distinct_ndcs.ndc\n    left join fda_unfinished_ndcs\n        on fda_unfinished_ndcs.ndc = all_distinct_ndcs.ndc\n)\n\n, all_not_null_ndcs_to_sources as (\n    select\n        *\n    from all_ndcs_to_sources\n    where ndc is not null\n)\n\n, all_ndc_descriptions as (\n    select * from \"sagerx\".\"sagerx_dev\".\"all_ndc_descriptions\"\n)\n\n, all_ndcs_with_descriptions_to_sources as (\n    select\n        all_not_null_ndcs_to_sources.*\n    from all_not_null_ndcs_to_sources\n    inner join all_ndc_descriptions\n        on all_ndc_descriptions.ndc = all_not_null_ndcs_to_sources.ndc\n)\n\nselect * from all_ndcs_with_descriptions_to_sources", "relation_name": "\"sagerx\".\"sagerx_dev\".\"all_ndcs_to_sources\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.119736Z", "completed_at": "2025-02-06T18:34:30.123792Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.124154Z", "completed_at": "2025-02-06T18:34:30.124160Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005238771438598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.not_null_all_ndc_descriptions_ndc.5637013605", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ndc\nfrom \"sagerx\".\"sagerx_dev\".\"all_ndc_descriptions\"\nwhere ndc is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.125896Z", "completed_at": "2025-02-06T18:34:30.129856Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.130215Z", "completed_at": "2025-02-06T18:34:30.130220Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005125284194946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.sagerx.unique_all_ndc_descriptions_ndc.e6968eba9b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ndc as unique_field,\n    count(*) as n_records\n\nfrom \"sagerx\".\"sagerx_dev\".\"all_ndc_descriptions\"\nwhere ndc is not null\ngroup by ndc\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.131979Z", "completed_at": "2025-02-06T18:34:30.135254Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.135617Z", "completed_at": "2025-02-06T18:34:30.135622Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004468202590942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.int_dailymed_image_xml_ndcs", "compiled": true, "compiled_code": "-- int_dailymed_image_xml_ndcs\n\nwith\n\nranked_package_label_images as\n(\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_dailymed_ranked_package_label_images\"\n\n),\n\nranked_package_label_ndcs as\n(\n\n    select * from \"sagerx\".\"sagerx_dev\".\"int_dailymed_ranked_package_label_ndcs\"\n\n)\n\nselect\n\timg.set_id,\n\tndc.ndc,\n\timg.image\nfrom ranked_package_label_images img\nleft join ranked_package_label_ndcs ndc\n\ton ndc.package_label_section_id = img.package_label_section_id\n\tand ndc.rn = img.rn\nwhere ndc.ndc is not null", "relation_name": "\"sagerx\".\"sagerx_dev\".\"int_dailymed_image_xml_ndcs\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-02-06T18:34:30.137576Z", "completed_at": "2025-02-06T18:34:30.141379Z"}, {"name": "execute", "started_at": "2025-02-06T18:34:30.141746Z", "completed_at": "2025-02-06T18:34:30.141752Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00497746467590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.sagerx.ndcs_to_label_images", "compiled": true, "compiled_code": "-- ndcs_to_label_images\n\nwith\n\nimage_xml_ndcs as (\n\n\tselect * from \"sagerx\".\"sagerx_dev\".\"int_dailymed_image_xml_ndcs\"\n\n\n),\n\nimage_name_ndcs as (\n\n\tselect * from \"sagerx\".\"sagerx_dev\".\"int_dailymed_image_name_ndcs\"\n\n),\n\nall_image_ndcs as (\n\n\tselect\n\t\tset_id,\n\t\tndc,\n\t\timage\t\n\tfrom image_xml_ndcs\n\n\tunion\n\n\tselect\n\t\tset_id,\n\t\tndc,\n\t\timage\n\tfrom image_name_ndcs\n\n),\n\nall_image_ndcs_ndc11 as (\n\n\tselect\n\t\tset_id,\n\t\tndc,\n\t\t\n  \n  CASE WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n = '10 Digit' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '11 Digit' THEN ndc\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-4-2' THEN '0' || LEFT(ndc,4) || REPLACE(RIGHT(ndc,7),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-3-2' THEN LEFT(ndc,5) || '0' || REPLACE(RIGHT(ndc,6),'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-1' THEN REPLACE(LEFT(ndc,10),'-','') || '0' || RIGHT(ndc, 1)\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-4-2' THEN REPLACE(ndc,'-','')\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '5-5' THEN NULL\n     WHEN \n  \n  \n    CASE WHEN ndc ~ '^\\d{10}$' THEN '10 Digit'\n        WHEN ndc ~ '^\\d{11}$' THEN '11 Digit'\n        WHEN ndc ~ '^\\d{4}-\\d{4}-\\d{2}$' THEN '4-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{3}-\\d{2}$' THEN '5-3-2'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{1}$' THEN '5-4-1'\n        WHEN ndc ~ '^\\d{5}-\\d{4}-\\d{2}$' THEN '5-4-2'\n        WHEN ndc ~ '^\\d{5}-\\d{5}$' THEN '5-5'\n        WHEN ndc ~ '^\\d{4}-\\d{6}$' THEN '4-6'\n\t  ELSE 'Unknown'\n\t  END\n  \n =  '4-6' THEN NULL\n  ELSE NULL\n  END\n  \n as ndc11,\n\t\tconcat('https://dailymed.nlm.nih.gov/dailymed/image.cfm?name=', image, '&setid=', set_id) as image_url,\n\t\timage as image_file,\n\t\tconcat('https://dailymed.nlm.nih.gov/dailymed/drugInfo.cfm?setid=', set_id) as dailymed_spl_url\n\tfrom all_image_ndcs\n\n)\n\nselect * from all_image_ndcs_ndc11", "relation_name": "\"sagerx\".\"sagerx_dev\".\"ndcs_to_label_images\""}], "elapsed_time": 1.1119472980499268, "args": {"quiet": false, "project_dir": "/dbt/sagerx", "use_colors_file": true, "static": false, "log_path": "/dbt/sagerx/logs", "partial_parse": true, "partial_parse_file_diff": true, "log_file_max_bytes": 10485760, "populate_cache": true, "static_parser": true, "show_resource_report": false, "defer": false, "indirect_selection": "eager", "print": true, "printer_width": 80, "log_level": "info", "strict_mode": false, "vars": {}, "require_resource_names_without_spaces": false, "exclude": [], "introspect": true, "invocation_command": "dbt docs generate", "select": [], "profiles_dir": "/dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "log_level_file": "debug", "version_check": true, "write_json": true, "send_anonymous_usage_stats": true, "log_format": "default", "compile": true, "cache_selected_only": false, "macro_debugging": false, "which": "generate", "source_freshness_run_project_hooks": false, "favor_state": false, "empty_catalog": false, "enable_legacy_logger": false, "warn_error_options": {"include": [], "exclude": []}, "use_colors": true, "log_format_file": "debug"}}